
Kalman_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08009bb8  08009bb8  00019bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fec  08009fec  00021910  2**0
                  CONTENTS
  4 .ARM          00000008  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ff4  08009ff4  00021910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ff4  08009ff4  00019ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ff8  08009ff8  00019ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001910  20000000  08009ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f80  20001910  0800b90c  00021910  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002890  0800b90c  00022890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021910  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a2cb  00000000  00000000  00021940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c9b  00000000  00000000  0005bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001230d  00000000  00000000  000628a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  00074bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001468  00000000  00000000  00076188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002902e  00000000  00000000  000775f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c514  00000000  00000000  000a061e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3345  00000000  00000000  000ccb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c1  00000000  00000000  0019fe77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b44  00000000  00000000  0019ff38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000003c  00000000  00000000  001a4a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000076  00000000  00000000  001a4ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001910 	.word	0x20001910
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b9c 	.word	0x08009b9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001914 	.word	0x20001914
 80001cc:	08009b9c 	.word	0x08009b9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <DATA_LOGGER_Init>:
static uint8_t name_mcu_load[] = "CPU Load";

static uint8_t name_input_pwm1[] = "PWM 1";


void DATA_LOGGER_Init(system_t * sys_){
 8000ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	sys = sys_;
 8000ea4:	4bf1      	ldr	r3, [pc, #964]	; (800126c <DATA_LOGGER_Init+0x3cc>)
 8000ea6:	6018      	str	r0, [r3, #0]

	//	-----------------------------------------------	Définitions des data	-----------------------------------------------------------------
	//Angle
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							NOT_USED);
 8000ea8:	4bf1      	ldr	r3, [pc, #964]	; (8001270 <DATA_LOGGER_Init+0x3d0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	721a      	strb	r2, [r3, #8]
 8000eae:	f500 715f 	add.w	r1, r0, #892	; 0x37c
 8000eb2:	6059      	str	r1, [r3, #4]
 8000eb4:	2129      	movs	r1, #41	; 0x29
 8000eb6:	7259      	strb	r1, [r3, #9]
 8000eb8:	4cee      	ldr	r4, [pc, #952]	; (8001274 <DATA_LOGGER_Init+0x3d4>)
 8000eba:	60dc      	str	r4, [r3, #12]
 8000ebc:	f04f 0c0a 	mov.w	ip, #10
 8000ec0:	f883 c010 	strb.w	ip, [r3, #16]
 8000ec4:	745a      	strb	r2, [r3, #17]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							USED_AS_OUTPUT);
 8000ec6:	2401      	movs	r4, #1
 8000ec8:	771c      	strb	r4, [r3, #28]
 8000eca:	f500 7560 	add.w	r5, r0, #896	; 0x380
 8000ece:	619d      	str	r5, [r3, #24]
 8000ed0:	7759      	strb	r1, [r3, #29]
 8000ed2:	4de9      	ldr	r5, [pc, #932]	; (8001278 <DATA_LOGGER_Init+0x3d8>)
 8000ed4:	621d      	str	r5, [r3, #32]
 8000ed6:	f04f 0e0b 	mov.w	lr, #11
 8000eda:	f883 e024 	strb.w	lr, [r3, #36]	; 0x24
 8000ede:	f883 4025 	strb.w	r4, [r3, #37]	; 0x25

	//Angles acc
	DEFINE_DATA(DATA_ID_ROLL_ACC_ANGLE, (uint8_t*)&sys->sensors.acc.angles[ORIENTATION_ROLL], 											DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle_acc,						NOT_USED);
 8000ee2:	2502      	movs	r5, #2
 8000ee4:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8000ee8:	f500 763e 	add.w	r6, r0, #760	; 0x2f8
 8000eec:	62de      	str	r6, [r3, #44]	; 0x2c
 8000eee:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
 8000ef2:	4ee2      	ldr	r6, [pc, #904]	; (800127c <DATA_LOGGER_Init+0x3dc>)
 8000ef4:	635e      	str	r6, [r3, #52]	; 0x34
 8000ef6:	270c      	movs	r7, #12
 8000ef8:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
 8000efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->sensors.acc.angles[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						NOT_USED);
 8000f00:	2603      	movs	r6, #3
 8000f02:	f883 6044 	strb.w	r6, [r3, #68]	; 0x44
 8000f06:	f500 763f 	add.w	r6, r0, #764	; 0x2fc
 8000f0a:	641e      	str	r6, [r3, #64]	; 0x40
 8000f0c:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
 8000f10:	4edb      	ldr	r6, [pc, #876]	; (8001280 <DATA_LOGGER_Init+0x3e0>)
 8000f12:	649e      	str	r6, [r3, #72]	; 0x48
 8000f14:	260d      	movs	r6, #13
 8000f16:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
 8000f1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	//Angle rate
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 											DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000f1e:	f04f 0804 	mov.w	r8, #4
 8000f22:	f883 8058 	strb.w	r8, [r3, #88]	; 0x58
 8000f26:	f500 7805 	add.w	r8, r0, #532	; 0x214
 8000f2a:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
 8000f2e:	f883 1059 	strb.w	r1, [r3, #89]	; 0x59
 8000f32:	f8df 8374 	ldr.w	r8, [pc, #884]	; 80012a8 <DATA_LOGGER_Init+0x408>
 8000f36:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
 8000f3a:	f04f 0909 	mov.w	r9, #9
 8000f3e:	f883 9060 	strb.w	r9, [r3, #96]	; 0x60
 8000f42:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 											DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							NOT_USED);
 8000f46:	f04f 0805 	mov.w	r8, #5
 8000f4a:	f883 806c 	strb.w	r8, [r3, #108]	; 0x6c
 8000f4e:	f500 7806 	add.w	r8, r0, #536	; 0x218
 8000f52:	f8c3 8068 	str.w	r8, [r3, #104]	; 0x68
 8000f56:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
 8000f5a:	f8df 8350 	ldr.w	r8, [pc, #848]	; 80012ac <DATA_LOGGER_Init+0x40c>
 8000f5e:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
 8000f62:	f883 c074 	strb.w	ip, [r3, #116]	; 0x74
 8000f66:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 												DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					NOT_USED);
 8000f6a:	f04f 0806 	mov.w	r8, #6
 8000f6e:	f883 8080 	strb.w	r8, [r3, #128]	; 0x80
 8000f72:	f500 7807 	add.w	r8, r0, #540	; 0x21c
 8000f76:	f8c3 807c 	str.w	r8, [r3, #124]	; 0x7c
 8000f7a:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
 8000f7e:	f8df 8330 	ldr.w	r8, [pc, #816]	; 80012b0 <DATA_LOGGER_Init+0x410>
 8000f82:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
 8000f86:	f04f 0a08 	mov.w	sl, #8
 8000f8a:	f883 a088 	strb.w	sl, [r3, #136]	; 0x88
 8000f8e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	//Acceleration
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 												DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
 8000f92:	f883 c0d0 	strb.w	ip, [r3, #208]	; 0xd0
 8000f96:	f500 7c23 	add.w	ip, r0, #652	; 0x28c
 8000f9a:	f8c3 c0cc 	str.w	ip, [r3, #204]	; 0xcc
 8000f9e:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 8000fa2:	f883 c0d1 	strb.w	ip, [r3, #209]	; 0xd1
 8000fa6:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80012b4 <DATA_LOGGER_Init+0x414>
 8000faa:	f8c3 80d4 	str.w	r8, [r3, #212]	; 0xd4
 8000fae:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8000fb2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 											DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							NOT_USED);
 8000fb6:	f883 e0e4 	strb.w	lr, [r3, #228]	; 0xe4
 8000fba:	f500 7824 	add.w	r8, r0, #656	; 0x290
 8000fbe:	f8c3 80e0 	str.w	r8, [r3, #224]	; 0xe0
 8000fc2:	f883 c0e5 	strb.w	ip, [r3, #229]	; 0xe5
 8000fc6:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 80012b8 <DATA_LOGGER_Init+0x418>
 8000fca:	f8c3 80e8 	str.w	r8, [r3, #232]	; 0xe8
 8000fce:	f883 90ec 	strb.w	r9, [r3, #236]	; 0xec
 8000fd2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 												DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								NOT_USED);
 8000fd6:	f883 70f8 	strb.w	r7, [r3, #248]	; 0xf8
 8000fda:	f500 7825 	add.w	r8, r0, #660	; 0x294
 8000fde:	f8c3 80f4 	str.w	r8, [r3, #244]	; 0xf4
 8000fe2:	f883 c0f9 	strb.w	ip, [r3, #249]	; 0xf9
 8000fe6:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 80012bc <DATA_LOGGER_Init+0x41c>
 8000fea:	f8c3 80fc 	str.w	r8, [r3, #252]	; 0xfc
 8000fee:	f04f 0b07 	mov.w	fp, #7
 8000ff2:	f883 b100 	strb.w	fp, [r3, #256]	; 0x100
 8000ff6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

	//Acceleration
	DEFINE_DATA(DATA_ID_ROLL_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_ROLL], 												DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc_raw, 							NOT_USED);
 8000ffa:	f883 610c 	strb.w	r6, [r3, #268]	; 0x10c
 8000ffe:	f8d0 8288 	ldr.w	r8, [r0, #648]	; 0x288
 8001002:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
 8001006:	f883 c10d 	strb.w	ip, [r3, #269]	; 0x10d
 800100a:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 80012c0 <DATA_LOGGER_Init+0x420>
 800100e:	f8c3 9110 	str.w	r9, [r3, #272]	; 0x110
 8001012:	f883 7114 	strb.w	r7, [r3, #276]	; 0x114
 8001016:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 												DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						NOT_USED);
 800101a:	f04f 090e 	mov.w	r9, #14
 800101e:	f883 9120 	strb.w	r9, [r3, #288]	; 0x120
 8001022:	f108 0b04 	add.w	fp, r8, #4
 8001026:	f8c3 b11c 	str.w	fp, [r3, #284]	; 0x11c
 800102a:	f883 c121 	strb.w	ip, [r3, #289]	; 0x121
 800102e:	f8df b294 	ldr.w	fp, [pc, #660]	; 80012c4 <DATA_LOGGER_Init+0x424>
 8001032:	f8c3 b124 	str.w	fp, [r3, #292]	; 0x124
 8001036:	f883 6128 	strb.w	r6, [r3, #296]	; 0x128
 800103a:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
	DEFINE_DATA(DATA_ID_YAW_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_YAW], 													DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc_raw, 							NOT_USED);
 800103e:	f04f 0b0f 	mov.w	fp, #15
 8001042:	f883 b134 	strb.w	fp, [r3, #308]	; 0x134
 8001046:	44d0      	add	r8, sl
 8001048:	f8c3 8130 	str.w	r8, [r3, #304]	; 0x130
 800104c:	f883 c135 	strb.w	ip, [r3, #309]	; 0x135
 8001050:	f8df c274 	ldr.w	ip, [pc, #628]	; 80012c8 <DATA_LOGGER_Init+0x428>
 8001054:	f8c3 c138 	str.w	ip, [r3, #312]	; 0x138
 8001058:	f883 e13c 	strb.w	lr, [r3, #316]	; 0x13c
 800105c:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

	//Angle Rate raw
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 												DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 						NOT_USED);
 8001060:	f04f 0c07 	mov.w	ip, #7
 8001064:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
 8001068:	f8d0 c210 	ldr.w	ip, [r0, #528]	; 0x210
 800106c:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8001070:	f883 1095 	strb.w	r1, [r3, #149]	; 0x95
 8001074:	f8df 8254 	ldr.w	r8, [pc, #596]	; 80012cc <DATA_LOGGER_Init+0x42c>
 8001078:	f8c3 8098 	str.w	r8, [r3, #152]	; 0x98
 800107c:	f883 609c 	strb.w	r6, [r3, #156]	; 0x9c
 8001080:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_PITCH], 											DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,						NOT_USED);
 8001084:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8001088:	f10c 0804 	add.w	r8, ip, #4
 800108c:	f8c3 80a4 	str.w	r8, [r3, #164]	; 0xa4
 8001090:	f883 10a9 	strb.w	r1, [r3, #169]	; 0xa9
 8001094:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80012d0 <DATA_LOGGER_Init+0x430>
 8001098:	f8c3 80ac 	str.w	r8, [r3, #172]	; 0xac
 800109c:	f883 90b0 	strb.w	r9, [r3, #176]	; 0xb0
 80010a0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 												DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 							NOT_USED);
 80010a4:	f04f 0809 	mov.w	r8, #9
 80010a8:	f883 80bc 	strb.w	r8, [r3, #188]	; 0xbc
 80010ac:	44d4      	add	ip, sl
 80010ae:	f8c3 c0b8 	str.w	ip, [r3, #184]	; 0xb8
 80010b2:	f883 10bd 	strb.w	r1, [r3, #189]	; 0xbd
 80010b6:	f8df c21c 	ldr.w	ip, [pc, #540]	; 80012d4 <DATA_LOGGER_Init+0x434>
 80010ba:	f8c3 c0c0 	str.w	ip, [r3, #192]	; 0xc0
 80010be:	f883 70c4 	strb.w	r7, [r3, #196]	; 0xc4
 80010c2:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

	//State space stuff
	DEFINE_DATA(DATA_ID_STATE_VECTOR_ANGLE_Y, (uint8_t*)&sys->ss.x_array[STATE_VECTOR_ANGLE_Y], 										DATA_FORMAT_16B_FLOAT_1D, 	name_state_vector_angle_y, 					USED_AS_OUTPUT);
 80010c6:	f04f 0c10 	mov.w	ip, #16
 80010ca:	f883 c148 	strb.w	ip, [r3, #328]	; 0x148
 80010ce:	f100 0884 	add.w	r8, r0, #132	; 0x84
 80010d2:	f8c3 8144 	str.w	r8, [r3, #324]	; 0x144
 80010d6:	f883 1149 	strb.w	r1, [r3, #329]	; 0x149
 80010da:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80012d8 <DATA_LOGGER_Init+0x438>
 80010de:	f8c3 814c 	str.w	r8, [r3, #332]	; 0x14c
 80010e2:	f883 6150 	strb.w	r6, [r3, #336]	; 0x150
 80010e6:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
	DEFINE_DATA(DATA_ID_STATE_VECTOR_GYRO_Y, (uint8_t*)&sys->ss.x_array[STATE_VECTOR_ANGLE_RATE_Y], 									DATA_FORMAT_16B_FLOAT_1D, 	name_state_vector_gyro_y, 					USED_AS_OUTPUT);
 80010ea:	f04f 0811 	mov.w	r8, #17
 80010ee:	f883 815c 	strb.w	r8, [r3, #348]	; 0x15c
 80010f2:	f100 0888 	add.w	r8, r0, #136	; 0x88
 80010f6:	f8c3 8158 	str.w	r8, [r3, #344]	; 0x158
 80010fa:	f883 115d 	strb.w	r1, [r3, #349]	; 0x15d
 80010fe:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80012dc <DATA_LOGGER_Init+0x43c>
 8001102:	f8c3 8160 	str.w	r8, [r3, #352]	; 0x160
 8001106:	f883 7164 	strb.w	r7, [r3, #356]	; 0x164
 800110a:	f883 4165 	strb.w	r4, [r3, #357]	; 0x165
	DEFINE_DATA(DATA_ID_MEASUREMENTS_ANGLE_Y, (uint8_t*)&sys->ss.z_array[MEASUREMENT_VECTOR_ANGLE_Y], 									DATA_FORMAT_16B_FLOAT_1D, 	name_measurement_angle_y, 					USED_AS_OUTPUT);
 800110e:	f04f 0812 	mov.w	r8, #18
 8001112:	f883 8170 	strb.w	r8, [r3, #368]	; 0x170
 8001116:	f100 08a8 	add.w	r8, r0, #168	; 0xa8
 800111a:	f8c3 816c 	str.w	r8, [r3, #364]	; 0x16c
 800111e:	f883 1171 	strb.w	r1, [r3, #369]	; 0x171
 8001122:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80012e0 <DATA_LOGGER_Init+0x440>
 8001126:	f8c3 8174 	str.w	r8, [r3, #372]	; 0x174
 800112a:	f883 6178 	strb.w	r6, [r3, #376]	; 0x178
 800112e:	f883 4179 	strb.w	r4, [r3, #377]	; 0x179
	DEFINE_DATA(DATA_ID_MEASUREMENTS_GYRO_Y, (uint8_t*)&sys->ss.z_array[MEASUREMENT_VECTOR_GYRO_Y], 									DATA_FORMAT_16B_FLOAT_1D, 	name_measurement_gyro_y, 					USED_AS_OUTPUT);
 8001132:	f04f 0813 	mov.w	r8, #19
 8001136:	f883 8184 	strb.w	r8, [r3, #388]	; 0x184
 800113a:	f100 08ac 	add.w	r8, r0, #172	; 0xac
 800113e:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
 8001142:	f883 1185 	strb.w	r1, [r3, #389]	; 0x185
 8001146:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80012e4 <DATA_LOGGER_Init+0x444>
 800114a:	f8c3 8188 	str.w	r8, [r3, #392]	; 0x188
 800114e:	f883 718c 	strb.w	r7, [r3, #396]	; 0x18c
 8001152:	f883 418d 	strb.w	r4, [r3, #397]	; 0x18d

	//Kalman stuff
	DEFINE_DATA(DATA_ID_KALMAN_STATE_VECTOR_ANGLE_Y_PREDICT, (uint8_t*)&sys->kalman.x_predict_array[STATE_VECTOR_ANGLE_Y], 				DATA_FORMAT_16B_FLOAT_1D, 	name_kalman_predict_angle_y, 				USED_AS_OUTPUT);
 8001156:	2714      	movs	r7, #20
 8001158:	f883 7198 	strb.w	r7, [r3, #408]	; 0x198
 800115c:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
 8001160:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 8001164:	f883 1199 	strb.w	r1, [r3, #409]	; 0x199
 8001168:	4f46      	ldr	r7, [pc, #280]	; (8001284 <DATA_LOGGER_Init+0x3e4>)
 800116a:	f8c3 719c 	str.w	r7, [r3, #412]	; 0x19c
 800116e:	f883 b1a0 	strb.w	fp, [r3, #416]	; 0x1a0
 8001172:	f883 41a1 	strb.w	r4, [r3, #417]	; 0x1a1
	DEFINE_DATA(DATA_ID_KALMAN_STATE_VECTOR_ANGLE_RATE_Y_PREDICT, (uint8_t*)&sys->kalman.x_predict_array[STATE_VECTOR_ANGLE_RATE_Y],	DATA_FORMAT_16B_FLOAT_1D, 	name_kalman_predict_gyro_y, 				USED_AS_OUTPUT);
 8001176:	2715      	movs	r7, #21
 8001178:	f883 71ac 	strb.w	r7, [r3, #428]	; 0x1ac
 800117c:	f100 07d8 	add.w	r7, r0, #216	; 0xd8
 8001180:	f8c3 71a8 	str.w	r7, [r3, #424]	; 0x1a8
 8001184:	f883 11ad 	strb.w	r1, [r3, #429]	; 0x1ad
 8001188:	493f      	ldr	r1, [pc, #252]	; (8001288 <DATA_LOGGER_Init+0x3e8>)
 800118a:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
 800118e:	f883 91b4 	strb.w	r9, [r3, #436]	; 0x1b4
 8001192:	f883 41b5 	strb.w	r4, [r3, #437]	; 0x1b5

	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 NULL, 																						DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					NOT_USED);
 8001196:	2117      	movs	r1, #23
 8001198:	f883 11d4 	strb.w	r1, [r3, #468]	; 0x1d4
 800119c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 80011a0:	212a      	movs	r1, #42	; 0x2a
 80011a2:	f883 11d5 	strb.w	r1, [r3, #469]	; 0x1d5
 80011a6:	4f39      	ldr	r7, [pc, #228]	; (800128c <DATA_LOGGER_Init+0x3ec>)
 80011a8:	f8c3 71d8 	str.w	r7, [r3, #472]	; 0x1d8
 80011ac:	f04f 0b07 	mov.w	fp, #7
 80011b0:	f883 b1dc 	strb.w	fp, [r3, #476]	; 0x1dc
 80011b4:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd

	DEFINE_DATA(DATA_ID_MCU_LOAD,	 (uint8_t*)&sys->soft.cpu_load, 																	DATA_FORMAT_16B_FLOAT_2D, 	name_mcu_load, 								USED_AS_OUTPUT);
 80011b8:	2718      	movs	r7, #24
 80011ba:	f883 71e8 	strb.w	r7, [r3, #488]	; 0x1e8
 80011be:	f200 50bc 	addw	r0, r0, #1468	; 0x5bc
 80011c2:	f8c3 01e4 	str.w	r0, [r3, #484]	; 0x1e4
 80011c6:	f883 11e9 	strb.w	r1, [r3, #489]	; 0x1e9
 80011ca:	4931      	ldr	r1, [pc, #196]	; (8001290 <DATA_LOGGER_Init+0x3f0>)
 80011cc:	f8c3 11ec 	str.w	r1, [r3, #492]	; 0x1ec
 80011d0:	f883 a1f0 	strb.w	sl, [r3, #496]	; 0x1f0
 80011d4:	f883 41f1 	strb.w	r4, [r3, #497]	; 0x1f1

	//Buttons
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_config_request, 						USED_AS_INPUT );
 80011d8:	211a      	movs	r1, #26
 80011da:	f883 1210 	strb.w	r1, [r3, #528]	; 0x210
 80011de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80011e2:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 80011e6:	492b      	ldr	r1, [pc, #172]	; (8001294 <DATA_LOGGER_Init+0x3f4>)
 80011e8:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
 80011ec:	f883 e218 	strb.w	lr, [r3, #536]	; 0x218
 80011f0:	f883 5219 	strb.w	r5, [r3, #537]	; 0x219
	DEFINE_DATA(DATA_ID_START_TRANSFER, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 				USED_AS_INPUT);
 80011f4:	211b      	movs	r1, #27
 80011f6:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
 80011fa:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 80011fe:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
 8001202:	4925      	ldr	r1, [pc, #148]	; (8001298 <DATA_LOGGER_Init+0x3f8>)
 8001204:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
 8001208:	f883 922c 	strb.w	r9, [r3, #556]	; 0x22c
 800120c:	f883 522d 	strb.w	r5, [r3, #557]	; 0x22d
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, 		NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 						USED_AS_INPUT);
 8001210:	211c      	movs	r1, #28
 8001212:	f883 1238 	strb.w	r1, [r3, #568]	; 0x238
 8001216:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 800121a:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 800121e:	491f      	ldr	r1, [pc, #124]	; (800129c <DATA_LOGGER_Init+0x3fc>)
 8001220:	f8c3 123c 	str.w	r1, [r3, #572]	; 0x23c
 8001224:	f883 6240 	strb.w	r6, [r3, #576]	; 0x240
 8001228:	f883 5241 	strb.w	r5, [r3, #577]	; 0x241
	DEFINE_DATA(DATA_ID_IDLE_MODE, 			NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_idle_mode, 							USED_AS_INPUT);
 800122c:	211d      	movs	r1, #29
 800122e:	f883 124c 	strb.w	r1, [r3, #588]	; 0x24c
 8001232:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 8001236:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
 800123a:	4919      	ldr	r1, [pc, #100]	; (80012a0 <DATA_LOGGER_Init+0x400>)
 800123c:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
 8001240:	f04f 0809 	mov.w	r8, #9
 8001244:	f883 8254 	strb.w	r8, [r3, #596]	; 0x254
 8001248:	f883 5255 	strb.w	r5, [r3, #597]	; 0x255
	DEFINE_DATA(DATA_ID_FULL_MANUAL_MODE, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_full_manual_mode, 						USED_AS_INPUT);
 800124c:	211e      	movs	r1, #30
 800124e:	f883 1260 	strb.w	r1, [r3, #608]	; 0x260
 8001252:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8001256:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800125a:	4912      	ldr	r1, [pc, #72]	; (80012a4 <DATA_LOGGER_Init+0x404>)
 800125c:	f8c3 1264 	str.w	r1, [r3, #612]	; 0x264
 8001260:	f883 e268 	strb.w	lr, [r3, #616]	; 0x268
 8001264:	f883 5269 	strb.w	r5, [r3, #617]	; 0x269
	DEFINE_DATA(DATA_ID_START_SIMULATION, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_simulation, 						USED_AS_INPUT);
 8001268:	211f      	movs	r1, #31
 800126a:	e03d      	b.n	80012e8 <DATA_LOGGER_Init+0x448>
 800126c:	20001bc4 	.word	0x20001bc4
 8001270:	2000192c 	.word	0x2000192c
 8001274:	200000e8 	.word	0x200000e8
 8001278:	20000094 	.word	0x20000094
 800127c:	200000f4 	.word	0x200000f4
 8001280:	200000a0 	.word	0x200000a0
 8001284:	2000002c 	.word	0x2000002c
 8001288:	2000003c 	.word	0x2000003c
 800128c:	20000120 	.word	0x20000120
 8001290:	2000004c 	.word	0x2000004c
 8001294:	20000000 	.word	0x20000000
 8001298:	2000013c 	.word	0x2000013c
 800129c:	2000016c 	.word	0x2000016c
 80012a0:	20000018 	.word	0x20000018
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	20000104 	.word	0x20000104
 80012ac:	200000b0 	.word	0x200000b0
 80012b0:	20000190 	.word	0x20000190
 80012b4:	200000cc 	.word	0x200000cc
 80012b8:	20000078 	.word	0x20000078
 80012bc:	2000017c 	.word	0x2000017c
 80012c0:	200000d8 	.word	0x200000d8
 80012c4:	20000084 	.word	0x20000084
 80012c8:	20000184 	.word	0x20000184
 80012cc:	20000110 	.word	0x20000110
 80012d0:	200000bc 	.word	0x200000bc
 80012d4:	2000019c 	.word	0x2000019c
 80012d8:	2000014c 	.word	0x2000014c
 80012dc:	2000015c 	.word	0x2000015c
 80012e0:	20000058 	.word	0x20000058
 80012e4:	20000068 	.word	0x20000068
 80012e8:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
 80012ec:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 80012f0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <DATA_LOGGER_Init+0x488>)
 80012f6:	f8c3 1278 	str.w	r1, [r3, #632]	; 0x278
 80012fa:	f883 c27c 	strb.w	ip, [r3, #636]	; 0x27c
 80012fe:	f883 527d 	strb.w	r5, [r3, #637]	; 0x27d


	DEFINE_DATA(DATA_ID_INPUT_PWM_1, 		NULL, 																				DATA_FORMAT_16B_INT16, 	name_input_pwm1, 							USED_AS_INPUT);
 8001302:	2119      	movs	r1, #25
 8001304:	f883 11fc 	strb.w	r1, [r3, #508]	; 0x1fc
 8001308:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
 800130c:	222d      	movs	r2, #45	; 0x2d
 800130e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
 8001312:	4a06      	ldr	r2, [pc, #24]	; (800132c <DATA_LOGGER_Init+0x48c>)
 8001314:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001318:	f04f 0805 	mov.w	r8, #5
 800131c:	f883 8204 	strb.w	r8, [r3, #516]	; 0x204
 8001320:	f883 5205 	strb.w	r5, [r3, #517]	; 0x205


}
 8001324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001328:	20000128 	.word	0x20000128
 800132c:	20000024 	.word	0x20000024

08001330 <DATA_LOGGER_Start>:

void DATA_LOGGER_Start(){
	start_flag = TRUE;
 8001330:	4b01      	ldr	r3, [pc, #4]	; (8001338 <DATA_LOGGER_Start+0x8>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
}
 8001336:	4770      	bx	lr
 8001338:	20001bb8 	.word	0x20001bb8

0800133c <DATA_LOGGER_Stop>:

void DATA_LOGGER_Stop(){
	stop_flag = TRUE;
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <DATA_LOGGER_Stop+0x8>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	4770      	bx	lr
 8001344:	20001bc0 	.word	0x20001bc0

08001348 <DATA_LOGGER_Reception>:
			break;
	}

}

void DATA_LOGGER_Reception(uint8_t * input_buffer){
 8001348:	b508      	push	{r3, lr}
	uint8_t id = input_buffer[0];
 800134a:	7803      	ldrb	r3, [r0, #0]
	uint16_t tmp_uint_16 = 0 ;
	int16_t tmp_int_16 = 0;
	switch(data_list[id].format){
 800134c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001350:	4a26      	ldr	r2, [pc, #152]	; (80013ec <DATA_LOGGER_Reception+0xa4>)
 8001352:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001356:	7a52      	ldrb	r2, [r2, #9]
 8001358:	2a2c      	cmp	r2, #44	; 0x2c
 800135a:	d037      	beq.n	80013cc <DATA_LOGGER_Reception+0x84>
 800135c:	2a2d      	cmp	r2, #45	; 0x2d
 800135e:	d024      	beq.n	80013aa <DATA_LOGGER_Reception+0x62>
 8001360:	b102      	cbz	r2, 8001364 <DATA_LOGGER_Reception+0x1c>
			break;
		default:
			break;

	}
}
 8001362:	bd08      	pop	{r3, pc}
			switch(id)
 8001364:	3b1a      	subs	r3, #26
 8001366:	2b05      	cmp	r3, #5
 8001368:	d8fb      	bhi.n	8001362 <DATA_LOGGER_Reception+0x1a>
 800136a:	e8df f003 	tbb	[pc, r3]
 800136e:	0703      	.short	0x0703
 8001370:	15110d0a 	.word	0x15110d0a
					send_config_flag = TRUE;
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <DATA_LOGGER_Reception+0xa8>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
					break;
 800137a:	e7f2      	b.n	8001362 <DATA_LOGGER_Reception+0x1a>
					DATA_LOGGER_Start();
 800137c:	f7ff ffd8 	bl	8001330 <DATA_LOGGER_Start>
					break;
 8001380:	e7ef      	b.n	8001362 <DATA_LOGGER_Reception+0x1a>
					DATA_LOGGER_Stop();
 8001382:	f7ff ffdb 	bl	800133c <DATA_LOGGER_Stop>
					break;
 8001386:	e7ec      	b.n	8001362 <DATA_LOGGER_Reception+0x1a>
					HIGH_LVL_Set_Mode(HIGH_LVL_STATE_IDLE);
 8001388:	2000      	movs	r0, #0
 800138a:	f000 fa31 	bl	80017f0 <HIGH_LVL_Set_Mode>
					break;
 800138e:	e7e8      	b.n	8001362 <DATA_LOGGER_Reception+0x1a>
					HIGH_LVL_Set_Mode(HIGH_LVL_STATE_FULL_MANUAL);
 8001390:	2001      	movs	r0, #1
 8001392:	f000 fa2d 	bl	80017f0 <HIGH_LVL_Set_Mode>
					break;
 8001396:	e7e4      	b.n	8001362 <DATA_LOGGER_Reception+0x1a>
					sys->simulate = 1 - sys->simulate;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <DATA_LOGGER_Reception+0xac>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	f8d2 392c 	ldr.w	r3, [r2, #2348]	; 0x92c
 80013a0:	f1c3 0301 	rsb	r3, r3, #1
 80013a4:	f8c2 392c 	str.w	r3, [r2, #2348]	; 0x92c
					break;
 80013a8:	e7db      	b.n	8001362 <DATA_LOGGER_Reception+0x1a>
			tmp_int_16 = (int16_t)input_buffer[1] << 8;
 80013aa:	7841      	ldrb	r1, [r0, #1]
			tmp_int_16 += (int16_t)input_buffer[2];
 80013ac:	7882      	ldrb	r2, [r0, #2]
 80013ae:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80013b2:	b212      	sxth	r2, r2
			switch(id){
 80013b4:	2b19      	cmp	r3, #25
 80013b6:	d1d4      	bne.n	8001362 <DATA_LOGGER_Reception+0x1a>
					sys->regulation.motor_consigne = MIN(500, tmp_int_16);
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <DATA_LOGGER_Reception+0xac>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80013c0:	bfa8      	it	ge
 80013c2:	f44f 72fa 	movge.w	r2, #500	; 0x1f4
 80013c6:	f8a3 25b0 	strh.w	r2, [r3, #1456]	; 0x5b0
					break;
 80013ca:	e7ca      	b.n	8001362 <DATA_LOGGER_Reception+0x1a>
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 80013cc:	7841      	ldrb	r1, [r0, #1]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 80013ce:	7882      	ldrb	r2, [r0, #2]
 80013d0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80013d4:	b292      	uxth	r2, r2
			switch(id){
 80013d6:	2b19      	cmp	r3, #25
 80013d8:	d1c3      	bne.n	8001362 <DATA_LOGGER_Reception+0x1a>
					sys->regulation.motor_consigne = MIN(130, tmp_uint_16);
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <DATA_LOGGER_Reception+0xac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2a82      	cmp	r2, #130	; 0x82
 80013e0:	bf28      	it	cs
 80013e2:	2282      	movcs	r2, #130	; 0x82
 80013e4:	f8a3 25b0 	strh.w	r2, [r3, #1456]	; 0x5b0
}
 80013e8:	e7bb      	b.n	8001362 <DATA_LOGGER_Reception+0x1a>
 80013ea:	bf00      	nop
 80013ec:	2000192c 	.word	0x2000192c
 80013f0:	20001bb4 	.word	0x20001bb4
 80013f4:	20001bc4 	.word	0x20001bc4

080013f8 <DATA_LOGGER_Get_Data_Value>:
//	uint16_t tmp_u16 = 0;
	int16_t tmp_16 = 0;
	float tmp_float = 0;

	//Premier octet contient l'id
	buffer[0] = id ;
 80013f8:	7008      	strb	r0, [r1, #0]

	//Formatage de la donnée en fonction du type et du format
	switch(data_list[id].format){
 80013fa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80013fe:	4b48      	ldr	r3, [pc, #288]	; (8001520 <DATA_LOGGER_Get_Data_Value+0x128>)
 8001400:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001404:	7a5b      	ldrb	r3, [r3, #9]
 8001406:	3b14      	subs	r3, #20
 8001408:	2b19      	cmp	r3, #25
 800140a:	d816      	bhi.n	800143a <DATA_LOGGER_Get_Data_Value+0x42>
 800140c:	e8df f003 	tbb	[pc, r3]
 8001410:	2115150d 	.word	0x2115150d
 8001414:	15151515 	.word	0x15151515
 8001418:	15151515 	.word	0x15151515
 800141c:	15151515 	.word	0x15151515
 8001420:	15151515 	.word	0x15151515
 8001424:	59442f15 	.word	0x59442f15
 8001428:	7a6e      	.short	0x7a6e
		case DATA_FORMAT_8B:
			buffer[1] = *data_list[id].data ;
 800142a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800142e:	4a3c      	ldr	r2, [pc, #240]	; (8001520 <DATA_LOGGER_Get_Data_Value+0x128>)
 8001430:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	704b      	strb	r3, [r1, #1]
		default:
			break;
	}

	//Return the len of data
	return (data_list[id].format / 20) + 1;
 800143a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800143e:	4b38      	ldr	r3, [pc, #224]	; (8001520 <DATA_LOGGER_Get_Data_Value+0x128>)
 8001440:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001444:	7a40      	ldrb	r0, [r0, #9]
 8001446:	4b37      	ldr	r3, [pc, #220]	; (8001524 <DATA_LOGGER_Get_Data_Value+0x12c>)
 8001448:	fba3 3000 	umull	r3, r0, r3, r0
 800144c:	0900      	lsrs	r0, r0, #4

}
 800144e:	3001      	adds	r0, #1
 8001450:	4770      	bx	lr
			tmp_float = *(float*)data_list[id].data ;
 8001452:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001456:	4a32      	ldr	r2, [pc, #200]	; (8001520 <DATA_LOGGER_Get_Data_Value+0x128>)
 8001458:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	edd3 7a00 	vldr	s15, [r3]
			buffer[1] = (int8_t)tmp_float;
 8001462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001466:	ee17 3a90 	vmov	r3, s15
 800146a:	704b      	strb	r3, [r1, #1]
			break;
 800146c:	e7e5      	b.n	800143a <DATA_LOGGER_Get_Data_Value+0x42>
			tmp_float = *(float*)data_list[id].data;
 800146e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001472:	4a2b      	ldr	r2, [pc, #172]	; (8001520 <DATA_LOGGER_Get_Data_Value+0x128>)
 8001474:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	edd3 7a00 	vldr	s15, [r3]
			tmp_16 = tmp_float * 10;
 800147e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148a:	ee17 3a90 	vmov	r3, s15
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800148e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001492:	704a      	strb	r2, [r1, #1]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001494:	708b      	strb	r3, [r1, #2]
			break;
 8001496:	e7d0      	b.n	800143a <DATA_LOGGER_Get_Data_Value+0x42>
			tmp_float = *(float*)data_list[id].data;
 8001498:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800149c:	4a20      	ldr	r2, [pc, #128]	; (8001520 <DATA_LOGGER_Get_Data_Value+0x128>)
 800149e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	edd3 7a00 	vldr	s15, [r3]
			tmp_16 = tmp_float * 100;
 80014a8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001528 <DATA_LOGGER_Get_Data_Value+0x130>
 80014ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b4:	ee17 3a90 	vmov	r3, s15
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80014b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80014bc:	704a      	strb	r2, [r1, #1]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80014be:	708b      	strb	r3, [r1, #2]
			break;
 80014c0:	e7bb      	b.n	800143a <DATA_LOGGER_Get_Data_Value+0x42>
			tmp_float = *(float*)data_list[id].data;
 80014c2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80014c6:	4a16      	ldr	r2, [pc, #88]	; (8001520 <DATA_LOGGER_Get_Data_Value+0x128>)
 80014c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	edd3 7a00 	vldr	s15, [r3]
			tmp_16 = tmp_float * 1000;
 80014d2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800152c <DATA_LOGGER_Get_Data_Value+0x134>
 80014d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014de:	ee17 3a90 	vmov	r3, s15
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80014e2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80014e6:	704a      	strb	r2, [r1, #1]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80014e8:	708b      	strb	r3, [r1, #2]
			break;
 80014ea:	e7a6      	b.n	800143a <DATA_LOGGER_Get_Data_Value+0x42>
			tmp_16 = *(uint16_t*)data_list[id].data ;
 80014ec:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80014f0:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <DATA_LOGGER_Get_Data_Value+0x128>)
 80014f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	881a      	ldrh	r2, [r3, #0]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80014fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014fe:	704b      	strb	r3, [r1, #1]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001500:	708a      	strb	r2, [r1, #2]
			break;
 8001502:	e79a      	b.n	800143a <DATA_LOGGER_Get_Data_Value+0x42>
			tmp_16 = *(int16_t*)data_list[id].data ;
 8001504:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <DATA_LOGGER_Get_Data_Value+0x128>)
 800150a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f9b3 2000 	ldrsh.w	r2, [r3]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001514:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001518:	704b      	strb	r3, [r1, #1]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800151a:	708a      	strb	r2, [r1, #2]
			break;
 800151c:	e78d      	b.n	800143a <DATA_LOGGER_Get_Data_Value+0x42>
 800151e:	bf00      	nop
 8001520:	2000192c 	.word	0x2000192c
 8001524:	cccccccd 	.word	0xcccccccd
 8001528:	42c80000 	.word	0x42c80000
 800152c:	447a0000 	.word	0x447a0000

08001530 <DATA_LOGGER_Get_Data_Config>:

uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer){
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
	//New data so we start with 255
	buffer[0] = 255;
 8001536:	23ff      	movs	r3, #255	; 0xff
 8001538:	700b      	strb	r3, [r1, #0]
	//Then name len
	buffer[1] = data_list[id].len_name;
 800153a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <DATA_LOGGER_Get_Data_Config+0x50>)
 8001540:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001544:	7c1a      	ldrb	r2, [r3, #16]
 8001546:	704a      	strb	r2, [r1, #1]
	//Then format
	buffer[2] = data_list[id].format ;
 8001548:	7a5a      	ldrb	r2, [r3, #9]
 800154a:	708a      	strb	r2, [r1, #2]
	//Taille du nom
	buffer[3] = id	 ;
 800154c:	70cc      	strb	r4, [r1, #3]
	if(data_list[id].use_format == USED_AS_INPUT)	//Si cette donnée sert d'entré pour le système, on l'indique en rajoute 0b10000000 sur l'id d'origine
 800154e:	7c5b      	ldrb	r3, [r3, #17]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d011      	beq.n	8001578 <DATA_LOGGER_Get_Data_Config+0x48>
		buffer[3] += 128 ;
	//Copie du nom
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001554:	4d0a      	ldr	r5, [pc, #40]	; (8001580 <DATA_LOGGER_Get_Data_Config+0x50>)
 8001556:	00a6      	lsls	r6, r4, #2
 8001558:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800155c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001560:	7c1a      	ldrb	r2, [r3, #16]
 8001562:	68d9      	ldr	r1, [r3, #12]
 8001564:	3004      	adds	r0, #4
 8001566:	f005 fb7b 	bl	8006c60 <memcpy>

	//And that s it
	return 4 + data_list[id].len_name ;
 800156a:	4434      	add	r4, r6
 800156c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8001570:	7c28      	ldrb	r0, [r5, #16]
 8001572:	3004      	adds	r0, #4
}
 8001574:	b2c0      	uxtb	r0, r0
 8001576:	bd70      	pop	{r4, r5, r6, pc}
		buffer[3] += 128 ;
 8001578:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 800157c:	70cb      	strb	r3, [r1, #3]
 800157e:	e7e9      	b.n	8001554 <DATA_LOGGER_Get_Data_Config+0x24>
 8001580:	2000192c 	.word	0x2000192c

08001584 <DATA_LOGGER_Main>:
void DATA_LOGGER_Main(void){
 8001584:	b538      	push	{r3, r4, r5, lr}
	bool_e entrance = previous_state != state ;
 8001586:	4a4d      	ldr	r2, [pc, #308]	; (80016bc <DATA_LOGGER_Main+0x138>)
 8001588:	7811      	ldrb	r1, [r2, #0]
 800158a:	4b4d      	ldr	r3, [pc, #308]	; (80016c0 <DATA_LOGGER_Main+0x13c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
	previous_state = state ;
 800158e:	7013      	strb	r3, [r2, #0]
	switch(state){
 8001590:	2b01      	cmp	r3, #1
 8001592:	d032      	beq.n	80015fa <DATA_LOGGER_Main+0x76>
 8001594:	2b02      	cmp	r3, #2
 8001596:	d063      	beq.n	8001660 <DATA_LOGGER_Main+0xdc>
 8001598:	b103      	cbz	r3, 800159c <DATA_LOGGER_Main+0x18>
}
 800159a:	bd38      	pop	{r3, r4, r5, pc}
			if(entrance){
 800159c:	4299      	cmp	r1, r3
 800159e:	d11a      	bne.n	80015d6 <DATA_LOGGER_Main+0x52>
			tmp_len = DATA_LOGGER_Get_Data_Config(DATA_ID_CONFIG_REQUEST, tmp);
 80015a0:	4c48      	ldr	r4, [pc, #288]	; (80016c4 <DATA_LOGGER_Main+0x140>)
 80015a2:	4621      	mov	r1, r4
 80015a4:	201a      	movs	r0, #26
 80015a6:	f7ff ffc3 	bl	8001530 <DATA_LOGGER_Get_Data_Config>
 80015aa:	4601      	mov	r1, r0
			TELEMETRY_Send_Data(tmp, tmp_len);
 80015ac:	4620      	mov	r0, r4
 80015ae:	f002 f815 	bl	80035dc <TELEMETRY_Send_Data>
			if(send_config_flag){
 80015b2:	4b45      	ldr	r3, [pc, #276]	; (80016c8 <DATA_LOGGER_Main+0x144>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b19b      	cbz	r3, 80015e0 <DATA_LOGGER_Main+0x5c>
				start_flag = FALSE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	4a44      	ldr	r2, [pc, #272]	; (80016cc <DATA_LOGGER_Main+0x148>)
 80015bc:	6013      	str	r3, [r2, #0]
				stop_flag = FALSE;
 80015be:	4a44      	ldr	r2, [pc, #272]	; (80016d0 <DATA_LOGGER_Main+0x14c>)
 80015c0:	6013      	str	r3, [r2, #0]
				send_config_flag = FALSE;
 80015c2:	4a41      	ldr	r2, [pc, #260]	; (80016c8 <DATA_LOGGER_Main+0x144>)
 80015c4:	6013      	str	r3, [r2, #0]
					id_init_counter = 0;
 80015c6:	4a43      	ldr	r2, [pc, #268]	; (80016d4 <DATA_LOGGER_Main+0x150>)
 80015c8:	7013      	strb	r3, [r2, #0]
					is_any_data_used = FALSE;
 80015ca:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <DATA_LOGGER_Main+0x154>)
 80015cc:	6013      	str	r3, [r2, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 80015ce:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <DATA_LOGGER_Main+0x13c>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
 80015d4:	e7e1      	b.n	800159a <DATA_LOGGER_Main+0x16>
				SCHEDULER_reschedule_task(TASK_LOGGER, 500000);
 80015d6:	4941      	ldr	r1, [pc, #260]	; (80016dc <DATA_LOGGER_Main+0x158>)
 80015d8:	200a      	movs	r0, #10
 80015da:	f000 fd23 	bl	8002024 <SCHEDULER_reschedule_task>
 80015de:	e7df      	b.n	80015a0 <DATA_LOGGER_Main+0x1c>
			else if(start_flag)
 80015e0:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <DATA_LOGGER_Main+0x148>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0d8      	beq.n	800159a <DATA_LOGGER_Main+0x16>
				start_flag = FALSE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	4a38      	ldr	r2, [pc, #224]	; (80016cc <DATA_LOGGER_Main+0x148>)
 80015ec:	6013      	str	r3, [r2, #0]
				stop_flag = FALSE;
 80015ee:	4a38      	ldr	r2, [pc, #224]	; (80016d0 <DATA_LOGGER_Main+0x14c>)
 80015f0:	6013      	str	r3, [r2, #0]
				state = LOGGER_LOG;
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <DATA_LOGGER_Main+0x13c>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e7cf      	b.n	800159a <DATA_LOGGER_Main+0x16>
			if(entrance)
 80015fa:	4299      	cmp	r1, r3
 80015fc:	d10e      	bne.n	800161c <DATA_LOGGER_Main+0x98>
			while(data_list[id_init_counter].use_format == NOT_USED && id_init_counter < DATA_ID_COUNT){
 80015fe:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <DATA_LOGGER_Main+0x150>)
 8001600:	7818      	ldrb	r0, [r3, #0]
 8001602:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8001606:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <DATA_LOGGER_Main+0x15c>)
 8001608:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800160c:	7c5b      	ldrb	r3, [r3, #17]
 800160e:	b95b      	cbnz	r3, 8001628 <DATA_LOGGER_Main+0xa4>
 8001610:	281f      	cmp	r0, #31
 8001612:	d809      	bhi.n	8001628 <DATA_LOGGER_Main+0xa4>
				id_init_counter ++ ;
 8001614:	3001      	adds	r0, #1
 8001616:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <DATA_LOGGER_Main+0x150>)
 8001618:	7018      	strb	r0, [r3, #0]
 800161a:	e7f0      	b.n	80015fe <DATA_LOGGER_Main+0x7a>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);
 800161c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001620:	200a      	movs	r0, #10
 8001622:	f000 fcff 	bl	8002024 <SCHEDULER_reschedule_task>
 8001626:	e7ea      	b.n	80015fe <DATA_LOGGER_Main+0x7a>
			if(id_init_counter < DATA_ID_COUNT){
 8001628:	281f      	cmp	r0, #31
 800162a:	d906      	bls.n	800163a <DATA_LOGGER_Main+0xb6>
				if(is_any_data_used)
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <DATA_LOGGER_Main+0x154>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b193      	cbz	r3, 8001658 <DATA_LOGGER_Main+0xd4>
					state = LOGGER_LOG ;
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <DATA_LOGGER_Main+0x13c>)
 8001634:	2202      	movs	r2, #2
 8001636:	701a      	strb	r2, [r3, #0]
 8001638:	e7af      	b.n	800159a <DATA_LOGGER_Main+0x16>
				is_any_data_used = TRUE;
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <DATA_LOGGER_Main+0x154>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8001640:	1882      	adds	r2, r0, r2
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <DATA_LOGGER_Main+0x150>)
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	4c1f      	ldr	r4, [pc, #124]	; (80016c4 <DATA_LOGGER_Main+0x140>)
 8001648:	4621      	mov	r1, r4
 800164a:	f7ff ff71 	bl	8001530 <DATA_LOGGER_Get_Data_Config>
 800164e:	4601      	mov	r1, r0
				TELEMETRY_Send_Data(tmp, tmp_len);
 8001650:	4620      	mov	r0, r4
 8001652:	f001 ffc3 	bl	80035dc <TELEMETRY_Send_Data>
 8001656:	e7a0      	b.n	800159a <DATA_LOGGER_Main+0x16>
					state = LOGGER_IDDLE ;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <DATA_LOGGER_Main+0x13c>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e79c      	b.n	800159a <DATA_LOGGER_Main+0x16>
			if(entrance)
 8001660:	4299      	cmp	r1, r3
 8001662:	d107      	bne.n	8001674 <DATA_LOGGER_Main+0xf0>
			if(stop_flag)
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <DATA_LOGGER_Main+0x14c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b113      	cbz	r3, 8001670 <DATA_LOGGER_Main+0xec>
				state = LOGGER_IDDLE;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <DATA_LOGGER_Main+0x13c>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
void DATA_LOGGER_Main(void){
 8001670:	2400      	movs	r4, #0
 8001672:	e007      	b.n	8001684 <DATA_LOGGER_Main+0x100>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);	//Période d'envoie des données
 8001674:	f242 7110 	movw	r1, #10000	; 0x2710
 8001678:	200a      	movs	r0, #10
 800167a:	f000 fcd3 	bl	8002024 <SCHEDULER_reschedule_task>
 800167e:	e7f1      	b.n	8001664 <DATA_LOGGER_Main+0xe0>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 8001680:	3401      	adds	r4, #1
 8001682:	b2e4      	uxtb	r4, r4
 8001684:	2c1f      	cmp	r4, #31
 8001686:	d888      	bhi.n	800159a <DATA_LOGGER_Main+0x16>
				if(data_list[d].use_format == USED_AS_OUTPUT && (data_list[d].data != NULL))
 8001688:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <DATA_LOGGER_Main+0x15c>)
 800168e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001692:	7c5b      	ldrb	r3, [r3, #17]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d1f3      	bne.n	8001680 <DATA_LOGGER_Main+0xfc>
 8001698:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800169c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0ec      	beq.n	8001680 <DATA_LOGGER_Main+0xfc>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 80016a6:	4d07      	ldr	r5, [pc, #28]	; (80016c4 <DATA_LOGGER_Main+0x140>)
 80016a8:	4629      	mov	r1, r5
 80016aa:	4620      	mov	r0, r4
 80016ac:	f7ff fea4 	bl	80013f8 <DATA_LOGGER_Get_Data_Value>
 80016b0:	4601      	mov	r1, r0
					TELEMETRY_Send_Data(tmp, tmp_len);
 80016b2:	4628      	mov	r0, r5
 80016b4:	f001 ff92 	bl	80035dc <TELEMETRY_Send_Data>
 80016b8:	e7e2      	b.n	8001680 <DATA_LOGGER_Main+0xfc>
 80016ba:	bf00      	nop
 80016bc:	200001a9 	.word	0x200001a9
 80016c0:	20001bbc 	.word	0x20001bbc
 80016c4:	20001bc8 	.word	0x20001bc8
 80016c8:	20001bb4 	.word	0x20001bb4
 80016cc:	20001bb8 	.word	0x20001bb8
 80016d0:	20001bc0 	.word	0x20001bc0
 80016d4:	20001bac 	.word	0x20001bac
 80016d8:	20001bb0 	.word	0x20001bb0
 80016dc:	0007a120 	.word	0x0007a120
 80016e0:	2000192c 	.word	0x2000192c

080016e4 <DATA_LOGGER_Get_Data>:

data_t * DATA_LOGGER_Get_Data(data_id_e id){
	return &data_list[id];
 80016e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 80016e8:	4b01      	ldr	r3, [pc, #4]	; (80016f0 <DATA_LOGGER_Get_Data+0xc>)
 80016ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80016ee:	4770      	bx	lr
 80016f0:	2000192c 	.word	0x2000192c

080016f4 <angle_180>:
static bool_e first_use = TRUE ;


static float angle_180(float x);
static float angle_180(float x){
	if(x > 180)
 80016f4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8001724 <angle_180+0x30>
 80016f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	dd04      	ble.n	800170c <angle_180+0x18>
		x -= 360;
 8001702:	eddf 7a09 	vldr	s15, [pc, #36]	; 8001728 <angle_180+0x34>
 8001706:	ee30 0a67 	vsub.f32	s0, s0, s15
 800170a:	4770      	bx	lr
	else if( x < -180)
 800170c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800172c <angle_180+0x38>
 8001710:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	d503      	bpl.n	8001722 <angle_180+0x2e>
		x += 360 ;
 800171a:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001728 <angle_180+0x34>
 800171e:	ee30 0a27 	vadd.f32	s0, s0, s15
	return x ;
}
 8001722:	4770      	bx	lr
 8001724:	43340000 	.word	0x43340000
 8001728:	43b40000 	.word	0x43b40000
 800172c:	c3340000 	.word	0xc3340000

08001730 <ORIENTATION_Init>:


void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){

	//Link data structures
	orientation->acc = acc ;
 8001730:	f8c0 217c 	str.w	r2, [r0, #380]	; 0x17c
	orientation->gyro = gyro ;
 8001734:	f8c0 1178 	str.w	r1, [r0, #376]	; 0x178
	orientation->angular_velocity = gyro->filtered ;
 8001738:	3108      	adds	r1, #8
 800173a:	60c1      	str	r1, [r0, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 800173c:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
	orientation->periode = (float)1 / (float)frequency ;
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800174c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001750:	ed80 7a61 	vstr	s14, [r0, #388]	; 0x184

	orientation->alpha = ORIENTATION_ALPHA ;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <ORIENTATION_Init+0x48>)
 8001756:	f8c0 3188 	str.w	r3, [r0, #392]	; 0x188

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 800175a:	2300      	movs	r3, #0
 800175c:	e008      	b.n	8001770 <ORIENTATION_Init+0x40>
	{
		orientation->angular_position[x] = 0 ;
 800175e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001762:	2100      	movs	r1, #0
 8001764:	6011      	str	r1, [r2, #0]
		orientation->angular_velocity[x] = 0 ;
 8001766:	68c2      	ldr	r2, [r0, #12]
 8001768:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800176c:	6011      	str	r1, [r2, #0]
	for(int x = 0; x < 3; x++)
 800176e:	3301      	adds	r3, #1
 8001770:	2b02      	cmp	r3, #2
 8001772:	ddf4      	ble.n	800175e <ORIENTATION_Init+0x2e>
	}

}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	3f7f7cee 	.word	0x3f7f7cee

0800177c <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 800177c:	b510      	push	{r4, lr}
 800177e:	4604      	mov	r4, r0
	//Just to make the code shorter
	gyro_t * gyro = orientation->gyro ;
 8001780:	f8d0 2178 	ldr.w	r2, [r0, #376]	; 0x178

	//If it's our first use, we dont use the gyro
	if(first_use)
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <ORIENTATION_Update+0x5c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	b12b      	cbz	r3, 8001796 <ORIENTATION_Update+0x1a>
	{
//		orientation->angular_position[ORIENTATION_ROLL] = orientation->acc_angles[ORIENTATION_ROLL] ;
		orientation->angular_position[ORIENTATION_PITCH] = orientation->acc_angles[ORIENTATION_PITCH] ;
 800178a:	6943      	ldr	r3, [r0, #20]
 800178c:	6043      	str	r3, [r0, #4]
//		orientation->angular_position[ORIENTATION_YAW] = 0 ;
		first_use = FALSE ;
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <ORIENTATION_Update+0x5c>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
		orientation->angular_position[ORIENTATION_PITCH] = angle_180(orientation->angular_position[ORIENTATION_PITCH]);

//		orientation->angular_position[ORIENTATION_ROLL] = orientation->alpha * orientation->angular_position[ORIENTATION_ROLL] + (1.0f - orientation->alpha) * orientation->acc->angles[ORIENTATION_ROLL];
		orientation->angular_position[ORIENTATION_PITCH] = orientation->alpha * orientation->angular_position[ORIENTATION_PITCH] + (1.0f - orientation->alpha) * orientation->acc->angles[ORIENTATION_PITCH];
	}
}
 8001794:	bd10      	pop	{r4, pc}
		float dy = gyro->filtered[ORIENTATION_PITCH] * orientation->periode ;
 8001796:	edd2 7a03 	vldr	s15, [r2, #12]
 800179a:	ed90 0a61 	vldr	s0, [r0, #388]	; 0x184
 800179e:	ee67 7a80 	vmul.f32	s15, s15, s0
		orientation->angular_position[ORIENTATION_PITCH] += dy ;
 80017a2:	ed90 0a01 	vldr	s0, [r0, #4]
		orientation->angular_position[ORIENTATION_PITCH] = angle_180(orientation->angular_position[ORIENTATION_PITCH]);
 80017a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80017aa:	f7ff ffa3 	bl	80016f4 <angle_180>
 80017ae:	ed84 0a01 	vstr	s0, [r4, #4]
		orientation->angular_position[ORIENTATION_PITCH] = orientation->alpha * orientation->angular_position[ORIENTATION_PITCH] + (1.0f - orientation->alpha) * orientation->acc->angles[ORIENTATION_PITCH];
 80017b2:	ed94 7a62 	vldr	s14, [r4, #392]	; 0x188
 80017b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80017ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80017be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80017c6:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80017ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80017d2:	ed84 0a01 	vstr	s0, [r4, #4]
}
 80017d6:	e7dd      	b.n	8001794 <ORIENTATION_Update+0x18>
 80017d8:	200001ac 	.word	0x200001ac

080017dc <HIGH_LVL_Init>:

};

//	-------------------------	Public functions	-------------------------
void HIGH_LVL_Init(system_t * sys_){
	sys = sys_;
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <HIGH_LVL_Init+0xc>)
 80017de:	6018      	str	r0, [r3, #0]
	sys->soft.high_lvl_state = &current_state;
 80017e0:	4b02      	ldr	r3, [pc, #8]	; (80017ec <HIGH_LVL_Init+0x10>)
 80017e2:	f8c0 35b8 	str.w	r3, [r0, #1464]	; 0x5b8
}
 80017e6:	4770      	bx	lr
 80017e8:	20001be8 	.word	0x20001be8
 80017ec:	20001be6 	.word	0x20001be6

080017f0 <HIGH_LVL_Set_Mode>:

//Dont call it from an it plz for now ..
void HIGH_LVL_Set_Mode(high_level_state_names_e new){
	next_state = new ;
 80017f0:	4b01      	ldr	r3, [pc, #4]	; (80017f8 <HIGH_LVL_Set_Mode+0x8>)
 80017f2:	7018      	strb	r0, [r3, #0]
}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20001be7 	.word	0x20001be7

080017fc <HIGH_LVL_Main>:

void HIGH_LVL_Main(uint32_t time_us){
 80017fc:	b510      	push	{r4, lr}
 80017fe:	4604      	mov	r4, r0
	//Check if we have to change the current flight mode
	if(next_state != current_state){
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HIGH_LVL_Main+0x54>)
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HIGH_LVL_Main+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d015      	beq.n	8001838 <HIGH_LVL_Main+0x3c>

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(high_lvl_states[current_state].function_leave != NULL)
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <HIGH_LVL_Main+0x5c>)
 800180e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	b113      	cbz	r3, 800181c <HIGH_LVL_Main+0x20>
			high_lvl_states[current_state].function_leave(sys);
 8001816:	4a11      	ldr	r2, [pc, #68]	; (800185c <HIGH_LVL_Main+0x60>)
 8001818:	6810      	ldr	r0, [r2, #0]
 800181a:	4798      	blx	r3

		//Call the entrance function associated to the next flight mode if it exists
		if(high_lvl_states[next_state].function_entrance != NULL)
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HIGH_LVL_Main+0x54>)
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HIGH_LVL_Main+0x5c>)
 8001822:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	b113      	cbz	r3, 8001830 <HIGH_LVL_Main+0x34>
			high_lvl_states[next_state].function_entrance(sys);
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <HIGH_LVL_Main+0x60>)
 800182c:	6810      	ldr	r0, [r2, #0]
 800182e:	4798      	blx	r3

		//Change the current flight mode
		current_state = next_state ;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HIGH_LVL_Main+0x54>)
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HIGH_LVL_Main+0x58>)
 8001836:	701a      	strb	r2, [r3, #0]
	}
	//Call the function associated to the current flight mode
	if(high_lvl_states[current_state].function_main != NULL)
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HIGH_LVL_Main+0x58>)
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HIGH_LVL_Main+0x5c>)
 800183e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	b11b      	cbz	r3, 800184e <HIGH_LVL_Main+0x52>
		high_lvl_states[current_state].function_main(sys, time_us);
 8001846:	4621      	mov	r1, r4
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HIGH_LVL_Main+0x60>)
 800184a:	6810      	ldr	r0, [r2, #0]
 800184c:	4798      	blx	r3

}
 800184e:	bd10      	pop	{r4, pc}
 8001850:	20001be7 	.word	0x20001be7
 8001854:	20001be6 	.word	0x20001be6
 8001858:	08009bb8 	.word	0x08009bb8
 800185c:	20001be8 	.word	0x20001be8

08001860 <full_manual_entrance>:


#include "High_lvl.h"


void full_manual_entrance(system_t * sys){
 8001860:	b508      	push	{r3, lr}
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_MODE_MANUAL);
 8001862:	2001      	movs	r0, #1
 8001864:	f000 fcca 	bl	80021fc <REGULATION_ORIENTATION_Set_Regulation_Mode>
}
 8001868:	bd08      	pop	{r3, pc}

0800186a <full_manual_main>:

void full_manual_main(system_t * sys, uint32_t time_us){
	//nada
}
 800186a:	4770      	bx	lr

0800186c <idle_entrance>:
 *      Author: Théo
 */

#include "../High_lvl/High_lvl.h"

void idle_entrance(system_t * sys){
 800186c:	b508      	push	{r3, lr}
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_MODE_OFF);
 800186e:	2000      	movs	r0, #0
 8001870:	f000 fcc4 	bl	80021fc <REGULATION_ORIENTATION_Set_Regulation_Mode>
}
 8001874:	bd08      	pop	{r3, pc}

08001876 <idle_main>:

void idle_main(system_t * sys, uint32_t time_us){
	//For now we just do nada
}
 8001876:	4770      	bx	lr

08001878 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart1 ;

void DEBUG_init(void){
 8001878:	b508      	push	{r3, lr}
	RetargetInit(&huart1);
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <DEBUG_init+0x10>)
 800187c:	f000 f808 	bl	8001890 <RetargetInit>
	printf("Debuger is init\n");
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <DEBUG_init+0x14>)
 8001882:	f005 fef5 	bl	8007670 <puts>
}
 8001886:	bd08      	pop	{r3, pc}
 8001888:	20002838 	.word	0x20002838
 800188c:	08009bd8 	.word	0x08009bd8

08001890 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001890:	b508      	push	{r3, lr}
  gHuart = huart;
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <RetargetInit+0x18>)
 8001894:	6018      	str	r0, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <RetargetInit+0x1c>)
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	2300      	movs	r3, #0
 800189c:	2202      	movs	r2, #2
 800189e:	4619      	mov	r1, r3
 80018a0:	6880      	ldr	r0, [r0, #8]
 80018a2:	f005 feed 	bl	8007680 <setvbuf>
}
 80018a6:	bd08      	pop	{r3, pc}
 80018a8:	20001ce8 	.word	0x20001ce8
 80018ac:	2000173c 	.word	0x2000173c

080018b0 <_isatty>:

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80018b0:	2802      	cmp	r0, #2
 80018b2:	d801      	bhi.n	80018b8 <_isatty+0x8>
    return 1;
 80018b4:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 80018b6:	4770      	bx	lr
int _isatty(int fd) {
 80018b8:	b508      	push	{r3, lr}
  errno = EBADF;
 80018ba:	f005 f9a7 	bl	8006c0c <__errno>
 80018be:	2309      	movs	r3, #9
 80018c0:	6003      	str	r3, [r0, #0]
  return 0;
 80018c2:	2000      	movs	r0, #0
}
 80018c4:	bd08      	pop	{r3, pc}
	...

080018c8 <_write>:

int _write(int fd, char* ptr, int len) {
 80018c8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80018ca:	3801      	subs	r0, #1
 80018cc:	2801      	cmp	r0, #1
 80018ce:	d809      	bhi.n	80018e4 <_write+0x1c>
 80018d0:	4614      	mov	r4, r2
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 80018d2:	2364      	movs	r3, #100	; 0x64
 80018d4:	b292      	uxth	r2, r2
 80018d6:	4808      	ldr	r0, [pc, #32]	; (80018f8 <_write+0x30>)
 80018d8:	6800      	ldr	r0, [r0, #0]
 80018da:	f004 fa04 	bl	8005ce6 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
 80018de:	b940      	cbnz	r0, 80018f2 <_write+0x2a>
      return len;
 80018e0:	4620      	mov	r0, r4
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 80018e2:	bd10      	pop	{r4, pc}
  errno = EBADF;
 80018e4:	f005 f992 	bl	8006c0c <__errno>
 80018e8:	2309      	movs	r3, #9
 80018ea:	6003      	str	r3, [r0, #0]
  return -1;
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	e7f7      	b.n	80018e2 <_write+0x1a>
      return EIO;
 80018f2:	2005      	movs	r0, #5
 80018f4:	e7f5      	b.n	80018e2 <_write+0x1a>
 80018f6:	bf00      	nop
 80018f8:	20001ce8 	.word	0x20001ce8

080018fc <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80018fc:	2802      	cmp	r0, #2
 80018fe:	d801      	bhi.n	8001904 <_close+0x8>
    return 0;
 8001900:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 8001902:	4770      	bx	lr
int _close(int fd) {
 8001904:	b508      	push	{r3, lr}
  errno = EBADF;
 8001906:	f005 f981 	bl	8006c0c <__errno>
 800190a:	2309      	movs	r3, #9
 800190c:	6003      	str	r3, [r0, #0]
  return -1;
 800190e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001912:	bd08      	pop	{r3, pc}

08001914 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001914:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001916:	f005 f979 	bl	8006c0c <__errno>
 800191a:	2309      	movs	r3, #9
 800191c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800191e:	f04f 30ff 	mov.w	r0, #4294967295
 8001922:	bd08      	pop	{r3, pc}

08001924 <_read>:

int _read(int fd, char* ptr, int len) {
 8001924:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001926:	b948      	cbnz	r0, 800193c <_read+0x18>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	2201      	movs	r2, #1
 800192e:	4808      	ldr	r0, [pc, #32]	; (8001950 <_read+0x2c>)
 8001930:	6800      	ldr	r0, [r0, #0]
 8001932:	f004 fa44 	bl	8005dbe <HAL_UART_Receive>
    if (hstatus == HAL_OK)
 8001936:	b940      	cbnz	r0, 800194a <_read+0x26>
      return 1;
 8001938:	2001      	movs	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 800193a:	bd08      	pop	{r3, pc}
  errno = EBADF;
 800193c:	f005 f966 	bl	8006c0c <__errno>
 8001940:	2309      	movs	r3, #9
 8001942:	6003      	str	r3, [r0, #0]
  return -1;
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	e7f7      	b.n	800193a <_read+0x16>
      return EIO;
 800194a:	2005      	movs	r0, #5
 800194c:	e7f5      	b.n	800193a <_read+0x16>
 800194e:	bf00      	nop
 8001950:	20001ce8 	.word	0x20001ce8

08001954 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001954:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001956:	2802      	cmp	r0, #2
 8001958:	d804      	bhi.n	8001964 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 800195a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195e:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8001960:	2000      	movs	r0, #0
 8001962:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001964:	f005 f952 	bl	8006c0c <__errno>
 8001968:	2309      	movs	r3, #9
 800196a:	6003      	str	r3, [r0, #0]
  return 0;
 800196c:	e7f8      	b.n	8001960 <_fstat+0xc>
	...

08001970 <orientation_update>:
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
}

static void orientation_update(mask_def_ids_t mask_id){
 8001970:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001972:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 8001974:	4c07      	ldr	r4, [pc, #28]	; (8001994 <orientation_update+0x24>)
 8001976:	2107      	movs	r1, #7
 8001978:	4620      	mov	r0, r4
 800197a:	f000 f922 	bl	8001bc2 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 800197e:	2103      	movs	r1, #3
 8001980:	4620      	mov	r0, r4
 8001982:	f000 f91e 	bl	8001bc2 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001986:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 8001988:	2102      	movs	r1, #2
 800198a:	200c      	movs	r0, #12
 800198c:	f000 fb30 	bl	8001ff0 <SCHEDULER_task_set_mode>
}
 8001990:	bd10      	pop	{r4, pc}
 8001992:	bf00      	nop
 8001994:	20001bec 	.word	0x20001bec

08001998 <acc_data_ready_func>:
static void acc_data_ready_func(mask_def_ids_t mask_id){
 8001998:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800199a:	b672      	cpsid	i
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 800199c:	2106      	movs	r1, #6
 800199e:	4804      	ldr	r0, [pc, #16]	; (80019b0 <acc_data_ready_func+0x18>)
 80019a0:	f000 f90f 	bl	8001bc2 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80019a4:	b662      	cpsie	i
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 80019a6:	2102      	movs	r1, #2
 80019a8:	2008      	movs	r0, #8
 80019aa:	f000 fb21 	bl	8001ff0 <SCHEDULER_task_set_mode>
}
 80019ae:	bd08      	pop	{r3, pc}
 80019b0:	20001bec 	.word	0x20001bec

080019b4 <gyro_data_ready_func>:
static void gyro_data_ready_func(mask_def_ids_t mask_id){
 80019b4:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80019b6:	b672      	cpsid	i
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 80019b8:	2102      	movs	r1, #2
 80019ba:	4804      	ldr	r0, [pc, #16]	; (80019cc <gyro_data_ready_func+0x18>)
 80019bc:	f000 f901 	bl	8001bc2 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80019c0:	b662      	cpsie	i
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 80019c2:	2102      	movs	r1, #2
 80019c4:	2006      	movs	r0, #6
 80019c6:	f000 fb13 	bl	8001ff0 <SCHEDULER_task_set_mode>
}
 80019ca:	bd08      	pop	{r3, pc}
 80019cc:	20001bec 	.word	0x20001bec

080019d0 <EVENT_init>:




void EVENT_init(system_t * sys_){
 80019d0:	b508      	push	{r3, lr}
	initialized = TRUE ;
	sys =sys_;

	//Configuration des mask associés aux events
	mask_def_events_init(events_main);
 80019d2:	4802      	ldr	r0, [pc, #8]	; (80019dc <EVENT_init+0xc>)
 80019d4:	f000 f952 	bl	8001c7c <mask_def_events_init>
}
 80019d8:	bd08      	pop	{r3, pc}
 80019da:	bf00      	nop
 80019dc:	200001b0 	.word	0x200001b0

080019e0 <EVENT_process>:

//Déclenchement des events en main
void EVENT_process(bool_e test_all){
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(new_flag)
 80019e2:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <EVENT_process+0xc0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d059      	beq.n	8001a9e <EVENT_process+0xbe>
	{
		new_flag = FALSE;
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <EVENT_process+0xc0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

		//Nombre d'event à tester
		uint8_t max = EVENT_LOW_LVL_COUNT ;
		if(test_all)
 80019f0:	b910      	cbnz	r0, 80019f8 <EVENT_process+0x18>
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 80019f2:	2707      	movs	r7, #7
			max = EVENT_COUNT ;



		//Pout chaque event
		for(uint32_t e = 0; e < max; e ++)
 80019f4:	2500      	movs	r5, #0
 80019f6:	e04d      	b.n	8001a94 <EVENT_process+0xb4>
			max = EVENT_COUNT ;
 80019f8:	270d      	movs	r7, #13
 80019fa:	e7fb      	b.n	80019f4 <EVENT_process+0x14>
							events_main[e].function(m);
							function_did_run_once = TRUE ;
						}
					}
				}
				m++ ;
 80019fc:	3401      	adds	r4, #1
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 80019fe:	4a29      	ldr	r2, [pc, #164]	; (8001aa4 <EVENT_process+0xc4>)
 8001a00:	23b4      	movs	r3, #180	; 0xb4
 8001a02:	fb03 2305 	mla	r3, r3, r5, r2
 8001a06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001a0a:	42a3      	cmp	r3, r4
 8001a0c:	d941      	bls.n	8001a92 <EVENT_process+0xb2>
 8001a0e:	2e00      	cmp	r6, #0
 8001a10:	d13f      	bne.n	8001a92 <EVENT_process+0xb2>
 8001a12:	23b4      	movs	r3, #180	; 0xb4
 8001a14:	fb03 2305 	mla	r3, r3, r5, r2
 8001a18:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d138      	bne.n	8001a92 <EVENT_process+0xb2>
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8001a20:	4a21      	ldr	r2, [pc, #132]	; (8001aa8 <EVENT_process+0xc8>)
 8001a22:	23b4      	movs	r3, #180	; 0xb4
 8001a24:	fb03 f305 	mul.w	r3, r3, r5
 8001a28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001a2c:	491d      	ldr	r1, [pc, #116]	; (8001aa4 <EVENT_process+0xc4>)
 8001a2e:	4419      	add	r1, r3
 8001a30:	ca0c      	ldmia	r2, {r2, r3}
 8001a32:	c903      	ldmia	r1, {r0, r1}
 8001a34:	f000 f87a 	bl	8001b2c <Mask_test_and>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d0df      	beq.n	80019fc <EVENT_process+0x1c>
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 8001a3c:	481a      	ldr	r0, [pc, #104]	; (8001aa8 <EVENT_process+0xc8>)
 8001a3e:	1de3      	adds	r3, r4, #7
 8001a40:	22b4      	movs	r2, #180	; 0xb4
 8001a42:	fb02 f205 	mul.w	r2, r2, r5
 8001a46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001a4a:	4916      	ldr	r1, [pc, #88]	; (8001aa4 <EVENT_process+0xc4>)
 8001a4c:	4419      	add	r1, r3
 8001a4e:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001a52:	c903      	ldmia	r1, {r0, r1}
 8001a54:	f000 f886 	bl	8001b64 <Mask_test_or>
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	d0cf      	beq.n	80019fc <EVENT_process+0x1c>
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	//Mask not test
 8001a5c:	4812      	ldr	r0, [pc, #72]	; (8001aa8 <EVENT_process+0xc8>)
 8001a5e:	f104 030e 	add.w	r3, r4, #14
 8001a62:	22b4      	movs	r2, #180	; 0xb4
 8001a64:	fb02 f205 	mul.w	r2, r2, r5
 8001a68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001a6c:	490d      	ldr	r1, [pc, #52]	; (8001aa4 <EVENT_process+0xc4>)
 8001a6e:	4419      	add	r1, r3
 8001a70:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001a74:	c903      	ldmia	r1, {r0, r1}
 8001a76:	f000 f875 	bl	8001b64 <Mask_test_or>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1be      	bne.n	80019fc <EVENT_process+0x1c>
							events_main[e].function(m);
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <EVENT_process+0xc4>)
 8001a80:	23b4      	movs	r3, #180	; 0xb4
 8001a82:	fb03 2305 	mla	r3, r3, r5, r2
 8001a86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001a8a:	b2e0      	uxtb	r0, r4
 8001a8c:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8001a8e:	2601      	movs	r6, #1
 8001a90:	e7b4      	b.n	80019fc <EVENT_process+0x1c>
		for(uint32_t e = 0; e < max; e ++)
 8001a92:	3501      	adds	r5, #1
 8001a94:	42af      	cmp	r7, r5
 8001a96:	d902      	bls.n	8001a9e <EVENT_process+0xbe>
			bool_e function_did_run_once = FALSE ;
 8001a98:	2600      	movs	r6, #0
			uint32_t m = 0 ;
 8001a9a:	4634      	mov	r4, r6
 8001a9c:	e7af      	b.n	80019fe <EVENT_process+0x1e>
			}

		}
	}
}
 8001a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa0:	20001bf4 	.word	0x20001bf4
 8001aa4:	200001b0 	.word	0x200001b0
 8001aa8:	20001bec 	.word	0x20001bec

08001aac <EVENT_Set_flag>:
	return Mask_test_and(MASK_create_single(flag), flags);
}


//Set a flag
void EVENT_Set_flag(Flags_e flag){
 8001aac:	b508      	push	{r3, lr}
 8001aae:	4601      	mov	r1, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <EVENT_Set_flag+0x18>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <EVENT_Set_flag+0x1c>)
 8001aba:	f000 f86e 	bl	8001b9a <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001abe:	b662      	cpsie	i
	__enable_irq();
}
 8001ac0:	bd08      	pop	{r3, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20001bf4 	.word	0x20001bf4
 8001ac8:	20001bec 	.word	0x20001bec

08001acc <acc_init_ok_func>:
static void acc_init_ok_func(mask_def_ids_t mask_id){
 8001acc:	b508      	push	{r3, lr}
	EVENT_Set_flag(FLAG_ACC_READING);
 8001ace:	2005      	movs	r0, #5
 8001ad0:	f7ff ffec 	bl	8001aac <EVENT_Set_flag>
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2007      	movs	r0, #7
 8001ad8:	f000 fa8a 	bl	8001ff0 <SCHEDULER_task_set_mode>
	events_main[EVENT_ACC_INIT_OK].state = EVENT_DISABLED ;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <acc_init_ok_func+0x1c>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
}
 8001ae4:	bd08      	pop	{r3, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200001b0 	.word	0x200001b0

08001aec <gyro_init_ok_func>:
static void gyro_init_ok_func(mask_def_ids_t mask_id){
 8001aec:	b508      	push	{r3, lr}
	EVENT_Set_flag(FLAG_GYRO_READING);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff ffdc 	bl	8001aac <EVENT_Set_flag>
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 8001af4:	2101      	movs	r1, #1
 8001af6:	2005      	movs	r0, #5
 8001af8:	f000 fa7a 	bl	8001ff0 <SCHEDULER_task_set_mode>
	events_main[EVENT_GYRO_INIT_OK].state = EVENT_DISABLED ;
 8001afc:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <gyro_init_ok_func+0x1c>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8001b04:	bd08      	pop	{r3, pc}
 8001b06:	bf00      	nop
 8001b08:	200001b0 	.word	0x200001b0

08001b0c <EVENT_Clean_flag>:
//CleaR a flag (i know it should be called cleaR instead of cleaN but i didnt took the time to change it YET)
//Todo : cleaRRRRRRR a flag
void EVENT_Clean_flag(Flags_e flag){
 8001b0c:	b508      	push	{r3, lr}
 8001b0e:	4601      	mov	r1, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b10:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <EVENT_Clean_flag+0x18>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <EVENT_Clean_flag+0x1c>)
 8001b1a:	f000 f852 	bl	8001bc2 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b1e:	b662      	cpsie	i
	__enable_irq();
}
 8001b20:	bd08      	pop	{r3, pc}
 8001b22:	bf00      	nop
 8001b24:	20001bf4 	.word	0x20001bf4
 8001b28:	20001bec 	.word	0x20001bec

08001b2c <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	f10d 0c10 	add.w	ip, sp, #16
 8001b32:	e90c 0003 	stmdb	ip, {r0, r1}
 8001b36:	4669      	mov	r1, sp
 8001b38:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	dc0b      	bgt.n	8001b5a <Mask_test_and+0x2e>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 8001b42:	aa04      	add	r2, sp, #16
 8001b44:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001b48:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8001b4c:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8001b50:	ea31 0202 	bics.w	r2, r1, r2
 8001b54:	d104      	bne.n	8001b60 <Mask_test_and+0x34>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001b56:	3301      	adds	r3, #1
 8001b58:	e7f1      	b.n	8001b3e <Mask_test_and+0x12>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
		}
	return TRUE ;
 8001b5a:	2001      	movs	r0, #1
}
 8001b5c:	b004      	add	sp, #16
 8001b5e:	4770      	bx	lr
			return FALSE ;
 8001b60:	2000      	movs	r0, #0
 8001b62:	e7fb      	b.n	8001b5c <Mask_test_and+0x30>

08001b64 <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8001b64:	b084      	sub	sp, #16
 8001b66:	f10d 0c10 	add.w	ip, sp, #16
 8001b6a:	e90c 0003 	stmdb	ip, {r0, r1}
 8001b6e:	4669      	mov	r1, sp
 8001b70:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	dc0a      	bgt.n	8001b90 <Mask_test_or+0x2c>
		if(mask_test.array[m] & mask_ref.array[m])
 8001b7a:	aa04      	add	r2, sp, #16
 8001b7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001b80:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8001b84:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8001b88:	4211      	tst	r1, r2
 8001b8a:	d104      	bne.n	8001b96 <Mask_test_or+0x32>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	e7f2      	b.n	8001b76 <Mask_test_or+0x12>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
	return FALSE ;
 8001b90:	2000      	movs	r0, #0
}
 8001b92:	b004      	add	sp, #16
 8001b94:	4770      	bx	lr
			return TRUE ;
 8001b96:	2001      	movs	r0, #1
 8001b98:	e7fb      	b.n	8001b92 <Mask_test_or+0x2e>

08001b9a <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
	uint32_t array_nb = flag / 32 ;
 8001b9a:	094a      	lsrs	r2, r1, #5
	uint32_t flag_pos = flag % 32 ;
 8001b9c:	f001 011f 	and.w	r1, r1, #31
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	fa03 f101 	lsl.w	r1, r3, r1
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8001ba6:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8001baa:	ea31 0303 	bics.w	r3, r1, r3
 8001bae:	d006      	beq.n	8001bbe <MASK_set_flag+0x24>
		return FALSE ;
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 8001bb0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8001bb4:	4319      	orrs	r1, r3
 8001bb6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	return TRUE ;
 8001bba:	2001      	movs	r0, #1
 8001bbc:	4770      	bx	lr
		return FALSE ;
 8001bbe:	2000      	movs	r0, #0
}
 8001bc0:	4770      	bx	lr

08001bc2 <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
	uint32_t array_nb = flag / 32 ;
 8001bc2:	094a      	lsrs	r2, r1, #5
	uint32_t flag_pos = flag % 32 ;
 8001bc4:	f001 011f 	and.w	r1, r1, #31
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	fa03 f101 	lsl.w	r1, r3, r1
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8001bce:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8001bd2:	ea31 0303 	bics.w	r3, r1, r3
 8001bd6:	d001      	beq.n	8001bdc <MASK_clean_flag+0x1a>
		mask->array[array_nb] -= flag_mask ;
		return TRUE ;
	}
	return FALSE ;
 8001bd8:	2000      	movs	r0, #0
}
 8001bda:	4770      	bx	lr
		mask->array[array_nb] -= flag_mask ;
 8001bdc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8001be0:	1a59      	subs	r1, r3, r1
 8001be2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		return TRUE ;
 8001be6:	2001      	movs	r0, #1
 8001be8:	4770      	bx	lr

08001bea <mask_def_gyro_init_ok>:
	mask_def_orientation_update(&event[EVENT_ORIENTATION_UPDATE]);

}

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 8001bea:	b510      	push	{r4, lr}
 8001bec:	4604      	mov	r4, r0
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8001bee:	2100      	movs	r1, #0
 8001bf0:	f7ff ffd3 	bl	8001b9a <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8001bfa:	f7ff ffce 	bl	8001b9a <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8001bfe:	2101      	movs	r1, #1
 8001c00:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8001c04:	f7ff ffc9 	bl	8001b9a <MASK_set_flag>
}
 8001c08:	bd10      	pop	{r4, pc}

08001c0a <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 8001c0a:	b510      	push	{r4, lr}
 8001c0c:	4604      	mov	r4, r0
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	f7ff ffc3 	bl	8001b9a <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 8001c14:	2102      	movs	r1, #2
 8001c16:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8001c1a:	f7ff ffbe 	bl	8001b9a <MASK_set_flag>
}
 8001c1e:	bd10      	pop	{r4, pc}

08001c20 <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 8001c20:	b510      	push	{r4, lr}
 8001c22:	4604      	mov	r4, r0
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8001c24:	2104      	movs	r1, #4
 8001c26:	f7ff ffb8 	bl	8001b9a <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8001c30:	f7ff ffb3 	bl	8001b9a <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 8001c34:	2105      	movs	r1, #5
 8001c36:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8001c3a:	f7ff ffae 	bl	8001b9a <MASK_set_flag>
}
 8001c3e:	bd10      	pop	{r4, pc}

08001c40 <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 8001c40:	b510      	push	{r4, lr}
 8001c42:	4604      	mov	r4, r0
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8001c44:	2104      	movs	r1, #4
 8001c46:	f7ff ffa8 	bl	8001b9a <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8001c4a:	2106      	movs	r1, #6
 8001c4c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8001c50:	f7ff ffa3 	bl	8001b9a <MASK_set_flag>
}
 8001c54:	bd10      	pop	{r4, pc}

08001c56 <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 8001c56:	b510      	push	{r4, lr}
 8001c58:	4604      	mov	r4, r0
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8001c5a:	2104      	movs	r1, #4
 8001c5c:	f7ff ff9d 	bl	8001b9a <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8001c60:	2100      	movs	r1, #0
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff ff99 	bl	8001b9a <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8001c68:	2103      	movs	r1, #3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff ff95 	bl	8001b9a <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8001c70:	2107      	movs	r1, #7
 8001c72:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8001c76:	f7ff ff90 	bl	8001b9a <MASK_set_flag>
}
 8001c7a:	bd10      	pop	{r4, pc}

08001c7c <mask_def_events_init>:
void mask_def_events_init(Event_t * event){
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	4604      	mov	r4, r0
	mask_def_gyro_init_ok(&event[EVENT_GYRO_INIT_OK]);
 8001c80:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8001c84:	f7ff ffb1 	bl	8001bea <mask_def_gyro_init_ok>
	mask_def_gyro_data_ready(&event[EVENT_GYRO_DATA_READY]);
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f7ff ffbe 	bl	8001c0a <mask_def_gyro_data_ready>
	mask_def_acc_init_ok(&event[EVENT_ACC_INIT_OK]);
 8001c8e:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8001c92:	f7ff ffc5 	bl	8001c20 <mask_def_acc_init_ok>
	mask_def_acc_data_ready(&event[EVENT_ACC_DATA_READY]);
 8001c96:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8001c9a:	f7ff ffd1 	bl	8001c40 <mask_def_acc_data_ready>
	mask_def_orientation_update(&event[EVENT_ORIENTATION_UPDATE]);
 8001c9e:	f504 70b4 	add.w	r0, r4, #360	; 0x168
 8001ca2:	f7ff ffd8 	bl	8001c56 <mask_def_orientation_update>
}
 8001ca6:	bd10      	pop	{r4, pc}

08001ca8 <get_first_task>:

	return load_pourcentage / 512.0f ;
}

static task_t * get_first_task(void){
	task_queu_position = 0 ;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	; (8001cb4 <get_first_task+0xc>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
}
 8001cae:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <get_first_task+0x10>)
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	4770      	bx	lr
 8001cb4:	20001c40 	.word	0x20001c40
 8001cb8:	20001c08 	.word	0x20001c08

08001cbc <get_next_task>:

static task_t * get_next_task(void){
	return task_queu[++task_queu_position];
 8001cbc:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <get_next_task+0x10>)
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	4a02      	ldr	r2, [pc, #8]	; (8001cd0 <get_next_task+0x14>)
 8001cc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cca:	4770      	bx	lr
 8001ccc:	20001c40 	.word	0x20001c40
 8001cd0:	20001c08 	.word	0x20001c08

08001cd4 <queu_contains>:
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
	if(task == NULL)
 8001cd4:	4601      	mov	r1, r0
 8001cd6:	b168      	cbz	r0, 8001cf4 <queu_contains+0x20>
		return FALSE ;

	for(uint32_t t = 0; t < task_queu_size; t++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <queu_contains+0x28>)
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d906      	bls.n	8001cf0 <queu_contains+0x1c>
		if(task_queu[t] == task)
 8001ce2:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <queu_contains+0x2c>)
 8001ce4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce8:	428a      	cmp	r2, r1
 8001cea:	d005      	beq.n	8001cf8 <queu_contains+0x24>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8001cec:	3301      	adds	r3, #1
 8001cee:	e7f4      	b.n	8001cda <queu_contains+0x6>
			return TRUE ;
	return FALSE ;
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	4770      	bx	lr
		return FALSE ;
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	4770      	bx	lr
			return TRUE ;
 8001cf8:	2001      	movs	r0, #1
}
 8001cfa:	4770      	bx	lr
 8001cfc:	20001c44 	.word	0x20001c44
 8001d00:	20001c08 	.word	0x20001c08

08001d04 <task_process>:
static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8001d04:	b570      	push	{r4, r5, r6, lr}
 8001d06:	4604      	mov	r4, r0
 8001d08:	4608      	mov	r0, r1
	if(task->process == NULL)
 8001d0a:	6861      	ldr	r1, [r4, #4]
 8001d0c:	2900      	cmp	r1, #0
 8001d0e:	d042      	beq.n	8001d96 <task_process+0x92>
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 8001d10:	f8d4 50d0 	ldr.w	r5, [r4, #208]	; 0xd0
 8001d14:	f105 060a 	add.w	r6, r5, #10
 8001d18:	f854 2026 	ldr.w	r2, [r4, r6, lsl #2]
 8001d1c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001d1e:	1a9b      	subs	r3, r3, r2
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001d20:	6a22      	ldr	r2, [r4, #32]
 8001d22:	1a82      	subs	r2, r0, r2
 8001d24:	f844 2026 	str.w	r2, [r4, r6, lsl #2]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001d28:	4413      	add	r3, r2
 8001d2a:	67a3      	str	r3, [r4, #120]	; 0x78
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001d2c:	4a2f      	ldr	r2, [pc, #188]	; (8001dec <task_process+0xe8>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	61e3      	str	r3, [r4, #28]
	if(task->mode == TASK_MODE_TIME){
 8001d36:	7a23      	ldrb	r3, [r4, #8]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d02d      	beq.n	8001d98 <task_process+0x94>
	task->last_execution_us = current_time_us ;
 8001d3c:	6220      	str	r0, [r4, #32]
	task->process(current_time_us);
 8001d3e:	4788      	blx	r1
	current_time_us = TIME_us();
 8001d40:	f000 fa1c 	bl	800217c <TIME_us>
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001d44:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 8001d48:	f102 011e 	add.w	r1, r2, #30
 8001d4c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001d50:	684d      	ldr	r5, [r1, #4]
 8001d52:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8001d56:	1b5b      	subs	r3, r3, r5
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001d58:	6a25      	ldr	r5, [r4, #32]
 8001d5a:	1b45      	subs	r5, r0, r5
 8001d5c:	604d      	str	r5, [r1, #4]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001d5e:	6966      	ldr	r6, [r4, #20]
 8001d60:	42ae      	cmp	r6, r5
 8001d62:	bf38      	it	cc
 8001d64:	462e      	movcc	r6, r5
 8001d66:	6166      	str	r6, [r4, #20]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8001d68:	442b      	add	r3, r5
 8001d6a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001d6e:	4d1f      	ldr	r5, [pc, #124]	; (8001dec <task_process+0xe8>)
 8001d70:	fba5 5303 	umull	r5, r3, r5, r3
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	6123      	str	r3, [r4, #16]
	if(task->duration_us_average_array[task->average_index] > 1000)
 8001d78:	684b      	ldr	r3, [r1, #4]
 8001d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d7e:	d905      	bls.n	8001d8c <task_process+0x88>
		task->duration_us_average_array[task->average_index] ++ ;
 8001d80:	f102 011e 	add.w	r1, r2, #30
 8001d84:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001d88:	3301      	adds	r3, #1
 8001d8a:	604b      	str	r3, [r1, #4]
	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8001d8c:	3201      	adds	r2, #1
 8001d8e:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
 8001d92:	2a14      	cmp	r2, #20
 8001d94:	d025      	beq.n	8001de2 <task_process+0xde>
}
 8001d96:	bd70      	pop	{r4, r5, r6, pc}
		if(task->real_period_us_average_array[task->average_index] > task->desired_period_us)
 8001d98:	f854 2026 	ldr.w	r2, [r4, r6, lsl #2]
 8001d9c:	69a3      	ldr	r3, [r4, #24]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d90f      	bls.n	8001dc2 <task_process+0xbe>
			task->lag_average += (float)(task->real_period_us_average_array[task->average_index] - task->desired_period_us) * 0.5f ;
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db4:	ed94 7a03 	vldr	s14, [r4, #12]
 8001db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dbc:	edc4 7a03 	vstr	s15, [r4, #12]
 8001dc0:	e7bc      	b.n	8001d3c <task_process+0x38>
			task->lag_average -= (float)(task->desired_period_us - task->real_period_us_average_array[task->average_index]) * 0.5f ;
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd4:	ed94 7a03 	vldr	s14, [r4, #12]
 8001dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ddc:	edc4 7a03 	vstr	s15, [r4, #12]
 8001de0:	e7ac      	b.n	8001d3c <task_process+0x38>
		task->average_index = 0 ;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 8001de8:	e7d5      	b.n	8001d96 <task_process+0x92>
 8001dea:	bf00      	nop
 8001dec:	cccccccd 	.word	0xcccccccd

08001df0 <queu_add>:

static bool_e queu_add(task_t * task){
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	4605      	mov	r5, r0

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 8001df4:	f7ff ff6e 	bl	8001cd4 <queu_contains>
 8001df8:	bb50      	cbnz	r0, 8001e50 <queu_add+0x60>
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <queu_add+0x64>)
 8001dfc:	681e      	ldr	r6, [r3, #0]
 8001dfe:	2e0d      	cmp	r6, #13
 8001e00:	d827      	bhi.n	8001e52 <queu_add+0x62>
 8001e02:	b335      	cbz	r5, 8001e52 <queu_add+0x62>
		return FALSE ;


	uint32_t t = 0 ;
 8001e04:	2400      	movs	r4, #0
	while(t < TASK_COUNT)
 8001e06:	2c0d      	cmp	r4, #13
 8001e08:	d823      	bhi.n	8001e52 <queu_add+0x62>
	{
		if(task_queu[t] == NULL)
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <queu_add+0x68>)
 8001e0c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001e10:	b12b      	cbz	r3, 8001e1e <queu_add+0x2e>
		{
			task_queu[t] = task ;
			task_queu_size ++ ;
			return TRUE;
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 8001e12:	782a      	ldrb	r2, [r5, #0]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d809      	bhi.n	8001e2e <queu_add+0x3e>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
			task_queu[t] = task ;
			task_queu_size ++ ;
			return TRUE ;
		}
		t++;
 8001e1a:	3401      	adds	r4, #1
 8001e1c:	e7f3      	b.n	8001e06 <queu_add+0x16>
			task_queu[t] = task ;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <queu_add+0x68>)
 8001e20:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
			task_queu_size ++ ;
 8001e24:	3601      	adds	r6, #1
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <queu_add+0x64>)
 8001e28:	601e      	str	r6, [r3, #0]
			return TRUE;
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	e011      	b.n	8001e52 <queu_add+0x62>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 8001e2e:	1c60      	adds	r0, r4, #1
 8001e30:	4f09      	ldr	r7, [pc, #36]	; (8001e58 <queu_add+0x68>)
 8001e32:	1b32      	subs	r2, r6, r4
 8001e34:	0092      	lsls	r2, r2, #2
 8001e36:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 8001e3a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8001e3e:	f004 ff1d 	bl	8006c7c <memmove>
			task_queu[t] = task ;
 8001e42:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
			task_queu_size ++ ;
 8001e46:	3601      	adds	r6, #1
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <queu_add+0x64>)
 8001e4a:	601e      	str	r6, [r3, #0]
			return TRUE ;
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	e000      	b.n	8001e52 <queu_add+0x62>
		return FALSE ;
 8001e50:	2000      	movs	r0, #0
	}
	return FALSE ;
}
 8001e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e54:	20001c44 	.word	0x20001c44
 8001e58:	20001c08 	.word	0x20001c08

08001e5c <queu_remove>:

static bool_e queu_remove(task_t * task){
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4605      	mov	r5, r0
	if(!queu_contains(task) || task == NULL)
 8001e60:	f7ff ff38 	bl	8001cd4 <queu_contains>
 8001e64:	b1e0      	cbz	r0, 8001ea0 <queu_remove+0x44>
 8001e66:	b1e5      	cbz	r5, 8001ea2 <queu_remove+0x46>
		return FALSE ;

	for(uint32_t t = 0; t < task_queu_size; t ++){
 8001e68:	2300      	movs	r3, #0
 8001e6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <queu_remove+0x4c>)
 8001e6c:	6814      	ldr	r4, [r2, #0]
 8001e6e:	429c      	cmp	r4, r3
 8001e70:	d915      	bls.n	8001e9e <queu_remove+0x42>
		if(task == task_queu[t]){
 8001e72:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <queu_remove+0x50>)
 8001e74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e78:	42aa      	cmp	r2, r5
 8001e7a:	d001      	beq.n	8001e80 <queu_remove+0x24>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	e7f4      	b.n	8001e6a <queu_remove+0xe>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8001e80:	480a      	ldr	r0, [pc, #40]	; (8001eac <queu_remove+0x50>)
 8001e82:	1c59      	adds	r1, r3, #1
 8001e84:	1ae2      	subs	r2, r4, r3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001e8c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001e90:	f004 fef4 	bl	8006c7c <memmove>
			task_queu_size -- ;
 8001e94:	3c01      	subs	r4, #1
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <queu_remove+0x4c>)
 8001e98:	601c      	str	r4, [r3, #0]
			return TRUE ;
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	e000      	b.n	8001ea0 <queu_remove+0x44>
		}
	}
	return FALSE ;
 8001e9e:	2000      	movs	r0, #0
}
 8001ea0:	bd38      	pop	{r3, r4, r5, pc}
		return FALSE ;
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	e7fc      	b.n	8001ea0 <queu_remove+0x44>
 8001ea6:	bf00      	nop
 8001ea8:	20001c44 	.word	0x20001c44
 8001eac:	20001c08 	.word	0x20001c08

08001eb0 <SCHEDULER_init>:
void SCHEDULER_init(system_t * sys_){
 8001eb0:	b510      	push	{r4, lr}
 8001eb2:	4604      	mov	r4, r0
	DEBUG_init();
 8001eb4:	f7ff fce0 	bl	8001878 <DEBUG_init>
	tasks_init(sys_);
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f000 f91d 	bl	80020f8 <tasks_init>
}
 8001ebe:	bd10      	pop	{r4, pc}

08001ec0 <SCHEDULER_run>:
void SCHEDULER_run(void){
 8001ec0:	b538      	push	{r3, r4, r5, lr}
	uint32_t current_time_us = TIME_us();
 8001ec2:	f000 f95b 	bl	800217c <TIME_us>
 8001ec6:	4605      	mov	r5, r0
	task_t * task = get_first_task();
 8001ec8:	f7ff feee 	bl	8001ca8 <get_first_task>
 8001ecc:	4604      	mov	r4, r0
	while(task_queu_position < task_queu_size && task != NULL){
 8001ece:	e011      	b.n	8001ef4 <SCHEDULER_run+0x34>
				current_time_us = task_process(task, current_time_us);
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f7ff ff16 	bl	8001d04 <task_process>
 8001ed8:	4605      	mov	r5, r0
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 f946 	bl	800216c <TASK_get_task>
 8001ee0:	4284      	cmp	r4, r0
 8001ee2:	d004      	beq.n	8001eee <SCHEDULER_run+0x2e>
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	f000 f941 	bl	800216c <TASK_get_task>
 8001eea:	4284      	cmp	r4, r0
 8001eec:	d12b      	bne.n	8001f46 <SCHEDULER_run+0x86>
		task = get_next_task();
 8001eee:	f7ff fee5 	bl	8001cbc <get_next_task>
 8001ef2:	4604      	mov	r4, r0
	while(task_queu_position < task_queu_size && task != NULL){
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <SCHEDULER_run+0x88>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <SCHEDULER_run+0x8c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d222      	bcs.n	8001f46 <SCHEDULER_run+0x86>
 8001f00:	b30c      	cbz	r4, 8001f46 <SCHEDULER_run+0x86>
		switch(task->mode){
 8001f02:	7a23      	ldrb	r3, [r4, #8]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d016      	beq.n	8001f36 <SCHEDULER_run+0x76>
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d0e1      	beq.n	8001ed0 <SCHEDULER_run+0x10>
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d1ee      	bne.n	8001eee <SCHEDULER_run+0x2e>
				if(current_time_us >= task->desired_next_start_us){
 8001f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f12:	42ab      	cmp	r3, r5
 8001f14:	d8eb      	bhi.n	8001eee <SCHEDULER_run+0x2e>
					current_time_us = task_process(task, current_time_us);
 8001f16:	4629      	mov	r1, r5
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff fef3 	bl	8001d04 <task_process>
 8001f1e:	4605      	mov	r5, r0
					task->desired_next_start_us = task->desired_period_us - (int32_t)task->lag_average + current_time_us ;
 8001f20:	69a3      	ldr	r3, [r4, #24]
 8001f22:	edd4 7a03 	vldr	s15, [r4, #12]
 8001f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2a:	ee17 2a90 	vmov	r2, s15
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	4403      	add	r3, r0
 8001f32:	6263      	str	r3, [r4, #36]	; 0x24
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8001f34:	e7d1      	b.n	8001eda <SCHEDULER_run+0x1a>
				current_time_us = task_process(task, current_time_us);
 8001f36:	4629      	mov	r1, r5
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7ff fee3 	bl	8001d04 <task_process>
 8001f3e:	4605      	mov	r5, r0
				task->mode = TASK_MODE_WAIT ;
 8001f40:	2300      	movs	r3, #0
 8001f42:	7223      	strb	r3, [r4, #8]
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8001f44:	e7c9      	b.n	8001eda <SCHEDULER_run+0x1a>
}
 8001f46:	bd38      	pop	{r3, r4, r5, pc}
 8001f48:	20001c40 	.word	0x20001c40
 8001f4c:	20001c44 	.word	0x20001c44

08001f50 <SCHEDULER_task>:
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <SCHEDULER_task+0x28>)
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d909      	bls.n	8001f70 <SCHEDULER_task+0x20>
		task_to_change[t]->mode = change_mode[t] ;
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <SCHEDULER_task+0x2c>)
 8001f5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f62:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <SCHEDULER_task+0x30>)
 8001f64:	5cd2      	ldrb	r2, [r2, r3]
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	720a      	strb	r2, [r1, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	e7f0      	b.n	8001f52 <SCHEDULER_task+0x2>
	task_to_moove_counter = 0 ;
 8001f70:	4b01      	ldr	r3, [pc, #4]	; (8001f78 <SCHEDULER_task+0x28>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
}
 8001f76:	4770      	bx	lr
 8001f78:	20001c80 	.word	0x20001c80
 8001f7c:	20001c48 	.word	0x20001c48
 8001f80:	20001bf8 	.word	0x20001bf8

08001f84 <SCHEDULER_get_cpu_load>:
	for(uint32_t t = 2; t < task_queu_size; t++)
 8001f84:	2302      	movs	r3, #2
	float load_pourcentage = 0 ;
 8001f86:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001fc8 <SCHEDULER_get_cpu_load+0x44>
	for(uint32_t t = 2; t < task_queu_size; t++)
 8001f8a:	e000      	b.n	8001f8e <SCHEDULER_get_cpu_load+0xa>
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <SCHEDULER_get_cpu_load+0x48>)
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d913      	bls.n	8001fbe <SCHEDULER_get_cpu_load+0x3a>
		if(task_queu[t]->real_period_us)
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <SCHEDULER_get_cpu_load+0x4c>)
 8001f98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f9c:	69d1      	ldr	r1, [r2, #28]
 8001f9e:	2900      	cmp	r1, #0
 8001fa0:	d0f4      	beq.n	8001f8c <SCHEDULER_get_cpu_load+0x8>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 8001fa2:	6910      	ldr	r0, [r2, #16]
 8001fa4:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8001fa8:	fb02 f200 	mul.w	r2, r2, r0
 8001fac:	fbb2 f2f1 	udiv	r2, r2, r1
 8001fb0:	ee07 2a90 	vmov	s15, r2
 8001fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fbc:	e7e6      	b.n	8001f8c <SCHEDULER_get_cpu_load+0x8>
}
 8001fbe:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001fd4 <SCHEDULER_get_cpu_load+0x50>
 8001fc2:	ee27 0a00 	vmul.f32	s0, s14, s0
 8001fc6:	4770      	bx	lr
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	20001c44 	.word	0x20001c44
 8001fd0:	20001c08 	.word	0x20001c08
 8001fd4:	3b000000 	.word	0x3b000000

08001fd8 <SCHEDULER_enable_task>:
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 8001fd8:	b508      	push	{r3, lr}
	if(enable)
 8001fda:	b121      	cbz	r1, 8001fe6 <SCHEDULER_enable_task+0xe>
		queu_add(TASK_get_task(id));
 8001fdc:	f000 f8c6 	bl	800216c <TASK_get_task>
 8001fe0:	f7ff ff06 	bl	8001df0 <queu_add>
}
 8001fe4:	bd08      	pop	{r3, pc}
		queu_remove(TASK_get_task(id));
 8001fe6:	f000 f8c1 	bl	800216c <TASK_get_task>
 8001fea:	f7ff ff37 	bl	8001e5c <queu_remove>
}
 8001fee:	e7f9      	b.n	8001fe4 <SCHEDULER_enable_task+0xc>

08001ff0 <SCHEDULER_task_set_mode>:
void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	460c      	mov	r4, r1
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff4:	b672      	cpsid	i
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 8001ff6:	4d08      	ldr	r5, [pc, #32]	; (8002018 <SCHEDULER_task_set_mode+0x28>)
 8001ff8:	782e      	ldrb	r6, [r5, #0]
 8001ffa:	b2f6      	uxtb	r6, r6
 8001ffc:	f000 f8b6 	bl	800216c <TASK_get_task>
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <SCHEDULER_task_set_mode+0x2c>)
 8002002:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 8002006:	782b      	ldrb	r3, [r5, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	3301      	adds	r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	702b      	strb	r3, [r5, #0]
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <SCHEDULER_task_set_mode+0x30>)
 8002012:	549c      	strb	r4, [r3, r2]
  __ASM volatile ("cpsie i" : : : "memory");
 8002014:	b662      	cpsie	i
}
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	20001c80 	.word	0x20001c80
 800201c:	20001c48 	.word	0x20001c48
 8002020:	20001bf8 	.word	0x20001bf8

08002024 <SCHEDULER_reschedule_task>:
void SCHEDULER_reschedule_task(task_ids_t id, uint32_t new_period_us){
 8002024:	b510      	push	{r4, lr}
 8002026:	460c      	mov	r4, r1
	task_t * task = TASK_get_task(id);
 8002028:	f000 f8a0 	bl	800216c <TASK_get_task>
	task->desired_period_us = new_period_us ;
 800202c:	6184      	str	r4, [r0, #24]
}
 800202e:	bd10      	pop	{r4, pc}

08002030 <process_printf>:

	//printf("%f\t%f\n", sys->orientation.angular_position[ORIENTATION_ROLL], sys->orientation.angular_velocity[ORIENTATION_ROLL]);

	//printf("%f\t%f\t%f\n", sys->sensors.acc.raw[0], sys->sensors.acc.raw[1], sys->sensors.acc.raw[2]);
	//printf("%f\t%f\t%f\n", sys->sensors.gyro.raw[0], sys->sensors.gyro.raw[1], sys->sensors.gyro.raw[2]);
}
 8002030:	4770      	bx	lr

08002032 <process_acc_update>:

}

void process_acc_update(uint32_t current_time_us){
	//ACC_update(&sys->sensors.acc);
}
 8002032:	4770      	bx	lr

08002034 <process_stuff_made_here>:

void process_stuff_made_here(uint32_t current_time_us){
	if(sys->simulate){
		//STATE_SPACE_MODEL_Step(&sys->ss);
	}
}
 8002034:	4770      	bx	lr
	...

08002038 <process_gyro_update>:
void process_gyro_update(uint32_t current_time_us){
 8002038:	b508      	push	{r3, lr}
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 800203a:	4b03      	ldr	r3, [pc, #12]	; (8002048 <process_gyro_update+0x10>)
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8002042:	f000 fa11 	bl	8002468 <GYRO_ACC_update_dma>
}
 8002046:	bd08      	pop	{r3, pc}
 8002048:	20001c84 	.word	0x20001c84

0800204c <process_gyro_filter>:
void process_gyro_filter(uint32_t current_time_us){
 800204c:	b508      	push	{r3, lr}
	GYRO_process_lpf(&sys->sensors.gyro);
 800204e:	4b03      	ldr	r3, [pc, #12]	; (800205c <process_gyro_filter+0x10>)
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8002056:	f000 fa15 	bl	8002484 <GYRO_process_lpf>
}
 800205a:	bd08      	pop	{r3, pc}
 800205c:	20001c84 	.word	0x20001c84

08002060 <process_acc_filter>:
void process_acc_filter(uint32_t current_time_us){
 8002060:	b510      	push	{r4, lr}
	ACC_process_lpf(&sys->sensors.acc);
 8002062:	4c06      	ldr	r4, [pc, #24]	; (800207c <process_acc_filter+0x1c>)
 8002064:	6820      	ldr	r0, [r4, #0]
 8002066:	f500 7021 	add.w	r0, r0, #644	; 0x284
 800206a:	f000 f931 	bl	80022d0 <ACC_process_lpf>
	ACC_process_angle(&sys->sensors.acc);
 800206e:	6820      	ldr	r0, [r4, #0]
 8002070:	f500 7021 	add.w	r0, r0, #644	; 0x284
 8002074:	f000 f968 	bl	8002348 <ACC_process_angle>
}
 8002078:	bd10      	pop	{r4, pc}
 800207a:	bf00      	nop
 800207c:	20001c84 	.word	0x20001c84

08002080 <process_event_main>:
void process_event_main(uint32_t current_time_us){
 8002080:	b508      	push	{r3, lr}
	EVENT_process(FALSE);
 8002082:	2000      	movs	r0, #0
 8002084:	f7ff fcac 	bl	80019e0 <EVENT_process>
}
 8002088:	bd08      	pop	{r3, pc}
	...

0800208c <process_orientation_update>:
void process_orientation_update(uint32_t current_time_us){
 800208c:	b510      	push	{r4, lr}
	ORIENTATION_Update(&sys->orientation);
 800208e:	4c0b      	ldr	r4, [pc, #44]	; (80020bc <process_orientation_update+0x30>)
 8002090:	6820      	ldr	r0, [r4, #0]
 8002092:	f500 705f 	add.w	r0, r0, #892	; 0x37c
 8002096:	f7ff fb71 	bl	800177c <ORIENTATION_Update>
	KALMAN_Update(&sys->kalman);
 800209a:	6820      	ldr	r0, [r4, #0]
 800209c:	30b4      	adds	r0, #180	; 0xb4
 800209e:	f001 f812 	bl	80030c6 <KALMAN_Update>
	REGULATION_ORIENTATION_Process();
 80020a2:	f000 f8b1 	bl	8002208 <REGULATION_ORIENTATION_Process>
	MOTORS_Change_output(&sys->prop.motors);
 80020a6:	6820      	ldr	r0, [r4, #0]
 80020a8:	f500 60b8 	add.w	r0, r0, #1472	; 0x5c0
 80020ac:	f004 fa00 	bl	80064b0 <MOTORS_Change_output>
	KALMAN_Predict(&sys->kalman);
 80020b0:	6820      	ldr	r0, [r4, #0]
 80020b2:	30b4      	adds	r0, #180	; 0xb4
 80020b4:	f001 f87c 	bl	80031b0 <KALMAN_Predict>
}
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	bf00      	nop
 80020bc:	20001c84 	.word	0x20001c84

080020c0 <process_task_scheduler>:
void process_task_scheduler(uint32_t current_time_us){
 80020c0:	b508      	push	{r3, lr}
	SCHEDULER_task();
 80020c2:	f7ff ff45 	bl	8001f50 <SCHEDULER_task>
}
 80020c6:	bd08      	pop	{r3, pc}

080020c8 <process_telemetry>:
void process_telemetry(uint32_t current_time_us){
 80020c8:	b508      	push	{r3, lr}
	TELEMETRY_Process(current_time_us);
 80020ca:	f001 f999 	bl	8003400 <TELEMETRY_Process>
}
 80020ce:	bd08      	pop	{r3, pc}

080020d0 <process_logger>:
void process_logger(uint32_t current_time_us){
 80020d0:	b508      	push	{r3, lr}
	DATA_LOGGER_Main();
 80020d2:	f7ff fa57 	bl	8001584 <DATA_LOGGER_Main>
}
 80020d6:	bd08      	pop	{r3, pc}

080020d8 <process_high_lvl>:
void process_high_lvl(uint32_t current_time_us){
 80020d8:	b508      	push	{r3, lr}
	HIGH_LVL_Main(current_time_us);
 80020da:	f7ff fb8f 	bl	80017fc <HIGH_LVL_Main>
}
 80020de:	bd08      	pop	{r3, pc}

080020e0 <process_self_test>:

void process_self_test(uint32_t current_time_us){
 80020e0:	b510      	push	{r4, lr}
	sys->soft.cpu_load = SCHEDULER_get_cpu_load();
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <process_self_test+0x14>)
 80020e4:	681c      	ldr	r4, [r3, #0]
 80020e6:	f7ff ff4d 	bl	8001f84 <SCHEDULER_get_cpu_load>
 80020ea:	f204 54bc 	addw	r4, r4, #1468	; 0x5bc
 80020ee:	ed84 0a00 	vstr	s0, [r4]
}
 80020f2:	bd10      	pop	{r4, pc}
 80020f4:	20001c84 	.word	0x20001c84

080020f8 <tasks_init>:
void tasks_init(system_t * sys_){
 80020f8:	b508      	push	{r3, lr}
	sys = sys_ ;
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <tasks_init+0x70>)
 80020fc:	6018      	str	r0, [r3, #0]
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 80020fe:	2101      	movs	r1, #1
 8002100:	2000      	movs	r0, #0
 8002102:	f7ff ff69 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_PRINTF, FALSE);
 8002106:	2100      	movs	r1, #0
 8002108:	2001      	movs	r0, #1
 800210a:	f7ff ff65 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 800210e:	2101      	movs	r1, #1
 8002110:	2002      	movs	r0, #2
 8002112:	f7ff ff61 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_TELEMETRIE, TRUE);
 8002116:	2101      	movs	r1, #1
 8002118:	2009      	movs	r0, #9
 800211a:	f7ff ff5d 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_LOGGER, TRUE);
 800211e:	2101      	movs	r1, #1
 8002120:	200a      	movs	r0, #10
 8002122:	f7ff ff59 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 8002126:	2101      	movs	r1, #1
 8002128:	200c      	movs	r0, #12
 800212a:	f7ff ff55 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 800212e:	2101      	movs	r1, #1
 8002130:	2005      	movs	r0, #5
 8002132:	f7ff ff51 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 8002136:	2101      	movs	r1, #1
 8002138:	2006      	movs	r0, #6
 800213a:	f7ff ff4d 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 800213e:	2101      	movs	r1, #1
 8002140:	2008      	movs	r0, #8
 8002142:	f7ff ff49 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_UPDATE, FALSE);
 8002146:	2100      	movs	r1, #0
 8002148:	2007      	movs	r0, #7
 800214a:	f7ff ff45 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_HIGH_LVL, TRUE);
 800214e:	2101      	movs	r1, #1
 8002150:	2004      	movs	r0, #4
 8002152:	f7ff ff41 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_MONITORING, TRUE);
 8002156:	2101      	movs	r1, #1
 8002158:	200b      	movs	r0, #11
 800215a:	f7ff ff3d 	bl	8001fd8 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_STUFF_MADE_HERE, TRUE);
 800215e:	2101      	movs	r1, #1
 8002160:	200d      	movs	r0, #13
 8002162:	f7ff ff39 	bl	8001fd8 <SCHEDULER_enable_task>
}
 8002166:	bd08      	pop	{r3, pc}
 8002168:	20001c84 	.word	0x20001c84

0800216c <TASK_get_task>:
};


task_t * TASK_get_task(task_ids_t id){
	return &tasks[id];
}
 800216c:	4b02      	ldr	r3, [pc, #8]	; (8002178 <TASK_get_task+0xc>)
 800216e:	22d4      	movs	r2, #212	; 0xd4
 8002170:	fb02 3000 	mla	r0, r2, r0, r3
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000ad4 	.word	0x20000ad4

0800217c <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 800217c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800217e:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8002180:	f001 fad2 	bl	8003728 <HAL_GetTick>
 8002184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002188:	fb00 3303 	mla	r3, r0, r3, r3
 800218c:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <TIME_us+0x34>)
 800218e:	6890      	ldr	r0, [r2, #8]
 8002190:	08c0      	lsrs	r0, r0, #3
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <TIME_us+0x38>)
 8002194:	fba2 2000 	umull	r2, r0, r2, r0
 8002198:	eba3 0050 	sub.w	r0, r3, r0, lsr #1
  __ASM volatile ("cpsie i" : : : "memory");
 800219c:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s est pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us > t_us)
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <TIME_us+0x3c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4283      	cmp	r3, r0
 80021a4:	d901      	bls.n	80021aa <TIME_us+0x2e>
		t_us += 1000;
 80021a6:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
	previous_t_us = t_us ;
 80021aa:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <TIME_us+0x3c>)
 80021ac:	6018      	str	r0, [r3, #0]

	return t_us;
}
 80021ae:	bd08      	pop	{r3, pc}
 80021b0:	e000e010 	.word	0xe000e010
 80021b4:	18618619 	.word	0x18618619
 80021b8:	20001c88 	.word	0x20001c88

080021bc <REGULATION_ORIENTATION_Init>:
//	------------------------------	Angular Pos Regulation settings	-----------------------------------------
float filter_pid_angle[3] = {1.0f, 0.0f, 0.0f};
float pid_angle_settings[PID_NB_SETTINGS] = {6.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};


void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, float * output){
 80021bc:	b538      	push	{r3, r4, r5, lr}
	orientation = orientation_ ;
	regu_orientation = regu_orientation_ ;
 80021be:	4d0a      	ldr	r5, [pc, #40]	; (80021e8 <REGULATION_ORIENTATION_Init+0x2c>)
 80021c0:	6028      	str	r0, [r5, #0]
	regu_orientation->mode = REGULATION_MODE_OFF ;
 80021c2:	2400      	movs	r4, #0
 80021c4:	7104      	strb	r4, [r0, #4]
	regu_orientation->output = output ;
 80021c6:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac


	//Init PID angular speed
	PID_init(&regu_orientation->pid_angular_speed, pid_velocity_settings, FILTER_SECOND_ORDER, filter_pid_velocity);
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <REGULATION_ORIENTATION_Init+0x30>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <REGULATION_ORIENTATION_Init+0x34>)
 80021d0:	3008      	adds	r0, #8
 80021d2:	f004 f9e1 	bl	8006598 <PID_init>

	//Init PID angular position
	PID_init(&regu_orientation->pid_angular_pos, pid_angle_settings, FILTER_FIRST_ORDER, filter_pid_angle);
 80021d6:	6828      	ldr	r0, [r5, #0]
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <REGULATION_ORIENTATION_Init+0x38>)
 80021da:	4622      	mov	r2, r4
 80021dc:	4906      	ldr	r1, [pc, #24]	; (80021f8 <REGULATION_ORIENTATION_Init+0x3c>)
 80021de:	3054      	adds	r0, #84	; 0x54
 80021e0:	f004 f9da 	bl	8006598 <PID_init>


}
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
 80021e6:	bf00      	nop
 80021e8:	20001c8c 	.word	0x20001c8c
 80021ec:	20001678 	.word	0x20001678
 80021f0:	20001698 	.word	0x20001698
 80021f4:	2000166c 	.word	0x2000166c
 80021f8:	20001684 	.word	0x20001684

080021fc <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_mode_e regu_mode){
	regu_orientation->mode = regu_mode;
 80021fc:	4b01      	ldr	r3, [pc, #4]	; (8002204 <REGULATION_ORIENTATION_Set_Regulation_Mode+0x8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	7118      	strb	r0, [r3, #4]
}
 8002202:	4770      	bx	lr
 8002204:	20001c8c 	.word	0x20001c8c

08002208 <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){

	switch(regu_orientation->mode){
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <REGULATION_ORIENTATION_Process+0x30>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	7913      	ldrb	r3, [r2, #4]
 800220e:	b113      	cbz	r3, 8002216 <REGULATION_ORIENTATION_Process+0xe>
 8002210:	2b01      	cmp	r3, #1
 8002212:	d005      	beq.n	8002220 <REGULATION_ORIENTATION_Process+0x18>
 8002214:	4770      	bx	lr
		case REGULATION_MODE_OFF:
			*regu_orientation->output = 0;
 8002216:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
			break;
 800221e:	4770      	bx	lr
		case REGULATION_MODE_MANUAL:
			*regu_orientation->output = (float)regu_orientation->motor_consigne;
 8002220:	f9b2 30a8 	ldrsh.w	r3, [r2, #168]	; 0xa8
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 800222c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002230:	edc3 7a00 	vstr	s15, [r3]
			break;
	}

}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20001c8c 	.word	0x20001c8c

0800223c <acc_correction>:
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
}

static float acc_correction(float x);
static float acc_correction(float x){
	x = ( x > 0) ? 180 - x : -180 -x ;
 800223c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002244:	dd04      	ble.n	8002250 <acc_correction+0x14>
 8002246:	eddf 7a05 	vldr	s15, [pc, #20]	; 800225c <acc_correction+0x20>
 800224a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800224e:	4770      	bx	lr
 8002250:	eddf 7a03 	vldr	s15, [pc, #12]	; 8002260 <acc_correction+0x24>
 8002254:	ee37 0ac0 	vsub.f32	s0, s15, s0
	return x ;
}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	43340000 	.word	0x43340000
 8002260:	c3340000 	.word	0xc3340000

08002264 <acc_data_callback>:
	//Petite correction à la main super clean
	acc->angles[ORIENTATION_PITCH] += 3.7603f ;

}

static void acc_data_callback(void){
 8002264:	b508      	push	{r3, lr}
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8002266:	2006      	movs	r0, #6
 8002268:	f7ff fc20 	bl	8001aac <EVENT_Set_flag>
}
 800226c:	bd08      	pop	{r3, pc}
	...

08002270 <ACC_init>:
void ACC_init(acc_t * acc, mpu_t * mpu, float * angle_output){
 8002270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002272:	4604      	mov	r4, r0
 8002274:	460d      	mov	r5, r1
 8002276:	4616      	mov	r6, r2
	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_NO_FILTERING);
 8002278:	4f13      	ldr	r7, [pc, #76]	; (80022c8 <ACC_init+0x58>)
 800227a:	2202      	movs	r2, #2
 800227c:	4639      	mov	r1, r7
 800227e:	3020      	adds	r0, #32
 8002280:	f004 f8ae 	bl	80063e0 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_NO_FILTERING);
 8002284:	2202      	movs	r2, #2
 8002286:	4639      	mov	r1, r7
 8002288:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800228c:	f004 f8a8 	bl	80063e0 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_NO_FILTERING);
 8002290:	2202      	movs	r2, #2
 8002292:	4639      	mov	r1, r7
 8002294:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002298:	f004 f8a2 	bl	80063e0 <FILTER_init>
	acc->mpu = mpu ;
 800229c:	6025      	str	r5, [r4, #0]
	acc->raw = acc->mpu->acc ;
 800229e:	f105 0348 	add.w	r3, r5, #72	; 0x48
 80022a2:	6063      	str	r3, [r4, #4]
	acc->angle_output = angle_output;
 80022a4:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	acc->offsets[0] = 0.0 ;
 80022a8:	2300      	movs	r3, #0
 80022aa:	6163      	str	r3, [r4, #20]
	acc->offsets[1] = 0.0 ;
 80022ac:	61a3      	str	r3, [r4, #24]
	acc->offsets[2] = 0.0 ;
 80022ae:	61e3      	str	r3, [r4, #28]
	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <ACC_init+0x5c>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	4628      	mov	r0, r5
 80022b6:	f000 fa4d 	bl	8002754 <MPU_init_acc>
 80022ba:	b100      	cbz	r0, 80022be <ACC_init+0x4e>
}
 80022bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			EVENT_Set_flag(FLAG_ACC_OK);
 80022be:	2004      	movs	r0, #4
 80022c0:	f7ff fbf4 	bl	8001aac <EVENT_Set_flag>
}
 80022c4:	e7fa      	b.n	80022bc <ACC_init+0x4c>
 80022c6:	bf00      	nop
 80022c8:	200016ac 	.word	0x200016ac
 80022cc:	08002265 	.word	0x08002265

080022d0 <ACC_process_lpf>:
void ACC_process_lpf(acc_t * acc){
 80022d0:	b510      	push	{r4, lr}
 80022d2:	4604      	mov	r4, r0
	acc->raw[0] -= acc->offsets[0];
 80022d4:	6843      	ldr	r3, [r0, #4]
 80022d6:	ed90 7a05 	vldr	s14, [r0, #20]
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022e2:	edc3 7a00 	vstr	s15, [r3]
	acc->raw[1] -= acc->offsets[1];
 80022e6:	6843      	ldr	r3, [r0, #4]
 80022e8:	ed90 7a06 	vldr	s14, [r0, #24]
 80022ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80022f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022f4:	edc3 7a01 	vstr	s15, [r3, #4]
	acc->raw[2] -= acc->offsets[2];
 80022f8:	6843      	ldr	r3, [r0, #4]
 80022fa:	ed90 7a07 	vldr	s14, [r0, #28]
 80022fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002306:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 800230a:	6843      	ldr	r3, [r0, #4]
 800230c:	ed93 0a00 	vldr	s0, [r3]
 8002310:	3020      	adds	r0, #32
 8002312:	f004 f877 	bl	8006404 <FILTER_process>
 8002316:	ed84 0a02 	vstr	s0, [r4, #8]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 800231a:	6863      	ldr	r3, [r4, #4]
 800231c:	ed93 0a01 	vldr	s0, [r3, #4]
 8002320:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8002324:	f004 f86e 	bl	8006404 <FILTER_process>
 8002328:	ed84 0a03 	vstr	s0, [r4, #12]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 800232c:	6863      	ldr	r3, [r4, #4]
 800232e:	ed93 0a02 	vldr	s0, [r3, #8]
 8002332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002336:	f004 f865 	bl	8006404 <FILTER_process>
 800233a:	ed84 0a04 	vstr	s0, [r4, #16]
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 800233e:	2007      	movs	r0, #7
 8002340:	f7ff fbb4 	bl	8001aac <EVENT_Set_flag>
}
 8002344:	bd10      	pop	{r4, pc}
	...

08002348 <ACC_process_angle>:
	if(acc->angles == NULL)
 8002348:	f110 0f74 	cmn.w	r0, #116	; 0x74
 800234c:	d050      	beq.n	80023f0 <ACC_process_angle+0xa8>
void ACC_process_angle(acc_t * acc){
 800234e:	b510      	push	{r4, lr}
 8002350:	4604      	mov	r4, r0
	float acc_total = acc->filtered[0] * acc->filtered[0] ;
 8002352:	ed90 0a02 	vldr	s0, [r0, #8]
 8002356:	ee60 7a00 	vmul.f32	s15, s0, s0
	acc_total += acc->filtered[1] * acc->filtered[1] ;
 800235a:	ed90 0a03 	vldr	s0, [r0, #12]
 800235e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002362:	ee30 0a27 	vadd.f32	s0, s0, s15
	acc_total += acc->filtered[2] * acc->filtered[2] ;
 8002366:	edd0 7a04 	vldr	s15, [r0, #16]
 800236a:	ee67 7aa7 	vmul.f32	s15, s15, s15
	acc_total = sqrtf(acc_total);
 800236e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002372:	f007 fad7 	bl	8009924 <sqrtf>
	if(acc_total)	//To avoid /0
 8002376:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	d019      	beq.n	80023b4 <ACC_process_angle+0x6c>
		if(absolute(acc->filtered[ORIENTATION_YAW]) < acc_total)	//To avoid asin x with x greater than 1
 8002380:	edd4 7a04 	vldr	s15, [r4, #16]
 8002384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	db1b      	blt.n	80023c6 <ACC_process_angle+0x7e>
 800238e:	eeb0 7a67 	vmov.f32	s14, s15
 8002392:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8002396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239a:	d417      	bmi.n	80023cc <ACC_process_angle+0x84>
		if(acc->filtered[ORIENTATION_ROLL] < 0)
 800239c:	edd4 7a02 	vldr	s15, [r4, #8]
 80023a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	d41b      	bmi.n	80023e2 <ACC_process_angle+0x9a>
		if(acc->angle_output)
 80023aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80023ae:	b10b      	cbz	r3, 80023b4 <ACC_process_angle+0x6c>
			*acc->angle_output = acc->angles[ORIENTATION_PITCH];
 80023b0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80023b2:	601a      	str	r2, [r3, #0]
	acc->angles[ORIENTATION_PITCH] += 3.7603f ;
 80023b4:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
 80023b8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80023f4 <ACC_process_angle+0xac>
 80023bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023c0:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
}
 80023c4:	bd10      	pop	{r4, pc}
		if(absolute(acc->filtered[ORIENTATION_YAW]) < acc_total)	//To avoid asin x with x greater than 1
 80023c6:	eeb1 7a67 	vneg.f32	s14, s15
 80023ca:	e7e2      	b.n	8002392 <ACC_process_angle+0x4a>
			acc->angles[ORIENTATION_PITCH] = asinf(acc->filtered[ORIENTATION_YAW] / acc_total) * 57.32f;
 80023cc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80023d0:	f007 fa76 	bl	80098c0 <asinf>
 80023d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80023f8 <ACC_process_angle+0xb0>
 80023d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80023dc:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
 80023e0:	e7dc      	b.n	800239c <ACC_process_angle+0x54>
			acc->angles[ORIENTATION_PITCH] = acc_correction(acc->angles[ORIENTATION_PITCH]);
 80023e2:	ed94 0a1e 	vldr	s0, [r4, #120]	; 0x78
 80023e6:	f7ff ff29 	bl	800223c <acc_correction>
 80023ea:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
 80023ee:	e7dc      	b.n	80023aa <ACC_process_angle+0x62>
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	4070a8c1 	.word	0x4070a8c1
 80023f8:	426547ae 	.word	0x426547ae

080023fc <gyro_data_callback>:
	if(gyro->output)
		*gyro->output = gyro->filtered[1];
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
}

static void gyro_data_callback(void){
 80023fc:	b508      	push	{r3, lr}
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 80023fe:	2002      	movs	r0, #2
 8002400:	f7ff fb54 	bl	8001aac <EVENT_Set_flag>
}
 8002404:	bd08      	pop	{r3, pc}
	...

08002408 <GYRO_init>:
void GYRO_init(gyro_t * gyro, mpu_t * mpu, float * output){
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	4604      	mov	r4, r0
 800240c:	460d      	mov	r5, r1
 800240e:	4616      	mov	r6, r2
	FILTER_init(&gyro->filters[ORIENTATION_ROLL], filter, FILTER_NO_FILTERING);
 8002410:	4f12      	ldr	r7, [pc, #72]	; (800245c <GYRO_init+0x54>)
 8002412:	2202      	movs	r2, #2
 8002414:	4639      	mov	r1, r7
 8002416:	3020      	adds	r0, #32
 8002418:	f003 ffe2 	bl	80063e0 <FILTER_init>
	FILTER_init(&gyro->filters[ORIENTATION_PITCH], filter, FILTER_NO_FILTERING);
 800241c:	2202      	movs	r2, #2
 800241e:	4639      	mov	r1, r7
 8002420:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8002424:	f003 ffdc 	bl	80063e0 <FILTER_init>
	FILTER_init(&gyro->filters[ORIENTATION_YAW], filter, FILTER_NO_FILTERING);
 8002428:	2202      	movs	r2, #2
 800242a:	4639      	mov	r1, r7
 800242c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002430:	f003 ffd6 	bl	80063e0 <FILTER_init>
	gyro->mpu = mpu ;
 8002434:	6025      	str	r5, [r4, #0]
	gyro->output = output ;
 8002436:	6766      	str	r6, [r4, #116]	; 0x74
	gyro->raw = gyro->mpu->gyro ;
 8002438:	f105 0324 	add.w	r3, r5, #36	; 0x24
 800243c:	6063      	str	r3, [r4, #4]
	gyro->offsets[ORIENTATION_ROLL] = 0.0f;
 800243e:	2300      	movs	r3, #0
 8002440:	6163      	str	r3, [r4, #20]
	gyro->offsets[ORIENTATION_PITCH] = -0.88356f ;
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <GYRO_init+0x58>)
 8002444:	61a2      	str	r2, [r4, #24]
	gyro->offsets[ORIENTATION_YAW] = 0.0f ;
 8002446:	61e3      	str	r3, [r4, #28]
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 8002448:	4a06      	ldr	r2, [pc, #24]	; (8002464 <GYRO_init+0x5c>)
 800244a:	2103      	movs	r1, #3
 800244c:	4628      	mov	r0, r5
 800244e:	f000 f92d 	bl	80026ac <MPU_init_gyro>
 8002452:	b100      	cbz	r0, 8002456 <GYRO_init+0x4e>
}
 8002454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			EVENT_Set_flag(FLAG_GYRO_OK);
 8002456:	f7ff fb29 	bl	8001aac <EVENT_Set_flag>
}
 800245a:	e7fb      	b.n	8002454 <GYRO_init+0x4c>
 800245c:	200016b8 	.word	0x200016b8
 8002460:	bf6230fd 	.word	0xbf6230fd
 8002464:	080023fd 	.word	0x080023fd

08002468 <GYRO_ACC_update_dma>:
void GYRO_ACC_update_dma(gyro_t * gyro){
 8002468:	b508      	push	{r3, lr}
	switch(MPU_update_all_dma(gyro->mpu)){
 800246a:	6800      	ldr	r0, [r0, #0]
 800246c:	f000 f9be 	bl	80027ec <MPU_update_all_dma>
 8002470:	2802      	cmp	r0, #2
 8002472:	d000      	beq.n	8002476 <GYRO_ACC_update_dma+0xe>
}
 8002474:	bd08      	pop	{r3, pc}
			EVENT_Clean_flag(FLAG_GYRO_OK);
 8002476:	2000      	movs	r0, #0
 8002478:	f7ff fb48 	bl	8001b0c <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 800247c:	2004      	movs	r0, #4
 800247e:	f7ff fb45 	bl	8001b0c <EVENT_Clean_flag>
}
 8002482:	e7f7      	b.n	8002474 <GYRO_ACC_update_dma+0xc>

08002484 <GYRO_process_lpf>:
void GYRO_process_lpf(gyro_t * gyro){
 8002484:	b510      	push	{r4, lr}
 8002486:	4604      	mov	r4, r0
	gyro->raw[0] -= gyro->offsets[0];
 8002488:	6843      	ldr	r3, [r0, #4]
 800248a:	ed90 7a05 	vldr	s14, [r0, #20]
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002496:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[1] -= gyro->offsets[1];
 800249a:	6843      	ldr	r3, [r0, #4]
 800249c:	ed90 7a06 	vldr	s14, [r0, #24]
 80024a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80024a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024a8:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro->raw[2] -= gyro->offsets[2];
 80024ac:	6843      	ldr	r3, [r0, #4]
 80024ae:	ed90 7a07 	vldr	s14, [r0, #28]
 80024b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80024b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024ba:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[0] =  FILTER_process(&gyro->filters[0], gyro->raw[0]);
 80024be:	6843      	ldr	r3, [r0, #4]
 80024c0:	ed93 0a00 	vldr	s0, [r3]
 80024c4:	3020      	adds	r0, #32
 80024c6:	f003 ff9d 	bl	8006404 <FILTER_process>
 80024ca:	ed84 0a02 	vstr	s0, [r4, #8]
	gyro->filtered[1] =  FILTER_process(&gyro->filters[1], gyro->raw[1]);
 80024ce:	6863      	ldr	r3, [r4, #4]
 80024d0:	ed93 0a01 	vldr	s0, [r3, #4]
 80024d4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80024d8:	f003 ff94 	bl	8006404 <FILTER_process>
 80024dc:	ed84 0a03 	vstr	s0, [r4, #12]
	gyro->filtered[2] =  FILTER_process(&gyro->filters[2], gyro->raw[2]);
 80024e0:	6863      	ldr	r3, [r4, #4]
 80024e2:	ed93 0a02 	vldr	s0, [r3, #8]
 80024e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80024ea:	f003 ff8b 	bl	8006404 <FILTER_process>
 80024ee:	ed84 0a04 	vstr	s0, [r4, #16]
	if(gyro->output)
 80024f2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80024f4:	b10b      	cbz	r3, 80024fa <GYRO_process_lpf+0x76>
		*gyro->output = gyro->filtered[1];
 80024f6:	68e2      	ldr	r2, [r4, #12]
 80024f8:	601a      	str	r2, [r3, #0]
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 80024fa:	2003      	movs	r0, #3
 80024fc:	f7ff fad6 	bl	8001aac <EVENT_Set_flag>
}
 8002500:	bd10      	pop	{r4, pc}

08002502 <convert_gyro>:

static void convert_gyro(mpu_t * mpu);
static void convert_acc(mpu_t * mpu);

//Private functions def
static void convert_gyro(mpu_t * mpu){
 8002502:	b430      	push	{r4, r5}
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[0] << 8 | mpu->gyro_data[1]);
 8002504:	6984      	ldr	r4, [r0, #24]
 8002506:	7823      	ldrb	r3, [r4, #0]
 8002508:	7862      	ldrb	r2, [r4, #1]
 800250a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800250e:	b212      	sxth	r2, r2
 8002510:	8382      	strh	r2, [r0, #28]
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[2] << 8 | mpu->gyro_data[3]);
 8002512:	78a1      	ldrb	r1, [r4, #2]
 8002514:	78e3      	ldrb	r3, [r4, #3]
 8002516:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800251a:	b21b      	sxth	r3, r3
 800251c:	83c3      	strh	r3, [r0, #30]
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[4] << 8 | mpu->gyro_data[5]);
 800251e:	7925      	ldrb	r5, [r4, #4]
 8002520:	7961      	ldrb	r1, [r4, #5]
 8002522:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8002526:	b209      	sxth	r1, r1
 8002528:	8401      	strh	r1, [r0, #32]

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 800252a:	ee07 2a90 	vmov	s15, r2
 800252e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002532:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8002536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800253a:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 800254e:	ee07 1a90 	vmov	s15, r1
 8002552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255a:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
}
 800255e:	bc30      	pop	{r4, r5}
 8002560:	4770      	bx	lr

08002562 <convert_acc>:
static void convert_acc(mpu_t * mpu){
 8002562:	b430      	push	{r4, r5}
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[0] << 8 | mpu->acc_data[1]);
 8002564:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002566:	7823      	ldrb	r3, [r4, #0]
 8002568:	7862      	ldrb	r2, [r4, #1]
 800256a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800256e:	b212      	sxth	r2, r2
 8002570:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[2] << 8 | mpu->acc_data[3]);
 8002574:	78a1      	ldrb	r1, [r4, #2]
 8002576:	78e3      	ldrb	r3, [r4, #3]
 8002578:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800257c:	b21b      	sxth	r3, r3
 800257e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[4] << 8 | mpu->acc_data[5]);
 8002582:	7925      	ldrb	r5, [r4, #4]
 8002584:	7961      	ldrb	r1, [r4, #5]
 8002586:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800258a:	b209      	sxth	r1, r1
 800258c:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8002590:	ee07 2a90 	vmov	s15, r2
 8002594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002598:	ed90 7a16 	vldr	s14, [r0, #88]	; 0x58
 800259c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a0:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b0:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 80025b4:	ee07 1a90 	vmov	s15, r1
 80025b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c0:	edc0 7a14 	vstr	s15, [r0, #80]	; 0x50
}
 80025c4:	bc30      	pop	{r4, r5}
 80025c6:	4770      	bx	lr

080025c8 <MPU_dma_transmit_complete>:
	return SENSOR_REQUEST_OK;
}



static void MPU_dma_transmit_complete(mpu_t * mpu){
 80025c8:	b510      	push	{r4, lr}
 80025ca:	4604      	mov	r4, r0

	switch(mpu->dma_state){
 80025cc:	7983      	ldrb	r3, [r0, #6]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d00b      	beq.n	80025ea <MPU_dma_transmit_complete+0x22>
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d00e      	beq.n	80025f4 <MPU_dma_transmit_complete+0x2c>
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d002      	beq.n	80025e0 <MPU_dma_transmit_complete+0x18>
		case MPU_DMA_IDDLE:
		default:
			break;

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 80025da:	2300      	movs	r3, #0
 80025dc:	71a3      	strb	r3, [r4, #6]
}
 80025de:	bd10      	pop	{r4, pc}
			convert_gyro(mpu);
 80025e0:	f7ff ff8f 	bl	8002502 <convert_gyro>
			mpu->gyro_data_callback();
 80025e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025e6:	4798      	blx	r3
			break;
 80025e8:	e7f7      	b.n	80025da <MPU_dma_transmit_complete+0x12>
			convert_acc(mpu);
 80025ea:	f7ff ffba 	bl	8002562 <convert_acc>
			mpu->acc_data_callback();
 80025ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025f0:	4798      	blx	r3
			break;
 80025f2:	e7f2      	b.n	80025da <MPU_dma_transmit_complete+0x12>
			convert_gyro(mpu);
 80025f4:	f7ff ff85 	bl	8002502 <convert_gyro>
			convert_acc(mpu);
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7ff ffb2 	bl	8002562 <convert_acc>
			mpu->gyro_data_callback();
 80025fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002600:	4798      	blx	r3
			mpu->acc_data_callback();
 8002602:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002604:	4798      	blx	r3
			break;
 8002606:	e7e8      	b.n	80025da <MPU_dma_transmit_complete+0x12>

08002608 <MPU_init>:
	if(hi2c == NULL)
 8002608:	2900      	cmp	r1, #0
 800260a:	d046      	beq.n	800269a <MPU_init+0x92>
sensor_request_e MPU_init(mpu_t * mpu, I2C_HandleTypeDef * hi2c){
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	4604      	mov	r4, r0
 8002612:	460a      	mov	r2, r1
	mpu->state = SENSOR_NOT_INIT ;
 8002614:	2501      	movs	r5, #1
 8002616:	7145      	strb	r5, [r0, #5]
	mpu->gyro_data = &mpu->data[8] ;
 8002618:	f100 0310 	add.w	r3, r0, #16
 800261c:	6183      	str	r3, [r0, #24]
	mpu->acc_data = &mpu->data[0] ;
 800261e:	f100 0308 	add.w	r3, r0, #8
 8002622:	63c3      	str	r3, [r0, #60]	; 0x3c
	mpu->hi2c = hi2c ;
 8002624:	6001      	str	r1, [r0, #0]
	mpu->adresse = MPU6050_I2C_ADDR ;
 8002626:	21d0      	movs	r1, #208	; 0xd0
 8002628:	71c1      	strb	r1, [r0, #7]
	mpu_handlers[mpu_init_compteur] = mpu ;
 800262a:	481d      	ldr	r0, [pc, #116]	; (80026a0 <MPU_init+0x98>)
 800262c:	7803      	ldrb	r3, [r0, #0]
 800262e:	4e1d      	ldr	r6, [pc, #116]	; (80026a4 <MPU_init+0x9c>)
 8002630:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	I2C_handlers[mpu_init_compteur++] = hi2c ;
 8002634:	195e      	adds	r6, r3, r5
 8002636:	7006      	strb	r6, [r0, #0]
 8002638:	481b      	ldr	r0, [pc, #108]	; (80026a8 <MPU_init+0xa0>)
 800263a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	uint8_t wakeup_data = 0x80 ;
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	f88d 3017 	strb.w	r3, [sp, #23]
	mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &wakeup_data, 1, 10);
 8002644:	260a      	movs	r6, #10
 8002646:	9602      	str	r6, [sp, #8]
 8002648:	9501      	str	r5, [sp, #4]
 800264a:	f10d 0317 	add.w	r3, sp, #23
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	462b      	mov	r3, r5
 8002652:	226b      	movs	r2, #107	; 0x6b
 8002654:	6820      	ldr	r0, [r4, #0]
 8002656:	f001 ff63 	bl	8004520 <HAL_I2C_Mem_Write>
 800265a:	7120      	strb	r0, [r4, #4]
	HAL_Delay(15);
 800265c:	200f      	movs	r0, #15
 800265e:	f001 f869 	bl	8003734 <HAL_Delay>
	uint8_t mpu_clock_sel_pll_gyroz = 0x03;
 8002662:	2303      	movs	r3, #3
 8002664:	f88d 3016 	strb.w	r3, [sp, #22]
	mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &mpu_clock_sel_pll_gyroz, 1, 10);
 8002668:	9602      	str	r6, [sp, #8]
 800266a:	9501      	str	r5, [sp, #4]
 800266c:	f10d 0316 	add.w	r3, sp, #22
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	462b      	mov	r3, r5
 8002674:	226b      	movs	r2, #107	; 0x6b
 8002676:	79e1      	ldrb	r1, [r4, #7]
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	f001 ff51 	bl	8004520 <HAL_I2C_Mem_Write>
 800267e:	7120      	strb	r0, [r4, #4]
	HAL_Delay(15);
 8002680:	200f      	movs	r0, #15
 8002682:	f001 f857 	bl	8003734 <HAL_Delay>
	if(mpu->hal_state != HAL_OK){
 8002686:	7920      	ldrb	r0, [r4, #4]
 8002688:	b918      	cbnz	r0, 8002692 <MPU_init+0x8a>
	mpu->state = SENSOR_IDDLE ;
 800268a:	2300      	movs	r3, #0
 800268c:	7163      	strb	r3, [r4, #5]
}
 800268e:	b006      	add	sp, #24
 8002690:	bd70      	pop	{r4, r5, r6, pc}
		mpu->state = SENSOR_ERROR ;
 8002692:	2304      	movs	r3, #4
 8002694:	7163      	strb	r3, [r4, #5]
		return SENSOR_REQUEST_FAIL ;
 8002696:	2002      	movs	r0, #2
 8002698:	e7f9      	b.n	800268e <MPU_init+0x86>
		return SENSOR_REQUEST_FAIL ;
 800269a:	2002      	movs	r0, #2
}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20001c98 	.word	0x20001c98
 80026a4:	20001c94 	.word	0x20001c94
 80026a8:	20001c90 	.word	0x20001c90

080026ac <MPU_init_gyro>:
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 80026ac:	b530      	push	{r4, r5, lr}
 80026ae:	b087      	sub	sp, #28
 80026b0:	4604      	mov	r4, r0
	mpu->gyro_range = gyro_range ;
 80026b2:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	mpu->gyro_data_callback = gyro_data_callback ;
 80026b6:	6382      	str	r2, [r0, #56]	; 0x38
	if(mpu->state != SENSOR_IDDLE)
 80026b8:	7943      	ldrb	r3, [r0, #5]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d13e      	bne.n	800273c <MPU_init_gyro+0x90>
 80026be:	460d      	mov	r5, r1
	mpu->hal_state = HAL_I2C_Mem_Read(mpu->hi2c, mpu->adresse, MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 80026c0:	2302      	movs	r3, #2
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	2301      	movs	r3, #1
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	f10d 0217 	add.w	r2, sp, #23
 80026cc:	9200      	str	r2, [sp, #0]
 80026ce:	221b      	movs	r2, #27
 80026d0:	79c1      	ldrb	r1, [r0, #7]
 80026d2:	6800      	ldr	r0, [r0, #0]
 80026d4:	f001 ffd6 	bl	8004684 <HAL_I2C_Mem_Read>
 80026d8:	7120      	strb	r0, [r4, #4]
	temp = (temp & 0xE7) | (uint8_t)gyro_range << 3;
 80026da:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80026de:	f023 0318 	bic.w	r3, r3, #24
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
 80026e8:	f88d 3017 	strb.w	r3, [sp, #23]
	if(mpu->hal_state == HAL_OK)
 80026ec:	b138      	cbz	r0, 80026fe <MPU_init_gyro+0x52>
	if(mpu->hal_state != HAL_OK)
 80026ee:	7920      	ldrb	r0, [r4, #4]
 80026f0:	b998      	cbnz	r0, 800271a <MPU_init_gyro+0x6e>
	switch(gyro_range){
 80026f2:	2d03      	cmp	r5, #3
 80026f4:	d823      	bhi.n	800273e <MPU_init_gyro+0x92>
 80026f6:	e8df f005 	tbb	[pc, r5]
 80026fa:	1814      	.short	0x1814
 80026fc:	1e1b      	.short	0x1e1b
		mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 80026fe:	2302      	movs	r3, #2
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	2301      	movs	r3, #1
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	f10d 0217 	add.w	r2, sp, #23
 800270a:	9200      	str	r2, [sp, #0]
 800270c:	221b      	movs	r2, #27
 800270e:	79e1      	ldrb	r1, [r4, #7]
 8002710:	6820      	ldr	r0, [r4, #0]
 8002712:	f001 ff05 	bl	8004520 <HAL_I2C_Mem_Write>
 8002716:	7120      	strb	r0, [r4, #4]
 8002718:	e7e9      	b.n	80026ee <MPU_init_gyro+0x42>
		mpu->state = SENSOR_ERROR ;
 800271a:	2304      	movs	r3, #4
 800271c:	7163      	strb	r3, [r4, #5]
		return SENSOR_REQUEST_FAIL ;
 800271e:	2002      	movs	r0, #2
 8002720:	e00d      	b.n	800273e <MPU_init_gyro+0x92>
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <MPU_init_gyro+0x98>)
 8002724:	6363      	str	r3, [r4, #52]	; 0x34
	return SENSOR_REQUEST_OK;
 8002726:	4628      	mov	r0, r5
			break;
 8002728:	e009      	b.n	800273e <MPU_init_gyro+0x92>
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <MPU_init_gyro+0x9c>)
 800272c:	6363      	str	r3, [r4, #52]	; 0x34
			break;
 800272e:	e006      	b.n	800273e <MPU_init_gyro+0x92>
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MPU_init_gyro+0xa0>)
 8002732:	6363      	str	r3, [r4, #52]	; 0x34
			break;
 8002734:	e003      	b.n	800273e <MPU_init_gyro+0x92>
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MPU_init_gyro+0xa4>)
 8002738:	6363      	str	r3, [r4, #52]	; 0x34
			break;
 800273a:	e000      	b.n	800273e <MPU_init_gyro+0x92>
		return SENSOR_REQUEST_FAIL ;
 800273c:	2002      	movs	r0, #2
}
 800273e:	b007      	add	sp, #28
 8002740:	bd30      	pop	{r4, r5, pc}
 8002742:	bf00      	nop
 8002744:	3bfa232d 	.word	0x3bfa232d
 8002748:	3c7a232d 	.word	0x3c7a232d
 800274c:	3cf9c190 	.word	0x3cf9c190
 8002750:	3d79c190 	.word	0x3d79c190

08002754 <MPU_init_acc>:
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 8002754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002758:	b087      	sub	sp, #28
 800275a:	4604      	mov	r4, r0
	mpu->acc_range = acc_range ;
 800275c:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
	mpu->acc_data_callback = acc_data_callback ;
 8002760:	65c2      	str	r2, [r0, #92]	; 0x5c
	if(mpu->state != SENSOR_IDDLE)
 8002762:	7947      	ldrb	r7, [r0, #5]
 8002764:	2f00      	cmp	r7, #0
 8002766:	d13c      	bne.n	80027e2 <MPU_init_acc+0x8e>
 8002768:	460d      	mov	r5, r1
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 800276a:	f04f 0902 	mov.w	r9, #2
 800276e:	f8cd 9008 	str.w	r9, [sp, #8]
 8002772:	f04f 0801 	mov.w	r8, #1
 8002776:	f8cd 8004 	str.w	r8, [sp, #4]
 800277a:	f10d 0617 	add.w	r6, sp, #23
 800277e:	9600      	str	r6, [sp, #0]
 8002780:	4643      	mov	r3, r8
 8002782:	221c      	movs	r2, #28
 8002784:	79c1      	ldrb	r1, [r0, #7]
 8002786:	6800      	ldr	r0, [r0, #0]
 8002788:	f001 ff7c 	bl	8004684 <HAL_I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)acc_range << 3;
 800278c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002790:	f023 0318 	bic.w	r3, r3, #24
 8002794:	b25b      	sxtb	r3, r3
 8002796:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
 800279a:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 800279e:	f8cd 9008 	str.w	r9, [sp, #8]
 80027a2:	f8cd 8004 	str.w	r8, [sp, #4]
 80027a6:	9600      	str	r6, [sp, #0]
 80027a8:	4643      	mov	r3, r8
 80027aa:	221c      	movs	r2, #28
 80027ac:	79e1      	ldrb	r1, [r4, #7]
 80027ae:	6820      	ldr	r0, [r4, #0]
 80027b0:	f001 feb6 	bl	8004520 <HAL_I2C_Mem_Write>
	switch(acc_range){
 80027b4:	2d03      	cmp	r5, #3
 80027b6:	d815      	bhi.n	80027e4 <MPU_init_acc+0x90>
 80027b8:	e8df f005 	tbb	[pc, r5]
 80027bc:	0f0b0702 	.word	0x0f0b0702
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 80027c0:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 80027c4:	65a3      	str	r3, [r4, #88]	; 0x58
	return SENSOR_REQUEST_OK;
 80027c6:	462f      	mov	r7, r5
			break;
 80027c8:	e00c      	b.n	80027e4 <MPU_init_acc+0x90>
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 80027ca:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 80027ce:	65a3      	str	r3, [r4, #88]	; 0x58
			break;
 80027d0:	e008      	b.n	80027e4 <MPU_init_acc+0x90>
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 80027d2:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 80027d6:	65a3      	str	r3, [r4, #88]	; 0x58
			break;
 80027d8:	e004      	b.n	80027e4 <MPU_init_acc+0x90>
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 80027da:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 80027de:	65a3      	str	r3, [r4, #88]	; 0x58
			break;
 80027e0:	e000      	b.n	80027e4 <MPU_init_acc+0x90>
		return SENSOR_REQUEST_FAIL ;
 80027e2:	2702      	movs	r7, #2
}
 80027e4:	4638      	mov	r0, r7
 80027e6:	b007      	add	sp, #28
 80027e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080027ec <MPU_update_all_dma>:
sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 80027ec:	b510      	push	{r4, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	4604      	mov	r4, r0
	mpu->hal_state = HAL_I2C_Mem_Read_DMA(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, mpu->data, 14);
 80027f2:	4603      	mov	r3, r0
 80027f4:	f853 0b08 	ldr.w	r0, [r3], #8
 80027f8:	220e      	movs	r2, #14
 80027fa:	9201      	str	r2, [sp, #4]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2301      	movs	r3, #1
 8002800:	223b      	movs	r2, #59	; 0x3b
 8002802:	79e1      	ldrb	r1, [r4, #7]
 8002804:	f002 f8b0 	bl	8004968 <HAL_I2C_Mem_Read_DMA>
 8002808:	7120      	strb	r0, [r4, #4]
	if(mpu->hal_state == HAL_OK)
 800280a:	b920      	cbnz	r0, 8002816 <MPU_update_all_dma+0x2a>
		mpu->state = SENSOR_BUSY ;
 800280c:	2303      	movs	r3, #3
 800280e:	7163      	strb	r3, [r4, #5]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 8002810:	71a3      	strb	r3, [r4, #6]
}
 8002812:	b002      	add	sp, #8
 8002814:	bd10      	pop	{r4, pc}
	else if(mpu->hal_state == HAL_BUSY)
 8002816:	2802      	cmp	r0, #2
 8002818:	d003      	beq.n	8002822 <MPU_update_all_dma+0x36>
		mpu->state = SENSOR_ERROR ;
 800281a:	2304      	movs	r3, #4
 800281c:	7163      	strb	r3, [r4, #5]
		return SENSOR_REQUEST_FAIL ;
 800281e:	2002      	movs	r0, #2
 8002820:	e7f7      	b.n	8002812 <MPU_update_all_dma+0x26>
		return SENSOR_REQUEST_BUSY;
 8002822:	2001      	movs	r0, #1
 8002824:	e7f5      	b.n	8002812 <MPU_update_all_dma+0x26>
	...

08002828 <HAL_I2C_MemRxCpltCallback>:
//}



void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002828:	b508      	push	{r3, lr}
	if(hi2c == I2C_handlers[0])
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_I2C_MemRxCpltCallback+0x18>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4283      	cmp	r3, r0
 8002830:	d000      	beq.n	8002834 <HAL_I2C_MemRxCpltCallback+0xc>
		MPU_dma_transmit_complete(mpu_handlers[0]);
}
 8002832:	bd08      	pop	{r3, pc}
		MPU_dma_transmit_complete(mpu_handlers[0]);
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	f7ff fec6 	bl	80025c8 <MPU_dma_transmit_complete>
}
 800283c:	e7f9      	b.n	8002832 <HAL_I2C_MemRxCpltCallback+0xa>
 800283e:	bf00      	nop
 8002840:	20001c90 	.word	0x20001c90
 8002844:	20001c94 	.word	0x20001c94

08002848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002848:	b510      	push	{r4, lr}
 800284a:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800284c:	2400      	movs	r4, #0
 800284e:	9400      	str	r4, [sp, #0]
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <MX_DMA_Init+0x74>)
 8002852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002854:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002860:	9200      	str	r2, [sp, #0]
 8002862:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002864:	9401      	str	r4, [sp, #4]
 8002866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002868:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002878:	4622      	mov	r2, r4
 800287a:	4621      	mov	r1, r4
 800287c:	200b      	movs	r0, #11
 800287e:	f000 ff7f 	bl	8003780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002882:	200b      	movs	r0, #11
 8002884:	f000 ffb0 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002888:	4622      	mov	r2, r4
 800288a:	4621      	mov	r1, r4
 800288c:	2011      	movs	r0, #17
 800288e:	f000 ff77 	bl	8003780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002892:	2011      	movs	r0, #17
 8002894:	f000 ffa8 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002898:	4622      	mov	r2, r4
 800289a:	4621      	mov	r1, r4
 800289c:	203a      	movs	r0, #58	; 0x3a
 800289e:	f000 ff6f 	bl	8003780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80028a2:	203a      	movs	r0, #58	; 0x3a
 80028a4:	f000 ffa0 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80028a8:	4622      	mov	r2, r4
 80028aa:	4621      	mov	r1, r4
 80028ac:	2046      	movs	r0, #70	; 0x46
 80028ae:	f000 ff67 	bl	8003780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80028b2:	2046      	movs	r0, #70	; 0x46
 80028b4:	f000 ff98 	bl	80037e8 <HAL_NVIC_EnableIRQ>

}
 80028b8:	b002      	add	sp, #8
 80028ba:	bd10      	pop	{r4, pc}
 80028bc:	40023800 	.word	0x40023800

080028c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028c0:	b510      	push	{r4, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	2400      	movs	r4, #0
 80028c6:	9408      	str	r4, [sp, #32]
 80028c8:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ca:	9400      	str	r4, [sp, #0]
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <MX_GPIO_Init+0x98>)
 80028ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d0:	f042 0204 	orr.w	r2, r2, #4
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
 80028d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d8:	f002 0204 	and.w	r2, r2, #4
 80028dc:	9200      	str	r2, [sp, #0]
 80028de:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e0:	9401      	str	r4, [sp, #4]
 80028e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e4:	f042 0210 	orr.w	r2, r2, #16
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
 80028ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ec:	f002 0210 	and.w	r2, r2, #16
 80028f0:	9201      	str	r2, [sp, #4]
 80028f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	9402      	str	r4, [sp, #8]
 80028f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
 80028fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002900:	f002 0201 	and.w	r2, r2, #1
 8002904:	9202      	str	r2, [sp, #8]
 8002906:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002908:	9403      	str	r4, [sp, #12]
 800290a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800290c:	f042 0208 	orr.w	r2, r2, #8
 8002910:	631a      	str	r2, [r3, #48]	; 0x30
 8002912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002914:	f002 0208 	and.w	r2, r2, #8
 8002918:	9203      	str	r2, [sp, #12]
 800291a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291c:	9404      	str	r4, [sp, #16]
 800291e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002920:	f042 0202 	orr.w	r2, r2, #2
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	9304      	str	r3, [sp, #16]
 800292e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002930:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002934:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002936:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293a:	a905      	add	r1, sp, #20
 800293c:	4807      	ldr	r0, [pc, #28]	; (800295c <MX_GPIO_Init+0x9c>)
 800293e:	f001 f9df 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002942:	2302      	movs	r3, #2
 8002944:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002946:	2303      	movs	r3, #3
 8002948:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800294c:	a905      	add	r1, sp, #20
 800294e:	4804      	ldr	r0, [pc, #16]	; (8002960 <MX_GPIO_Init+0xa0>)
 8002950:	f001 f9d6 	bl	8003d00 <HAL_GPIO_Init>

}
 8002954:	b00a      	add	sp, #40	; 0x28
 8002956:	bd10      	pop	{r4, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	40020800 	.word	0x40020800
 8002960:	40020c00 	.word	0x40020c00

08002964 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002964:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002966:	480b      	ldr	r0, [pc, #44]	; (8002994 <MX_I2C1_Init+0x30>)
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <MX_I2C1_Init+0x34>)
 800296a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <MX_I2C1_Init+0x38>)
 800296e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002970:	2300      	movs	r3, #0
 8002972:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002974:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800297a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800297c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800297e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002980:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002982:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002984:	f001 fcee 	bl	8004364 <HAL_I2C_Init>
 8002988:	b900      	cbnz	r0, 800298c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800298a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800298c:	f000 f880 	bl	8002a90 <Error_Handler>
}
 8002990:	e7fb      	b.n	800298a <MX_I2C1_Init+0x26>
 8002992:	bf00      	nop
 8002994:	20001d4c 	.word	0x20001d4c
 8002998:	40005400 	.word	0x40005400
 800299c:	00061a80 	.word	0x00061a80

080029a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	2300      	movs	r3, #0
 80029a6:	9303      	str	r3, [sp, #12]
 80029a8:	9304      	str	r3, [sp, #16]
 80029aa:	9305      	str	r3, [sp, #20]
 80029ac:	9306      	str	r3, [sp, #24]
 80029ae:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80029b0:	6802      	ldr	r2, [r0, #0]
 80029b2:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_I2C_MspInit+0xd4>)
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_I2C_MspInit+0x1c>

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029b8:	b008      	add	sp, #32
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	2500      	movs	r5, #0
 80029c0:	9501      	str	r5, [sp, #4]
 80029c2:	4e2d      	ldr	r6, [pc, #180]	; (8002a78 <HAL_I2C_MspInit+0xd8>)
 80029c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	6333      	str	r3, [r6, #48]	; 0x30
 80029cc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029dc:	2312      	movs	r3, #18
 80029de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e0:	2301      	movs	r3, #1
 80029e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e4:	2303      	movs	r3, #3
 80029e6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029e8:	2304      	movs	r3, #4
 80029ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	a903      	add	r1, sp, #12
 80029ee:	4823      	ldr	r0, [pc, #140]	; (8002a7c <HAL_I2C_MspInit+0xdc>)
 80029f0:	f001 f986 	bl	8003d00 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029f4:	9502      	str	r5, [sp, #8]
 80029f6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80029f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029fc:	6433      	str	r3, [r6, #64]	; 0x40
 80029fe:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	9302      	str	r3, [sp, #8]
 8002a06:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002a08:	481d      	ldr	r0, [pc, #116]	; (8002a80 <HAL_I2C_MspInit+0xe0>)
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_I2C_MspInit+0xe4>)
 8002a0c:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a12:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a14:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a16:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a1c:	6103      	str	r3, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a1e:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a20:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002a22:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a24:	6205      	str	r5, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a26:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002a28:	f000 ff82 	bl	8003930 <HAL_DMA_Init>
 8002a2c:	b9d8      	cbnz	r0, 8002a66 <HAL_I2C_MspInit+0xc6>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_I2C_MspInit+0xe0>)
 8002a30:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a32:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002a34:	4814      	ldr	r0, [pc, #80]	; (8002a88 <HAL_I2C_MspInit+0xe8>)
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_I2C_MspInit+0xec>)
 8002a38:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3e:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a40:	2340      	movs	r3, #64	; 0x40
 8002a42:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a4c:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a4e:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a50:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002a52:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a54:	6203      	str	r3, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a56:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002a58:	f000 ff6a 	bl	8003930 <HAL_DMA_Init>
 8002a5c:	b930      	cbnz	r0, 8002a6c <HAL_I2C_MspInit+0xcc>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_I2C_MspInit+0xe8>)
 8002a60:	6363      	str	r3, [r4, #52]	; 0x34
 8002a62:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002a64:	e7a8      	b.n	80029b8 <HAL_I2C_MspInit+0x18>
      Error_Handler();
 8002a66:	f000 f813 	bl	8002a90 <Error_Handler>
 8002a6a:	e7e0      	b.n	8002a2e <HAL_I2C_MspInit+0x8e>
      Error_Handler();
 8002a6c:	f000 f810 	bl	8002a90 <Error_Handler>
 8002a70:	e7f5      	b.n	8002a5e <HAL_I2C_MspInit+0xbe>
 8002a72:	bf00      	nop
 8002a74:	40005400 	.word	0x40005400
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	20001da0 	.word	0x20001da0
 8002a84:	40026010 	.word	0x40026010
 8002a88:	20001cec 	.word	0x20001cec
 8002a8c:	400260a0 	.word	0x400260a0

08002a90 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002a90:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a92:	e7fe      	b.n	8002a92 <Error_Handler+0x2>

08002a94 <SystemClock_Config>:
{
 8002a94:	b500      	push	{lr}
 8002a96:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a98:	2230      	movs	r2, #48	; 0x30
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	a808      	add	r0, sp, #32
 8002a9e:	f004 f907 	bl	8006cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9303      	str	r3, [sp, #12]
 8002aa6:	9304      	str	r3, [sp, #16]
 8002aa8:	9305      	str	r3, [sp, #20]
 8002aaa:	9306      	str	r3, [sp, #24]
 8002aac:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <SystemClock_Config+0x9c>)
 8002ab2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002ab4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002ab8:	6411      	str	r1, [r2, #64]	; 0x40
 8002aba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002abc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002ac0:	9201      	str	r2, [sp, #4]
 8002ac2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac4:	9302      	str	r3, [sp, #8]
 8002ac6:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <SystemClock_Config+0xa0>)
 8002ac8:	6811      	ldr	r1, [r2, #0]
 8002aca:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002ace:	6011      	str	r1, [r2, #0]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002ad6:	9202      	str	r2, [sp, #8]
 8002ad8:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ada:	2202      	movs	r2, #2
 8002adc:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ade:	2101      	movs	r1, #1
 8002ae0:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ae8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002aea:	2308      	movs	r3, #8
 8002aec:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002aee:	23a8      	movs	r3, #168	; 0xa8
 8002af0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002af2:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002af4:	2304      	movs	r3, #4
 8002af6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002af8:	a808      	add	r0, sp, #32
 8002afa:	f002 f8f5 	bl	8004ce8 <HAL_RCC_OscConfig>
 8002afe:	b998      	cbnz	r0, 8002b28 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b00:	230f      	movs	r3, #15
 8002b02:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b04:	2302      	movs	r3, #2
 8002b06:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b10:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b16:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b18:	2105      	movs	r1, #5
 8002b1a:	a803      	add	r0, sp, #12
 8002b1c:	f002 fb30 	bl	8005180 <HAL_RCC_ClockConfig>
 8002b20:	b920      	cbnz	r0, 8002b2c <SystemClock_Config+0x98>
}
 8002b22:	b015      	add	sp, #84	; 0x54
 8002b24:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002b28:	f7ff ffb2 	bl	8002a90 <Error_Handler>
    Error_Handler();
 8002b2c:	f7ff ffb0 	bl	8002a90 <Error_Handler>
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40007000 	.word	0x40007000

08002b38 <main>:
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
  HAL_Init();
 8002b3c:	f000 fdce 	bl	80036dc <HAL_Init>
  SystemClock_Config();
 8002b40:	f7ff ffa8 	bl	8002a94 <SystemClock_Config>
  MX_GPIO_Init();
 8002b44:	f7ff febc 	bl	80028c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b48:	f7ff fe7e 	bl	8002848 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b4c:	f7ff ff0a 	bl	8002964 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002b50:	f000 f992 	bl	8002e78 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002b54:	f000 f918 	bl	8002d88 <MX_TIM1_Init>
	HAL_Delay(200);	//Let the time for the components to start
 8002b58:	20c8      	movs	r0, #200	; 0xc8
 8002b5a:	f000 fdeb 	bl	8003734 <HAL_Delay>
	MPU_init(&sys.sensors.mpu, &hi2c1);
 8002b5e:	4c27      	ldr	r4, [pc, #156]	; (8002bfc <main+0xc4>)
 8002b60:	4927      	ldr	r1, [pc, #156]	; (8002c00 <main+0xc8>)
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7ff fd50 	bl	8002608 <MPU_init>
	HAL_Delay(20);	//Let the time for the components to start
 8002b68:	2014      	movs	r0, #20
 8002b6a:	f000 fde3 	bl	8003734 <HAL_Delay>
	GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu, &sys.ss.z_array[MEASUREMENT_VECTOR_GYRO_Y]);
 8002b6e:	f1a4 05fc 	sub.w	r5, r4, #252	; 0xfc
 8002b72:	f5a4 7217 	sub.w	r2, r4, #604	; 0x25c
 8002b76:	4621      	mov	r1, r4
 8002b78:	4628      	mov	r0, r5
 8002b7a:	f7ff fc45 	bl	8002408 <GYRO_init>
	HAL_Delay(20);	//Let the time for the components to start
 8002b7e:	2014      	movs	r0, #20
 8002b80:	f000 fdd8 	bl	8003734 <HAL_Delay>
	ACC_init(&sys.sensors.acc, &sys.sensors.mpu, &sys.ss.z_array[MEASUREMENT_VECTOR_ANGLE_Y]);
 8002b84:	f1a4 0784 	sub.w	r7, r4, #132	; 0x84
 8002b88:	f5a4 7218 	sub.w	r2, r4, #608	; 0x260
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	4638      	mov	r0, r7
 8002b90:	f7ff fb6e 	bl	8002270 <ACC_init>
	ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_FREQUENCY);
 8002b94:	f104 0674 	add.w	r6, r4, #116	; 0x74
 8002b98:	2364      	movs	r3, #100	; 0x64
 8002b9a:	463a      	mov	r2, r7
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	4630      	mov	r0, r6
 8002ba0:	f7fe fdc6 	bl	8001730 <ORIENTATION_Init>
	TELEMETRY_Init(&sys.telemetry, &huart1);
 8002ba4:	4917      	ldr	r1, [pc, #92]	; (8002c04 <main+0xcc>)
 8002ba6:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
 8002baa:	f000 fc0b 	bl	80033c4 <TELEMETRY_Init>
	DATA_LOGGER_Init(&sys);
 8002bae:	f5a4 7442 	sub.w	r4, r4, #776	; 0x308
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f7fe f974 	bl	8000ea0 <DATA_LOGGER_Init>
	REGULATION_ORIENTATION_Init(&sys.regulation, &sys.orientation, sys.ss.u_array);
 8002bb8:	f104 0598 	add.w	r5, r4, #152	; 0x98
 8002bbc:	462a      	mov	r2, r5
 8002bbe:	4631      	mov	r1, r6
 8002bc0:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
 8002bc4:	f7ff fafa 	bl	80021bc <REGULATION_ORIENTATION_Init>
	HIGH_LVL_Init(&sys);
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7fe fe07 	bl	80017dc <HIGH_LVL_Init>
	MOTORS_Init(&sys.prop.motors, &htim1, sys.ss.u_array, MOTOR_DIRECTION_BIDIRECTIONAL, TRUE);
 8002bce:	2301      	movs	r3, #1
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	462a      	mov	r2, r5
 8002bd4:	490c      	ldr	r1, [pc, #48]	; (8002c08 <main+0xd0>)
 8002bd6:	f504 60b8 	add.w	r0, r4, #1472	; 0x5c0
 8002bda:	f003 fc44 	bl	8006466 <MOTORS_Init>
	MODEL_Init(&sys.ss, &sys.kalman);
 8002bde:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 8002be2:	4620      	mov	r0, r4
 8002be4:	f000 fb12 	bl	800320c <MODEL_Init>
	SCHEDULER_init(&sys);
 8002be8:	4620      	mov	r0, r4
 8002bea:	f7ff f961 	bl	8001eb0 <SCHEDULER_init>
	EVENT_init(&sys);
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f7fe feee 	bl	80019d0 <EVENT_init>
	  SCHEDULER_run();
 8002bf4:	f7ff f964 	bl	8001ec0 <SCHEDULER_run>
  while (1)
 8002bf8:	e7fc      	b.n	8002bf4 <main+0xbc>
 8002bfa:	bf00      	nop
 8002bfc:	20002108 	.word	0x20002108
 8002c00:	20001d4c 	.word	0x20001d4c
 8002c04:	20002838 	.word	0x20002838
 8002c08:	20002730 	.word	0x20002730

08002c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c0c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2100      	movs	r1, #0
 8002c10:	9100      	str	r1, [sp, #0]
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_MspInit+0x34>)
 8002c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
 8002c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c1e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002c22:	9200      	str	r2, [sp, #0]
 8002c24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	9101      	str	r1, [sp, #4]
 8002c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c3a:	b002      	add	sp, #8
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800

08002c44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <NMI_Handler>

08002c46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c46:	e7fe      	b.n	8002c46 <HardFault_Handler>

08002c48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <MemManage_Handler>

08002c4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c4a:	e7fe      	b.n	8002c4a <BusFault_Handler>

08002c4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <UsageFault_Handler>

08002c4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4e:	4770      	bx	lr

08002c50 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c50:	4770      	bx	lr

08002c52 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c52:	4770      	bx	lr

08002c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c56:	f000 fd5b 	bl	8003710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c5a:	bd08      	pop	{r3, pc}

08002c5c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002c5e:	4802      	ldr	r0, [pc, #8]	; (8002c68 <DMA1_Stream0_IRQHandler+0xc>)
 8002c60:	f000 ff5e 	bl	8003b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c64:	bd08      	pop	{r3, pc}
 8002c66:	bf00      	nop
 8002c68:	20001da0 	.word	0x20001da0

08002c6c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002c6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002c6e:	4802      	ldr	r0, [pc, #8]	; (8002c78 <DMA1_Stream6_IRQHandler+0xc>)
 8002c70:	f000 ff56 	bl	8003b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c74:	bd08      	pop	{r3, pc}
 8002c76:	bf00      	nop
 8002c78:	20001cec 	.word	0x20001cec

08002c7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	b082      	sub	sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c80:	4c0a      	ldr	r4, [pc, #40]	; (8002cac <USART1_IRQHandler+0x30>)
 8002c82:	4620      	mov	r0, r4
 8002c84:	f003 fa14 	bl	80060b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)){
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f013 0f10 	tst.w	r3, #16
 8002c90:	d101      	bne.n	8002c96 <USART1_IRQHandler+0x1a>
	  TELEMETRY_Idle_Line_Detection();
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8002c92:	b002      	add	sp, #8
 8002c94:	bd10      	pop	{r4, pc}
	  TELEMETRY_Idle_Line_Detection();
 8002c96:	f000 fcbf 	bl	8003618 <TELEMETRY_Idle_Line_Detection>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	9201      	str	r2, [sp, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	9b01      	ldr	r3, [sp, #4]
}
 8002caa:	e7f2      	b.n	8002c92 <USART1_IRQHandler+0x16>
 8002cac:	20002838 	.word	0x20002838

08002cb0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002cb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002cb2:	4802      	ldr	r0, [pc, #8]	; (8002cbc <DMA2_Stream2_IRQHandler+0xc>)
 8002cb4:	f000 ff34 	bl	8003b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002cb8:	bd08      	pop	{r3, pc}
 8002cba:	bf00      	nop
 8002cbc:	200027d8 	.word	0x200027d8

08002cc0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002cc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002cc2:	4802      	ldr	r0, [pc, #8]	; (8002ccc <DMA2_Stream7_IRQHandler+0xc>)
 8002cc4:	f000 ff2c 	bl	8003b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002cc8:	bd08      	pop	{r3, pc}
 8002cca:	bf00      	nop
 8002ccc:	20002778 	.word	0x20002778

08002cd0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd0:	b508      	push	{r3, lr}
 if(huart == &huart1){
 8002cd2:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_UART_TxCpltCallback+0x10>)
 8002cd4:	4283      	cmp	r3, r0
 8002cd6:	d000      	beq.n	8002cda <HAL_UART_TxCpltCallback+0xa>
	 TELEMETRY_TxCpltCallback();
 }
}
 8002cd8:	bd08      	pop	{r3, pc}
	 TELEMETRY_TxCpltCallback();
 8002cda:	f000 fcab 	bl	8003634 <TELEMETRY_TxCpltCallback>
}
 8002cde:	e7fb      	b.n	8002cd8 <HAL_UART_TxCpltCallback+0x8>
 8002ce0:	20002838 	.word	0x20002838

08002ce4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce4:	4a03      	ldr	r2, [pc, #12]	; (8002cf4 <SystemInit+0x10>)
 8002ce6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8002cf8:	6802      	ldr	r2, [r0, #0]
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_TIM_Base_MspInit+0x28>)
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d000      	beq.n	8002d02 <HAL_TIM_Base_MspInit+0xa>
 8002d00:	4770      	bx	lr
{
 8002d02:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_TIM_Base_MspInit+0x2c>)
 8002d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002d1c:	b002      	add	sp, #8
 8002d1e:	4770      	bx	lr
 8002d20:	40010000 	.word	0x40010000
 8002d24:	40023800 	.word	0x40023800

08002d28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d28:	b500      	push	{lr}
 8002d2a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	9302      	str	r3, [sp, #8]
 8002d32:	9303      	str	r3, [sp, #12]
 8002d34:	9304      	str	r3, [sp, #16]
 8002d36:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8002d38:	6802      	ldr	r2, [r0, #0]
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_TIM_MspPostInit+0x54>)
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d002      	beq.n	8002d46 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d40:	b007      	add	sp, #28
 8002d42:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_TIM_MspPostInit+0x58>)
 8002d4c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d4e:	f041 0110 	orr.w	r1, r1, #16
 8002d52:	6311      	str	r1, [r2, #48]	; 0x30
 8002d54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d56:	f002 0210 	and.w	r2, r2, #16
 8002d5a:	9200      	str	r2, [sp, #0]
 8002d5c:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d62:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2202      	movs	r2, #2
 8002d66:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d70:	a901      	add	r1, sp, #4
 8002d72:	4804      	ldr	r0, [pc, #16]	; (8002d84 <HAL_TIM_MspPostInit+0x5c>)
 8002d74:	f000 ffc4 	bl	8003d00 <HAL_GPIO_Init>
}
 8002d78:	e7e2      	b.n	8002d40 <HAL_TIM_MspPostInit+0x18>
 8002d7a:	bf00      	nop
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40021000 	.word	0x40021000

08002d88 <MX_TIM1_Init>:
{
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d8c:	2400      	movs	r4, #0
 8002d8e:	9412      	str	r4, [sp, #72]	; 0x48
 8002d90:	9413      	str	r4, [sp, #76]	; 0x4c
 8002d92:	9414      	str	r4, [sp, #80]	; 0x50
 8002d94:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d96:	9410      	str	r4, [sp, #64]	; 0x40
 8002d98:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d9a:	9409      	str	r4, [sp, #36]	; 0x24
 8002d9c:	940a      	str	r4, [sp, #40]	; 0x28
 8002d9e:	940b      	str	r4, [sp, #44]	; 0x2c
 8002da0:	940c      	str	r4, [sp, #48]	; 0x30
 8002da2:	940d      	str	r4, [sp, #52]	; 0x34
 8002da4:	940e      	str	r4, [sp, #56]	; 0x38
 8002da6:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002da8:	2220      	movs	r2, #32
 8002daa:	4621      	mov	r1, r4
 8002dac:	a801      	add	r0, sp, #4
 8002dae:	f003 ff7f 	bl	8006cb0 <memset>
  htim1.Instance = TIM1;
 8002db2:	482f      	ldr	r0, [pc, #188]	; (8002e70 <MX_TIM1_Init+0xe8>)
 8002db4:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <MX_TIM1_Init+0xec>)
 8002db6:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 167;
 8002db8:	23a7      	movs	r3, #167	; 0xa7
 8002dba:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbc:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 3999;
 8002dbe:	f640 739f 	movw	r3, #3999	; 0xf9f
 8002dc2:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc4:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dc6:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dcc:	f002 fbd4 	bl	8005578 <HAL_TIM_Base_Init>
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d13a      	bne.n	8002e4a <MX_TIM1_Init+0xc2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd8:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dda:	a912      	add	r1, sp, #72	; 0x48
 8002ddc:	4824      	ldr	r0, [pc, #144]	; (8002e70 <MX_TIM1_Init+0xe8>)
 8002dde:	f002 fccf 	bl	8005780 <HAL_TIM_ConfigClockSource>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d134      	bne.n	8002e50 <MX_TIM1_Init+0xc8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002de6:	4822      	ldr	r0, [pc, #136]	; (8002e70 <MX_TIM1_Init+0xe8>)
 8002de8:	f002 fbf2 	bl	80055d0 <HAL_TIM_PWM_Init>
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d132      	bne.n	8002e56 <MX_TIM1_Init+0xce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df0:	2300      	movs	r3, #0
 8002df2:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df4:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002df6:	a910      	add	r1, sp, #64	; 0x40
 8002df8:	481d      	ldr	r0, [pc, #116]	; (8002e70 <MX_TIM1_Init+0xe8>)
 8002dfa:	f002 fdc3 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d12c      	bne.n	8002e5c <MX_TIM1_Init+0xd4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e02:	2360      	movs	r3, #96	; 0x60
 8002e04:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 999;
 8002e06:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002e0a:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e10:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e12:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e14:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e16:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e18:	a909      	add	r1, sp, #36	; 0x24
 8002e1a:	4815      	ldr	r0, [pc, #84]	; (8002e70 <MX_TIM1_Init+0xe8>)
 8002e1c:	f002 fc3c 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8002e20:	b9f8      	cbnz	r0, 8002e62 <MX_TIM1_Init+0xda>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e26:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e28:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e2a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e2c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e32:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e34:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e36:	a901      	add	r1, sp, #4
 8002e38:	480d      	ldr	r0, [pc, #52]	; (8002e70 <MX_TIM1_Init+0xe8>)
 8002e3a:	f002 fde7 	bl	8005a0c <HAL_TIMEx_ConfigBreakDeadTime>
 8002e3e:	b998      	cbnz	r0, 8002e68 <MX_TIM1_Init+0xe0>
  HAL_TIM_MspPostInit(&htim1);
 8002e40:	480b      	ldr	r0, [pc, #44]	; (8002e70 <MX_TIM1_Init+0xe8>)
 8002e42:	f7ff ff71 	bl	8002d28 <HAL_TIM_MspPostInit>
}
 8002e46:	b016      	add	sp, #88	; 0x58
 8002e48:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002e4a:	f7ff fe21 	bl	8002a90 <Error_Handler>
 8002e4e:	e7c1      	b.n	8002dd4 <MX_TIM1_Init+0x4c>
    Error_Handler();
 8002e50:	f7ff fe1e 	bl	8002a90 <Error_Handler>
 8002e54:	e7c7      	b.n	8002de6 <MX_TIM1_Init+0x5e>
    Error_Handler();
 8002e56:	f7ff fe1b 	bl	8002a90 <Error_Handler>
 8002e5a:	e7c9      	b.n	8002df0 <MX_TIM1_Init+0x68>
    Error_Handler();
 8002e5c:	f7ff fe18 	bl	8002a90 <Error_Handler>
 8002e60:	e7cf      	b.n	8002e02 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8002e62:	f7ff fe15 	bl	8002a90 <Error_Handler>
 8002e66:	e7dc      	b.n	8002e22 <MX_TIM1_Init+0x9a>
    Error_Handler();
 8002e68:	f7ff fe12 	bl	8002a90 <Error_Handler>
 8002e6c:	e7e8      	b.n	8002e40 <MX_TIM1_Init+0xb8>
 8002e6e:	bf00      	nop
 8002e70:	20002730 	.word	0x20002730
 8002e74:	40010000 	.word	0x40010000

08002e78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e78:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e7a:	480a      	ldr	r0, [pc, #40]	; (8002ea4 <MX_USART1_UART_Init+0x2c>)
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <MX_USART1_UART_Init+0x30>)
 8002e7e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 500000;
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <MX_USART1_UART_Init+0x34>)
 8002e82:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e84:	2300      	movs	r3, #0
 8002e86:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e88:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e8a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	220c      	movs	r2, #12
 8002e8e:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e90:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e92:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e94:	f002 fef8 	bl	8005c88 <HAL_UART_Init>
 8002e98:	b900      	cbnz	r0, 8002e9c <MX_USART1_UART_Init+0x24>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e9a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002e9c:	f7ff fdf8 	bl	8002a90 <Error_Handler>
}
 8002ea0:	e7fb      	b.n	8002e9a <MX_USART1_UART_Init+0x22>
 8002ea2:	bf00      	nop
 8002ea4:	20002838 	.word	0x20002838
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	0007a120 	.word	0x0007a120

08002eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002eb0:	b530      	push	{r4, r5, lr}
 8002eb2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9303      	str	r3, [sp, #12]
 8002eb8:	9304      	str	r3, [sp, #16]
 8002eba:	9305      	str	r3, [sp, #20]
 8002ebc:	9306      	str	r3, [sp, #24]
 8002ebe:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8002ec0:	6802      	ldr	r2, [r0, #0]
 8002ec2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ec6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ece:	b009      	add	sp, #36	; 0x24
 8002ed0:	bd30      	pop	{r4, r5, pc}
 8002ed2:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ed4:	2500      	movs	r5, #0
 8002ed6:	9501      	str	r5, [sp, #4]
 8002ed8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ede:	f042 0210 	orr.w	r2, r2, #16
 8002ee2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ee6:	f002 0210 	and.w	r2, r2, #16
 8002eea:	9201      	str	r2, [sp, #4]
 8002eec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	9502      	str	r5, [sp, #8]
 8002ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef2:	f042 0202 	orr.w	r2, r2, #2
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	9302      	str	r3, [sp, #8]
 8002f00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f02:	23c0      	movs	r3, #192	; 0xc0
 8002f04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f10:	2307      	movs	r3, #7
 8002f12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f14:	a903      	add	r1, sp, #12
 8002f16:	4821      	ldr	r0, [pc, #132]	; (8002f9c <HAL_UART_MspInit+0xec>)
 8002f18:	f000 fef2 	bl	8003d00 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002f1c:	4820      	ldr	r0, [pc, #128]	; (8002fa0 <HAL_UART_MspInit+0xf0>)
 8002f1e:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <HAL_UART_MspInit+0xf4>)
 8002f20:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002f22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f26:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f28:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2a:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f30:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f32:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f34:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3a:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f3c:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f3e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f40:	f000 fcf6 	bl	8003930 <HAL_DMA_Init>
 8002f44:	bb18      	cbnz	r0, 8002f8e <HAL_UART_MspInit+0xde>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <HAL_UART_MspInit+0xf0>)
 8002f48:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f4a:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002f4c:	4816      	ldr	r0, [pc, #88]	; (8002fa8 <HAL_UART_MspInit+0xf8>)
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <HAL_UART_MspInit+0xfc>)
 8002f50:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002f52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f56:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f58:	2340      	movs	r3, #64	; 0x40
 8002f5a:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f64:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f66:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f68:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f6a:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f6c:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f6e:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f70:	f000 fcde 	bl	8003930 <HAL_DMA_Init>
 8002f74:	b970      	cbnz	r0, 8002f94 <HAL_UART_MspInit+0xe4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <HAL_UART_MspInit+0xf8>)
 8002f78:	6363      	str	r3, [r4, #52]	; 0x34
 8002f7a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	4611      	mov	r1, r2
 8002f80:	2025      	movs	r0, #37	; 0x25
 8002f82:	f000 fbfd 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f86:	2025      	movs	r0, #37	; 0x25
 8002f88:	f000 fc2e 	bl	80037e8 <HAL_NVIC_EnableIRQ>
}
 8002f8c:	e79f      	b.n	8002ece <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8002f8e:	f7ff fd7f 	bl	8002a90 <Error_Handler>
 8002f92:	e7d8      	b.n	8002f46 <HAL_UART_MspInit+0x96>
      Error_Handler();
 8002f94:	f7ff fd7c 	bl	8002a90 <Error_Handler>
 8002f98:	e7ed      	b.n	8002f76 <HAL_UART_MspInit+0xc6>
 8002f9a:	bf00      	nop
 8002f9c:	40020400 	.word	0x40020400
 8002fa0:	200027d8 	.word	0x200027d8
 8002fa4:	40026440 	.word	0x40026440
 8002fa8:	20002778 	.word	0x20002778
 8002fac:	400264b8 	.word	0x400264b8

08002fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fe8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fb6:	e003      	b.n	8002fc0 <LoopCopyDataInit>

08002fb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fbe:	3104      	adds	r1, #4

08002fc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fc0:	480b      	ldr	r0, [pc, #44]	; (8002ff0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fc8:	d3f6      	bcc.n	8002fb8 <CopyDataInit>
  ldr  r2, =_sbss
 8002fca:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fcc:	e002      	b.n	8002fd4 <LoopFillZerobss>

08002fce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fd0:	f842 3b04 	str.w	r3, [r2], #4

08002fd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fd8:	d3f9      	bcc.n	8002fce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fda:	f7ff fe83 	bl	8002ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fde:	f003 fe1b 	bl	8006c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fe2:	f7ff fda9 	bl	8002b38 <main>
  bx  lr    
 8002fe6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fe8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002fec:	08009ffc 	.word	0x08009ffc
  ldr  r0, =_sdata
 8002ff0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ff4:	20001910 	.word	0x20001910
  ldr  r2, =_sbss
 8002ff8:	20001910 	.word	0x20001910
  ldr  r3, = _ebss
 8002ffc:	20002890 	.word	0x20002890

08003000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003000:	e7fe      	b.n	8003000 <ADC_IRQHandler>

08003002 <KALMAN_Init>:
 */

#include "Kalman.h"


kalman_state_e KALMAN_Init(kalman_t *kalman, State_Space_Model_t * ss ,arm_matrix_instance_f32 * P_predict, arm_matrix_instance_f32 * Q, arm_matrix_instance_f32 * R){
 8003002:	b538      	push	{r3, r4, r5, lr}
 8003004:	4604      	mov	r4, r0
 8003006:	460d      	mov	r5, r1

	kalman->ss = ss;
 8003008:	6001      	str	r1, [r0, #0]
	//Covariance
	kalman->Q = Q;
 800300a:	6703      	str	r3, [r0, #112]	; 0x70
	kalman->R = R;
 800300c:	9b04      	ldr	r3, [sp, #16]
 800300e:	6743      	str	r3, [r0, #116]	; 0x74
	kalman->P_predict = P_predict;
 8003010:	66c2      	str	r2, [r0, #108]	; 0x6c

	//X predict
	arm_mat_init_f32(&kalman->x_predict, ss->x_size, 1, kalman->x_predict_array);
 8003012:	f100 0320 	add.w	r3, r0, #32
 8003016:	2201      	movs	r2, #1
 8003018:	7809      	ldrb	r1, [r1, #0]
 800301a:	3018      	adds	r0, #24
 800301c:	f003 fd98 	bl	8006b50 <arm_mat_init_f32>
	for(uint8_t i =0; i > ss->x_size; i++)
		kalman->x_predict.pData[i] = ss->x.pData[i];

	//X predict tmp
	arm_mat_init_f32(&kalman->x_predict_tmp, ss->x_size, 1, kalman->x_predict_tmp_array);
 8003020:	f104 030c 	add.w	r3, r4, #12
 8003024:	2201      	movs	r2, #1
 8003026:	7829      	ldrb	r1, [r5, #0]
 8003028:	1d20      	adds	r0, r4, #4
 800302a:	f003 fd91 	bl	8006b50 <arm_mat_init_f32>

	arm_mat_init_f32(&kalman->inovation, ss->z_size, 1, kalman->inovation_array);
 800302e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003032:	2201      	movs	r2, #1
 8003034:	78a9      	ldrb	r1, [r5, #2]
 8003036:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800303a:	f003 fd89 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->S, ss->z_size, ss->z_size, kalman->S_array);
 800303e:	78a9      	ldrb	r1, [r5, #2]
 8003040:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8003044:	460a      	mov	r2, r1
 8003046:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800304a:	f003 fd81 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->S_inversed, ss->z_size, ss->z_size, kalman->S_inversed_array);
 800304e:	78a9      	ldrb	r1, [r5, #2]
 8003050:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8003054:	460a      	mov	r2, r1
 8003056:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 800305a:	f003 fd79 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->S_tmp, ss->z_size, ss->x_size, kalman->S_tmp_array);
 800305e:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
 8003062:	782a      	ldrb	r2, [r5, #0]
 8003064:	78a9      	ldrb	r1, [r5, #2]
 8003066:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800306a:	f003 fd71 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman->P, ss->x_size, ss->x_size, kalman->P_array);
 800306e:	7829      	ldrb	r1, [r5, #0]
 8003070:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8003074:	460a      	mov	r2, r1
 8003076:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800307a:	f003 fd69 	bl	8006b50 <arm_mat_init_f32>

	//Kalman gain
	arm_mat_init_f32(&kalman->K, ss->x_size, ss->z_size, kalman->K_array);
 800307e:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8003082:	78aa      	ldrb	r2, [r5, #2]
 8003084:	7829      	ldrb	r1, [r5, #0]
 8003086:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 800308a:	f003 fd61 	bl	8006b50 <arm_mat_init_f32>

	//Identity matrix
	arm_mat_init_f32(&kalman->I_n, ss->x_size, ss->x_size, kalman->I_n_array);
 800308e:	7829      	ldrb	r1, [r5, #0]
 8003090:	f504 7398 	add.w	r3, r4, #304	; 0x130
 8003094:	460a      	mov	r2, r1
 8003096:	f504 7094 	add.w	r0, r4, #296	; 0x128
 800309a:	f003 fd59 	bl	8006b50 <arm_mat_init_f32>
	for(uint8_t i = 0; i < ss->x_size; i++)
 800309e:	2300      	movs	r3, #0
 80030a0:	782a      	ldrb	r2, [r5, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d90b      	bls.n	80030be <KALMAN_Init+0xbc>
		kalman->I_n.pData[i+i*ss->x_size] = 1;
 80030a6:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80030aa:	fb02 3203 	mla	r2, r2, r3, r3
 80030ae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80030b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80030b6:	6011      	str	r1, [r2, #0]
	for(uint8_t i = 0; i < ss->x_size; i++)
 80030b8:	3301      	adds	r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	e7f0      	b.n	80030a0 <KALMAN_Init+0x9e>

	kalman->state = KALMAN_OK;
 80030be:	2002      	movs	r0, #2
 80030c0:	f884 0154 	strb.w	r0, [r4, #340]	; 0x154

	return KALMAN_OK ;
}
 80030c4:	bd38      	pop	{r3, r4, r5, pc}

080030c6 <KALMAN_Update>:

kalman_state_e KALMAN_Update(kalman_t * kalman){
 80030c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ca:	4604      	mov	r4, r0

	//	---------------	Update ----------------

	State_Space_Model_t * ss = kalman->ss ;
 80030cc:	4607      	mov	r7, r0
 80030ce:	f857 5b18 	ldr.w	r5, [r7], #24


	//Inovation
	kalman->arm_result = arm_mat_mult_f32(ss->H, &kalman->x_predict, &kalman->inovation);
 80030d2:	f100 082c 	add.w	r8, r0, #44	; 0x2c
 80030d6:	4642      	mov	r2, r8
 80030d8:	4639      	mov	r1, r7
 80030da:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80030dc:	f003 fb42 	bl	8006764 <arm_mat_mult_f32>
 80030e0:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
	kalman->arm_result = arm_mat_sub_f32(&ss->z, &kalman->inovation, &kalman->inovation);
 80030e4:	4642      	mov	r2, r8
 80030e6:	4641      	mov	r1, r8
 80030e8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80030ec:	f003 fae0 	bl	80066b0 <arm_mat_sub_f32>
 80030f0:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155

	//Covariance innovation
	kalman->arm_result = arm_mat_mult_f32(ss->H, kalman->P_predict, &kalman->S_tmp);
 80030f4:	f104 09d0 	add.w	r9, r4, #208	; 0xd0
 80030f8:	464a      	mov	r2, r9
 80030fa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80030fc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80030fe:	f003 fb31 	bl	8006764 <arm_mat_mult_f32>
 8003102:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
	kalman->arm_result = arm_mat_mult_f32(&kalman->S_tmp, &ss->H_trans, &kalman->S);
 8003106:	f105 0a3c 	add.w	sl, r5, #60	; 0x3c
 800310a:	f104 0678 	add.w	r6, r4, #120	; 0x78
 800310e:	4632      	mov	r2, r6
 8003110:	4651      	mov	r1, sl
 8003112:	4648      	mov	r0, r9
 8003114:	f003 fb26 	bl	8006764 <arm_mat_mult_f32>
 8003118:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
	kalman->arm_result = arm_mat_add_f32(&kalman->S, kalman->R, &kalman->S);
 800311c:	4632      	mov	r2, r6
 800311e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003120:	4630      	mov	r0, r6
 8003122:	f003 fd19 	bl	8006b58 <arm_mat_add_f32>
 8003126:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
	kalman->arm_result = arm_mat_inverse_f32(&kalman->S, &kalman->S_inversed);
 800312a:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
 800312e:	4649      	mov	r1, r9
 8003130:	4630      	mov	r0, r6
 8003132:	f003 fbbd 	bl	80068b0 <arm_mat_inverse_f32>
 8003136:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155

	//Kalman gain
	kalman->arm_result = arm_mat_mult_f32(kalman->P_predict, &ss->H_trans, &kalman->K);
 800313a:	f104 06fc 	add.w	r6, r4, #252	; 0xfc
 800313e:	4632      	mov	r2, r6
 8003140:	4651      	mov	r1, sl
 8003142:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003144:	f003 fb0e 	bl	8006764 <arm_mat_mult_f32>
 8003148:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
	kalman->arm_result = arm_mat_mult_f32(&kalman->K, &kalman->S_inversed, &kalman->K);
 800314c:	4632      	mov	r2, r6
 800314e:	4649      	mov	r1, r9
 8003150:	4630      	mov	r0, r6
 8003152:	f003 fb07 	bl	8006764 <arm_mat_mult_f32>
 8003156:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155

	//State update
	kalman->arm_result = arm_mat_mult_f32(&kalman->K, &kalman->inovation, &ss->x);
 800315a:	357c      	adds	r5, #124	; 0x7c
 800315c:	462a      	mov	r2, r5
 800315e:	4641      	mov	r1, r8
 8003160:	4630      	mov	r0, r6
 8003162:	f003 faff 	bl	8006764 <arm_mat_mult_f32>
 8003166:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
	kalman->arm_result = arm_mat_add_f32(&kalman->x_predict, &ss->x, &ss->x);
 800316a:	462a      	mov	r2, r5
 800316c:	4629      	mov	r1, r5
 800316e:	4638      	mov	r0, r7
 8003170:	f003 fcf2 	bl	8006b58 <arm_mat_add_f32>
 8003174:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155

	//Covariance update
	kalman->arm_result = arm_mat_mult_f32(&kalman->K, kalman->ss->H, &kalman->P);
 8003178:	4625      	mov	r5, r4
 800317a:	f855 3b40 	ldr.w	r3, [r5], #64
 800317e:	462a      	mov	r2, r5
 8003180:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003182:	4630      	mov	r0, r6
 8003184:	f003 faee 	bl	8006764 <arm_mat_mult_f32>
 8003188:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
	kalman->arm_result = arm_mat_sub_f32(&kalman->I_n, &kalman->P, &kalman->P);
 800318c:	462a      	mov	r2, r5
 800318e:	4629      	mov	r1, r5
 8003190:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8003194:	f003 fa8c 	bl	80066b0 <arm_mat_sub_f32>
 8003198:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155
	kalman->arm_result = arm_mat_mult_f32(&kalman->P, kalman->P_predict, &kalman->P);
 800319c:	462a      	mov	r2, r5
 800319e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80031a0:	4628      	mov	r0, r5
 80031a2:	f003 fadf 	bl	8006764 <arm_mat_mult_f32>
 80031a6:	f884 0155 	strb.w	r0, [r4, #341]	; 0x155

	return KALMAN_OK;
}
 80031aa:	2002      	movs	r0, #2
 80031ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080031b0 <KALMAN_Predict>:

kalman_state_e KALMAN_Predict(kalman_t * kalman){
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	4604      	mov	r4, r0

	//Predict next state
	arm_mat_mult_f32(kalman->ss->B, &kalman->ss->u, &kalman->x_predict_tmp);
 80031b4:	4606      	mov	r6, r0
 80031b6:	f856 3b04 	ldr.w	r3, [r6], #4
 80031ba:	4632      	mov	r2, r6
 80031bc:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80031c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80031c2:	f003 facf 	bl	8006764 <arm_mat_mult_f32>
	arm_mat_mult_f32(kalman->ss->F, &kalman->ss->x, &kalman->x_predict);
 80031c6:	4625      	mov	r5, r4
 80031c8:	f855 3b18 	ldr.w	r3, [r5], #24
 80031cc:	462a      	mov	r2, r5
 80031ce:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 80031d2:	6858      	ldr	r0, [r3, #4]
 80031d4:	f003 fac6 	bl	8006764 <arm_mat_mult_f32>
	arm_mat_add_f32(&kalman->x_predict_tmp, &kalman->x_predict, &kalman->x_predict);
 80031d8:	462a      	mov	r2, r5
 80031da:	4629      	mov	r1, r5
 80031dc:	4630      	mov	r0, r6
 80031de:	f003 fcbb 	bl	8006b58 <arm_mat_add_f32>

	//Predict next estimation covariance
	arm_mat_mult_f32(kalman->ss->F, &kalman->P, kalman->P_predict);
 80031e2:	4621      	mov	r1, r4
 80031e4:	f851 3b40 	ldr.w	r3, [r1], #64
 80031e8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80031ea:	6858      	ldr	r0, [r3, #4]
 80031ec:	f003 faba 	bl	8006764 <arm_mat_mult_f32>
	arm_mat_mult_f32(kalman->P_predict, &kalman->ss->F_trans, kalman->P_predict);
 80031f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80031f2:	6821      	ldr	r1, [r4, #0]
 80031f4:	4602      	mov	r2, r0
 80031f6:	3108      	adds	r1, #8
 80031f8:	f003 fab4 	bl	8006764 <arm_mat_mult_f32>
	arm_mat_add_f32(kalman->P_predict, kalman->Q, kalman->P_predict);
 80031fc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80031fe:	4602      	mov	r2, r0
 8003200:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003202:	f003 fca9 	bl	8006b58 <arm_mat_add_f32>

	return KALMAN_OK ;
}
 8003206:	2002      	movs	r0, #2
 8003208:	bd70      	pop	{r4, r5, r6, pc}
	...

0800320c <MODEL_Init>:
		1, 0,
		0, 1};


void MODEL_Init(State_Space_Model_t * ss, kalman_t * kalman)
{
 800320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	4604      	mov	r4, r0
 8003214:	460d      	mov	r5, r1
	//State space model Init
	arm_mat_init_f32(&F, X_SIZE, X_SIZE, F_array);
 8003216:	4e20      	ldr	r6, [pc, #128]	; (8003298 <MODEL_Init+0x8c>)
 8003218:	4b20      	ldr	r3, [pc, #128]	; (800329c <MODEL_Init+0x90>)
 800321a:	2202      	movs	r2, #2
 800321c:	4611      	mov	r1, r2
 800321e:	4630      	mov	r0, r6
 8003220:	f003 fc96 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_init_f32(&B, X_SIZE, U_SIZE, B_array);
 8003224:	4f1e      	ldr	r7, [pc, #120]	; (80032a0 <MODEL_Init+0x94>)
 8003226:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <MODEL_Init+0x98>)
 8003228:	2201      	movs	r2, #1
 800322a:	2102      	movs	r1, #2
 800322c:	4638      	mov	r0, r7
 800322e:	f003 fc8f 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_init_f32(&H, Z_SIZE, X_SIZE, H_array);
 8003232:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80032c4 <MODEL_Init+0xb8>
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <MODEL_Init+0x9c>)
 8003238:	2202      	movs	r2, #2
 800323a:	4611      	mov	r1, r2
 800323c:	4640      	mov	r0, r8
 800323e:	f003 fc87 	bl	8006b50 <arm_mat_init_f32>
	STATE_SPACE_MODEL_Init(ss, &F, &B, &H);
 8003242:	4643      	mov	r3, r8
 8003244:	463a      	mov	r2, r7
 8003246:	4631      	mov	r1, r6
 8003248:	4620      	mov	r0, r4
 800324a:	f000 f83f 	bl	80032cc <STATE_SPACE_MODEL_Init>
	STATE_SPACE_MODEL_Set_x0(ss, x0);
 800324e:	4917      	ldr	r1, [pc, #92]	; (80032ac <MODEL_Init+0xa0>)
 8003250:	4620      	mov	r0, r4
 8003252:	f000 f883 	bl	800335c <STATE_SPACE_MODEL_Set_x0>

	//Kalman filter Init
	arm_mat_init_f32(&R, Z_SIZE, Z_SIZE, R_array);
 8003256:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80032c8 <MODEL_Init+0xbc>
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <MODEL_Init+0xa4>)
 800325c:	2202      	movs	r2, #2
 800325e:	4611      	mov	r1, r2
 8003260:	4640      	mov	r0, r8
 8003262:	f003 fc75 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_init_f32(&Q, X_SIZE, X_SIZE, Q_array);
 8003266:	4f13      	ldr	r7, [pc, #76]	; (80032b4 <MODEL_Init+0xa8>)
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <MODEL_Init+0xac>)
 800326a:	2202      	movs	r2, #2
 800326c:	4611      	mov	r1, r2
 800326e:	4638      	mov	r0, r7
 8003270:	f003 fc6e 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_init_f32(&P_predict, X_SIZE, X_SIZE, P_array);
 8003274:	4e11      	ldr	r6, [pc, #68]	; (80032bc <MODEL_Init+0xb0>)
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <MODEL_Init+0xb4>)
 8003278:	2202      	movs	r2, #2
 800327a:	4611      	mov	r1, r2
 800327c:	4630      	mov	r0, r6
 800327e:	f003 fc67 	bl	8006b50 <arm_mat_init_f32>
	KALMAN_Init(kalman, ss, &P_predict, &Q, &R);
 8003282:	f8cd 8000 	str.w	r8, [sp]
 8003286:	463b      	mov	r3, r7
 8003288:	4632      	mov	r2, r6
 800328a:	4621      	mov	r1, r4
 800328c:	4628      	mov	r0, r5
 800328e:	f7ff feb8 	bl	8003002 <KALMAN_Init>
	//KALMAN_Predict(kalman);
}
 8003292:	b002      	add	sp, #8
 8003294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003298:	20001ca4 	.word	0x20001ca4
 800329c:	200016d0 	.word	0x200016d0
 80032a0:	20001c9c 	.word	0x20001c9c
 80032a4:	200016c8 	.word	0x200016c8
 80032a8:	200016e0 	.word	0x200016e0
 80032ac:	20001ccc 	.word	0x20001ccc
 80032b0:	20001710 	.word	0x20001710
 80032b4:	20001cbc 	.word	0x20001cbc
 80032b8:	20001700 	.word	0x20001700
 80032bc:	20001cb4 	.word	0x20001cb4
 80032c0:	200016f0 	.word	0x200016f0
 80032c4:	20001cac 	.word	0x20001cac
 80032c8:	20001cc4 	.word	0x20001cc4

080032cc <STATE_SPACE_MODEL_Init>:


#include "State_Space_Model.h"

void STATE_SPACE_MODEL_Init(State_Space_Model_t * ss_model, arm_matrix_instance_f32 * F,arm_matrix_instance_f32 * B, arm_matrix_instance_f32 * H)
{
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	4604      	mov	r4, r0
 80032d0:	4616      	mov	r6, r2
 80032d2:	461d      	mov	r5, r3
	//Dimensions
	ss_model->x_size = F->numCols;
 80032d4:	788b      	ldrb	r3, [r1, #2]
 80032d6:	7003      	strb	r3, [r0, #0]
	ss_model->u_size = B->numCols;
 80032d8:	8852      	ldrh	r2, [r2, #2]
 80032da:	7042      	strb	r2, [r0, #1]
	ss_model->z_size = H->numRows;
 80032dc:	882a      	ldrh	r2, [r5, #0]
 80032de:	7082      	strb	r2, [r0, #2]

	//State space matricies init
	ss_model->F = F;
 80032e0:	6041      	str	r1, [r0, #4]
	arm_mat_init_f32(&ss_model->F_trans, ss_model->x_size, ss_model->x_size, ss_model->F_trans_array);
 80032e2:	f100 0708 	add.w	r7, r0, #8
 80032e6:	b299      	uxth	r1, r3
 80032e8:	f100 0310 	add.w	r3, r0, #16
 80032ec:	460a      	mov	r2, r1
 80032ee:	4638      	mov	r0, r7
 80032f0:	f003 fc2e 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_trans_f32(ss_model->F, &ss_model->F_trans);
 80032f4:	4639      	mov	r1, r7
 80032f6:	6860      	ldr	r0, [r4, #4]
 80032f8:	f003 f966 	bl	80065c8 <arm_mat_trans_f32>

	ss_model->B = B;
 80032fc:	6366      	str	r6, [r4, #52]	; 0x34
	ss_model->H = H;
 80032fe:	63a5      	str	r5, [r4, #56]	; 0x38

	//H transposed init and calcul
	arm_mat_init_f32(&ss_model->H_trans, H->numCols, H->numRows, ss_model->H_trans_array);
 8003300:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8003304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003308:	882a      	ldrh	r2, [r5, #0]
 800330a:	8869      	ldrh	r1, [r5, #2]
 800330c:	4630      	mov	r0, r6
 800330e:	f003 fc1f 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_trans_f32(H, &ss_model->H_trans);
 8003312:	4631      	mov	r1, r6
 8003314:	4628      	mov	r0, r5
 8003316:	f003 f957 	bl	80065c8 <arm_mat_trans_f32>

	//x & x_tmp vector init
	arm_mat_init_f32(&ss_model->x, ss_model->x_size, 1, ss_model->x_array);
 800331a:	4623      	mov	r3, r4
 800331c:	f813 1b84 	ldrb.w	r1, [r3], #132
 8003320:	2201      	movs	r2, #1
 8003322:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8003326:	f003 fc13 	bl	8006b50 <arm_mat_init_f32>
	arm_mat_init_f32(&ss_model->x_tmp, ss_model->x_size, 1, ss_model->x_tmp_array);
 800332a:	4623      	mov	r3, r4
 800332c:	f813 1b70 	ldrb.w	r1, [r3], #112
 8003330:	2201      	movs	r2, #1
 8003332:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003336:	f003 fc0b 	bl	8006b50 <arm_mat_init_f32>

	//u vector init
	arm_mat_init_f32(&ss_model->u, ss_model->u_size, 1, ss_model->u_array);
 800333a:	f104 0398 	add.w	r3, r4, #152	; 0x98
 800333e:	2201      	movs	r2, #1
 8003340:	7861      	ldrb	r1, [r4, #1]
 8003342:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8003346:	f003 fc03 	bl	8006b50 <arm_mat_init_f32>

	//z vector init
	arm_mat_init_f32(&ss_model->z, ss_model->z_size, 1, ss_model->z_array);
 800334a:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 800334e:	2201      	movs	r2, #1
 8003350:	78a1      	ldrb	r1, [r4, #2]
 8003352:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 8003356:	f003 fbfb 	bl	8006b50 <arm_mat_init_f32>
}
 800335a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800335c <STATE_SPACE_MODEL_Set_x0>:

void STATE_SPACE_MODEL_Set_x0(State_Space_Model_t * ss_model, float * x_values)
{
	for(uint8_t x = 0; x < ss_model->x_size; x++)
 800335c:	2300      	movs	r3, #0
 800335e:	7802      	ldrb	r2, [r0, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d910      	bls.n	8003386 <STATE_SPACE_MODEL_Set_x0+0x2a>
{
 8003364:	b410      	push	{r4}
		ss_model->x_array[x] = x_values[x];
 8003366:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800336a:	6814      	ldr	r4, [r2, #0]
 800336c:	f103 0220 	add.w	r2, r3, #32
 8003370:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003374:	6054      	str	r4, [r2, #4]
	for(uint8_t x = 0; x < ss_model->x_size; x++)
 8003376:	3301      	adds	r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	7802      	ldrb	r2, [r0, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d8f2      	bhi.n	8003366 <STATE_SPACE_MODEL_Set_x0+0xa>
}
 8003380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	4770      	bx	lr

08003388 <get_nb_bytes_available>:

//Private function to know the number of bytes available
uint16_t get_nb_bytes_available(telemetry_t * telem);
uint16_t get_nb_bytes_available(telemetry_t * telem){
	uint16_t nb = 0 ;
	if(telem->index_write_rx > telem->index_read_rx){
 8003388:	f8b0 3340 	ldrh.w	r3, [r0, #832]	; 0x340
 800338c:	b29b      	uxth	r3, r3
 800338e:	f8b0 2342 	ldrh.w	r2, [r0, #834]	; 0x342
 8003392:	4293      	cmp	r3, r2
 8003394:	d905      	bls.n	80033a2 <get_nb_bytes_available+0x1a>
		nb = telem->index_write_rx - telem->index_read_rx ;
 8003396:	f8b0 0340 	ldrh.w	r0, [r0, #832]	; 0x340
 800339a:	b280      	uxth	r0, r0
 800339c:	1a80      	subs	r0, r0, r2
 800339e:	b280      	uxth	r0, r0
 80033a0:	4770      	bx	lr
	}
	else if(telem->index_write_rx < telem->index_read_rx){
 80033a2:	f8b0 3340 	ldrh.w	r3, [r0, #832]	; 0x340
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d908      	bls.n	80033be <get_nb_bytes_available+0x36>
		nb = LEN_RX_BUFFER - telem->index_read_rx + telem->index_write_rx ;
 80033ac:	f8b0 0340 	ldrh.w	r0, [r0, #832]	; 0x340
 80033b0:	b280      	uxth	r0, r0
 80033b2:	1a80      	subs	r0, r0, r2
 80033b4:	b280      	uxth	r0, r0
 80033b6:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80033ba:	b280      	uxth	r0, r0
 80033bc:	4770      	bx	lr
	uint16_t nb = 0 ;
 80033be:	2000      	movs	r0, #0
	}
	return nb;
}
 80033c0:	4770      	bx	lr
	...

080033c4 <TELEMETRY_Init>:

void TELEMETRY_Init(telemetry_t * telem_, UART_HandleTypeDef * huart)
{
 80033c4:	b510      	push	{r4, lr}
 80033c6:	4603      	mov	r3, r0
 80033c8:	4608      	mov	r0, r1
	telem = telem_ ;
 80033ca:	4c0b      	ldr	r4, [pc, #44]	; (80033f8 <TELEMETRY_Init+0x34>)
 80033cc:	6023      	str	r3, [r4, #0]
	telem->huart = huart ;
 80033ce:	6019      	str	r1, [r3, #0]

	//On envoit un premier message qui sert sutout à éviter que les premiers octet utiles soient perdu
	static uint8_t hey_msg[] = "Hey it s me Theo...\n";
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 80033d0:	2214      	movs	r2, #20
 80033d2:	490a      	ldr	r1, [pc, #40]	; (80033fc <TELEMETRY_Init+0x38>)
 80033d4:	f002 fd66 	bl	8005ea4 <HAL_UART_Transmit_DMA>

	//Activation de l'it "idle" qui préviendra de la fin de la récéption d'un message
	__HAL_UART_ENABLE_IT(telem->huart, UART_IT_IDLE);
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	6811      	ldr	r1, [r2, #0]
 80033de:	68ca      	ldr	r2, [r1, #12]
 80033e0:	f042 0210 	orr.w	r2, r2, #16
 80033e4:	60ca      	str	r2, [r1, #12]
	//On lance la récéption en DMA
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 80033e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ea:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	f002 ffda 	bl	80063a8 <HAL_UART_Receive_DMA>
}
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	bf00      	nop
 80033f8:	20001cd4 	.word	0x20001cd4
 80033fc:	20001720 	.word	0x20001720

08003400 <TELEMETRY_Process>:


void TELEMETRY_Process(uint32_t time_us){
 8003400:	b570      	push	{r4, r5, r6, lr}

	//	--------------------	Transmission	------------------------
	//Ce qui suit vide le buffer en transmettant on contenu en respectant la limite
	//de vitesse maximum
	if(telem->index_write_tx != telem->index_read_tx && telem->transmission_state == TRANSMISSION_IDLE)
 8003402:	4b4a      	ldr	r3, [pc, #296]	; (800352c <TELEMETRY_Process+0x12c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8b3 113c 	ldrh.w	r1, [r3, #316]	; 0x13c
 800340a:	f8b3 213e 	ldrh.w	r2, [r3, #318]	; 0x13e
 800340e:	4291      	cmp	r1, r2
 8003410:	d002      	beq.n	8003418 <TELEMETRY_Process+0x18>
 8003412:	f893 113b 	ldrb.w	r1, [r3, #315]	; 0x13b
 8003416:	b1d1      	cbz	r1, 800344e <TELEMETRY_Process+0x4e>
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
	}

	//	---------------------	Reception	-------------------------------

	uint16_t bytes_avaibles = get_nb_bytes_available(telem);
 8003418:	4b44      	ldr	r3, [pc, #272]	; (800352c <TELEMETRY_Process+0x12c>)
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	f7ff ffb4 	bl	8003388 <get_nb_bytes_available>
 8003420:	4604      	mov	r4, r0
	if(bytes_avaibles > 2)	//Minimum trois octets pour faire quoi que ce soit
 8003422:	2802      	cmp	r0, #2
 8003424:	d912      	bls.n	800344c <TELEMETRY_Process+0x4c>
	{
		uint16_t bytes_used = 1 ;
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 8003426:	4b41      	ldr	r3, [pc, #260]	; (800352c <TELEMETRY_Process+0x12c>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f8b2 3342 	ldrh.w	r3, [r2, #834]	; 0x342
 800342e:	18d1      	adds	r1, r2, r3
 8003430:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 8003434:	2924      	cmp	r1, #36	; 0x24
 8003436:	d029      	beq.n	800348c <TELEMETRY_Process+0x8c>
		uint16_t bytes_used = 1 ;
 8003438:	2501      	movs	r5, #1
			if(checksum % 256 == telem->buffer_rx[(telem->index_read_rx + bytes_recquired-1)%LEN_RX_BUFFER])
			{
				DATA_LOGGER_Reception(&telem->buffer_rx[(telem->index_read_rx+1)%LEN_RX_BUFFER]);
			}
		}
		telem->index_read_rx += bytes_used ;
 800343a:	4b3c      	ldr	r3, [pc, #240]	; (800352c <TELEMETRY_Process+0x12c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
 8003442:	4415      	add	r5, r2
		telem->index_read_rx = telem->index_read_rx % LEN_RX_BUFFER ;
 8003444:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8003448:	f8a3 5342 	strh.w	r5, [r3, #834]	; 0x342
	}

}
 800344c:	bd70      	pop	{r4, r5, r6, pc}
		telem->transmission_state = TRANSMISSION_IN_PROGRESS;
 800344e:	2101      	movs	r1, #1
 8003450:	f883 113b 	strb.w	r1, [r3, #315]	; 0x13b
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 8003454:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8003458:	441a      	add	r2, r3
 800345a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800345e:	f892 2131 	ldrb.w	r2, [r2, #305]	; 0x131
 8003462:	3105      	adds	r1, #5
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	f002 fd1d 	bl	8005ea4 <HAL_UART_Transmit_DMA>
		telem->index_read_tx ++ ;
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <TELEMETRY_Process+0x12c>)
 800346c:	6819      	ldr	r1, [r3, #0]
 800346e:	f8b1 313e 	ldrh.w	r3, [r1, #318]	; 0x13e
 8003472:	3301      	adds	r3, #1
 8003474:	b29b      	uxth	r3, r3
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 8003476:	4a2e      	ldr	r2, [pc, #184]	; (8003530 <TELEMETRY_Process+0x130>)
 8003478:	fba2 0203 	umull	r0, r2, r2, r3
 800347c:	08d2      	lsrs	r2, r2, #3
 800347e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003482:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003486:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
 800348a:	e7c5      	b.n	8003418 <TELEMETRY_Process+0x18>
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[(telem->index_read_rx+1)%LEN_RX_BUFFER]);
 800348c:	3301      	adds	r3, #1
 800348e:	4259      	negs	r1, r3
 8003490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003494:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003498:	bf58      	it	pl
 800349a:	424b      	negpl	r3, r1
 800349c:	4413      	add	r3, r2
 800349e:	f893 0140 	ldrb.w	r0, [r3, #320]	; 0x140
 80034a2:	f7fe f91f 	bl	80016e4 <DATA_LOGGER_Get_Data>
			uint16_t bytes_recquired = (current_data->format / 20) + 3 ;
 80034a6:	7a43      	ldrb	r3, [r0, #9]
 80034a8:	4a21      	ldr	r2, [pc, #132]	; (8003530 <TELEMETRY_Process+0x130>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	1cdd      	adds	r5, r3, #3
			if(bytes_recquired > bytes_avaibles)
 80034b2:	42ac      	cmp	r4, r5
 80034b4:	d3ca      	bcc.n	800344c <TELEMETRY_Process+0x4c>
			uint16_t len_frame = bytes_recquired - 2 ;
 80034b6:	1c5c      	adds	r4, r3, #1
			for(uint16_t b = 0; b < len_frame; b++)
 80034b8:	2000      	movs	r0, #0
			uint16_t checksum = 0 ;
 80034ba:	4606      	mov	r6, r0
			for(uint16_t b = 0; b < len_frame; b++)
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d214      	bcs.n	80034ea <TELEMETRY_Process+0xea>
				checksum += telem->buffer_rx[(telem->index_read_rx+1+b)%LEN_RX_BUFFER];
 80034c0:	4b1a      	ldr	r3, [pc, #104]	; (800352c <TELEMETRY_Process+0x12c>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	f8b2 3342 	ldrh.w	r3, [r2, #834]	; 0x342
 80034c8:	3301      	adds	r3, #1
 80034ca:	4403      	add	r3, r0
 80034cc:	4259      	negs	r1, r3
 80034ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80034d6:	bf58      	it	pl
 80034d8:	424b      	negpl	r3, r1
 80034da:	4413      	add	r3, r2
 80034dc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80034e0:	4433      	add	r3, r6
 80034e2:	b29e      	uxth	r6, r3
			for(uint16_t b = 0; b < len_frame; b++)
 80034e4:	3001      	adds	r0, #1
 80034e6:	b280      	uxth	r0, r0
 80034e8:	e7e8      	b.n	80034bc <TELEMETRY_Process+0xbc>
			if(checksum % 256 == telem->buffer_rx[(telem->index_read_rx + bytes_recquired-1)%LEN_RX_BUFFER])
 80034ea:	b2f3      	uxtb	r3, r6
 80034ec:	4a0f      	ldr	r2, [pc, #60]	; (800352c <TELEMETRY_Process+0x12c>)
 80034ee:	6810      	ldr	r0, [r2, #0]
 80034f0:	f8b0 1342 	ldrh.w	r1, [r0, #834]	; 0x342
 80034f4:	186a      	adds	r2, r5, r1
 80034f6:	3a01      	subs	r2, #1
 80034f8:	4254      	negs	r4, r2
 80034fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034fe:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8003502:	bf58      	it	pl
 8003504:	4262      	negpl	r2, r4
 8003506:	4402      	add	r2, r0
 8003508:	f892 2140 	ldrb.w	r2, [r2, #320]	; 0x140
 800350c:	4293      	cmp	r3, r2
 800350e:	d194      	bne.n	800343a <TELEMETRY_Process+0x3a>
				DATA_LOGGER_Reception(&telem->buffer_rx[(telem->index_read_rx+1)%LEN_RX_BUFFER]);
 8003510:	1c4b      	adds	r3, r1, #1
 8003512:	425a      	negs	r2, r3
 8003514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351c:	bf58      	it	pl
 800351e:	4253      	negpl	r3, r2
 8003520:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003524:	4418      	add	r0, r3
 8003526:	f7fd ff0f 	bl	8001348 <DATA_LOGGER_Reception>
 800352a:	e786      	b.n	800343a <TELEMETRY_Process+0x3a>
 800352c:	20001cd4 	.word	0x20001cd4
 8003530:	cccccccd 	.word	0xcccccccd

08003534 <TELEMETRY_Send_Data_Raw>:

	to_send[1 + len] = (uint8_t)(checksum % 256) ;
	TELEMETRY_Send_Data_Raw(to_send, len+2);
}

void TELEMETRY_Send_Data_Raw(uint8_t * data, uint8_t len){
 8003534:	b538      	push	{r3, r4, r5, lr}

	//Copie du tableau dans le buffer
	for(uint8_t c = 0; c < len; c++)
 8003536:	2300      	movs	r3, #0
 8003538:	428b      	cmp	r3, r1
 800353a:	d20d      	bcs.n	8003558 <TELEMETRY_Send_Data_Raw+0x24>
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 800353c:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <TELEMETRY_Send_Data_Raw+0xa0>)
 800353e:	6814      	ldr	r4, [r2, #0]
 8003540:	f8b4 213c 	ldrh.w	r2, [r4, #316]	; 0x13c
 8003544:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003548:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800354c:	5cc5      	ldrb	r5, [r0, r3]
 800354e:	4422      	add	r2, r4
 8003550:	7155      	strb	r5, [r2, #5]
	for(uint8_t c = 0; c < len; c++)
 8003552:	3301      	adds	r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e7ef      	b.n	8003538 <TELEMETRY_Send_Data_Raw+0x4>
	//On enregistre la taille de la donnée
	telem->len_portion_tx[telem->index_write_tx] = len ;
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <TELEMETRY_Send_Data_Raw+0xa0>)
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	f8b0 313c 	ldrh.w	r3, [r0, #316]	; 0x13c
 8003560:	4403      	add	r3, r0
 8003562:	f883 1131 	strb.w	r1, [r3, #305]	; 0x131

	//Incrémentation de l'index
	telem->index_write_tx ++ ;
 8003566:	f8b0 313c 	ldrh.w	r3, [r0, #316]	; 0x13c
 800356a:	3301      	adds	r3, #1
 800356c:	b29b      	uxth	r3, r3
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 800356e:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <TELEMETRY_Send_Data_Raw+0xa4>)
 8003570:	fba2 1203 	umull	r1, r2, r2, r3
 8003574:	08d2      	lsrs	r2, r2, #3
 8003576:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800357a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	f8a0 313c 	strh.w	r3, [r0, #316]	; 0x13c

	//Si la transmission est au repos, on relance la transmission
	if(telem->index_write_tx != telem->index_read_tx && telem->transmission_state == TRANSMISSION_IDLE)
 8003584:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
 8003588:	4293      	cmp	r3, r2
 800358a:	d002      	beq.n	8003592 <TELEMETRY_Send_Data_Raw+0x5e>
 800358c:	f890 313b 	ldrb.w	r3, [r0, #315]	; 0x13b
 8003590:	b103      	cbz	r3, 8003594 <TELEMETRY_Send_Data_Raw+0x60>
		telem->index_read_tx ++ ;
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;

	}

}
 8003592:	bd38      	pop	{r3, r4, r5, pc}
		telem->transmission_state = TRANSMISSION_IN_PROGRESS;
 8003594:	2301      	movs	r3, #1
 8003596:	f880 313b 	strb.w	r3, [r0, #315]	; 0x13b
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 800359a:	4613      	mov	r3, r2
 800359c:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 80035a0:	4403      	add	r3, r0
 80035a2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80035a6:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
 80035aa:	3105      	adds	r1, #5
 80035ac:	6800      	ldr	r0, [r0, #0]
 80035ae:	f002 fc79 	bl	8005ea4 <HAL_UART_Transmit_DMA>
		telem->index_read_tx ++ ;
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <TELEMETRY_Send_Data_Raw+0xa0>)
 80035b4:	6819      	ldr	r1, [r3, #0]
 80035b6:	f8b1 313e 	ldrh.w	r3, [r1, #318]	; 0x13e
 80035ba:	3301      	adds	r3, #1
 80035bc:	b29b      	uxth	r3, r3
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 80035be:	4a06      	ldr	r2, [pc, #24]	; (80035d8 <TELEMETRY_Send_Data_Raw+0xa4>)
 80035c0:	fba2 0203 	umull	r0, r2, r2, r3
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80035ca:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80035ce:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
}
 80035d2:	e7de      	b.n	8003592 <TELEMETRY_Send_Data_Raw+0x5e>
 80035d4:	20001cd4 	.word	0x20001cd4
 80035d8:	cccccccd 	.word	0xcccccccd

080035dc <TELEMETRY_Send_Data>:
void TELEMETRY_Send_Data(uint8_t * data, uint8_t len){
 80035dc:	b530      	push	{r4, r5, lr}
 80035de:	b089      	sub	sp, #36	; 0x24
	to_send[0] = '$';
 80035e0:	2324      	movs	r3, #36	; 0x24
 80035e2:	f88d 3000 	strb.w	r3, [sp]
	for(uint8_t b = 0; b < len; b++){
 80035e6:	2300      	movs	r3, #0
	uint32_t checksum = 0 ;
 80035e8:	461c      	mov	r4, r3
	for(uint8_t b = 0; b < len; b++){
 80035ea:	428b      	cmp	r3, r1
 80035ec:	d208      	bcs.n	8003600 <TELEMETRY_Send_Data+0x24>
		to_send[1 + b] = data[b];
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	5cc3      	ldrb	r3, [r0, r3]
 80035f2:	ad08      	add	r5, sp, #32
 80035f4:	4415      	add	r5, r2
 80035f6:	f805 3c20 	strb.w	r3, [r5, #-32]
		checksum += (uint32_t)to_send[1 + b];
 80035fa:	441c      	add	r4, r3
	for(uint8_t b = 0; b < len; b++){
 80035fc:	b2d3      	uxtb	r3, r2
 80035fe:	e7f4      	b.n	80035ea <TELEMETRY_Send_Data+0xe>
	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 8003600:	1c4b      	adds	r3, r1, #1
 8003602:	aa08      	add	r2, sp, #32
 8003604:	4413      	add	r3, r2
 8003606:	f803 4c20 	strb.w	r4, [r3, #-32]
	TELEMETRY_Send_Data_Raw(to_send, len+2);
 800360a:	3102      	adds	r1, #2
 800360c:	b2c9      	uxtb	r1, r1
 800360e:	4668      	mov	r0, sp
 8003610:	f7ff ff90 	bl	8003534 <TELEMETRY_Send_Data_Raw>
}
 8003614:	b009      	add	sp, #36	; 0x24
 8003616:	bd30      	pop	{r4, r5, pc}

08003618 <TELEMETRY_Idle_Line_Detection>:

void TELEMETRY_Idle_Line_Detection(void){
	//On met à jour l'index d'écriture du buffer rx
	telem->index_write_rx = LEN_RX_BUFFER - telem->huart->hdmarx->Instance->NDTR ;
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <TELEMETRY_Idle_Line_Detection+0x18>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	6813      	ldr	r3, [r2, #0]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003628:	b29b      	uxth	r3, r3
 800362a:	f8a2 3340 	strh.w	r3, [r2, #832]	; 0x340
}
 800362e:	4770      	bx	lr
 8003630:	20001cd4 	.word	0x20001cd4

08003634 <TELEMETRY_TxCpltCallback>:

void TELEMETRY_TxCpltCallback(void){
 8003634:	b508      	push	{r3, lr}
	//Si on a encore des données à envoyer
	if(telem->index_write_tx != telem->index_read_tx){
 8003636:	4b14      	ldr	r3, [pc, #80]	; (8003688 <TELEMETRY_TxCpltCallback+0x54>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8b3 113c 	ldrh.w	r1, [r3, #316]	; 0x13c
 800363e:	f8b3 213e 	ldrh.w	r2, [r3, #318]	; 0x13e
 8003642:	4291      	cmp	r1, r2
 8003644:	d103      	bne.n	800364e <TELEMETRY_TxCpltCallback+0x1a>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
	}
	else
		telem->transmission_state = TRANSMISSION_IDLE ;
 8003646:	2200      	movs	r2, #0
 8003648:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
}
 800364c:	bd08      	pop	{r3, pc}
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 800364e:	ebc2 1002 	rsb	r0, r2, r2, lsl #4
 8003652:	0041      	lsls	r1, r0, #1
 8003654:	441a      	add	r2, r3
 8003656:	4419      	add	r1, r3
 8003658:	f892 2131 	ldrb.w	r2, [r2, #305]	; 0x131
 800365c:	3105      	adds	r1, #5
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	f002 fc20 	bl	8005ea4 <HAL_UART_Transmit_DMA>
		telem->index_read_tx ++ ;
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <TELEMETRY_TxCpltCallback+0x54>)
 8003666:	6819      	ldr	r1, [r3, #0]
 8003668:	f8b1 213e 	ldrh.w	r2, [r1, #318]	; 0x13e
 800366c:	3201      	adds	r2, #1
 800366e:	b292      	uxth	r2, r2
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <TELEMETRY_TxCpltCallback+0x58>)
 8003672:	fba3 0302 	umull	r0, r3, r3, r2
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800367c:	0058      	lsls	r0, r3, #1
 800367e:	1a12      	subs	r2, r2, r0
 8003680:	f8a1 213e 	strh.w	r2, [r1, #318]	; 0x13e
 8003684:	e7e2      	b.n	800364c <TELEMETRY_TxCpltCallback+0x18>
 8003686:	bf00      	nop
 8003688:	20001cd4 	.word	0x20001cd4
 800368c:	cccccccd 	.word	0xcccccccd

08003690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003690:	b510      	push	{r4, lr}
 8003692:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003694:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <HAL_InitTick+0x40>)
 8003696:	7818      	ldrb	r0, [r3, #0]
 8003698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800369c:	fbb3 f3f0 	udiv	r3, r3, r0
 80036a0:	4a0c      	ldr	r2, [pc, #48]	; (80036d4 <HAL_InitTick+0x44>)
 80036a2:	6810      	ldr	r0, [r2, #0]
 80036a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80036a8:	f000 f8ac 	bl	8003804 <HAL_SYSTICK_Config>
 80036ac:	b968      	cbnz	r0, 80036ca <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ae:	2c0f      	cmp	r4, #15
 80036b0:	d901      	bls.n	80036b6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80036b2:	2001      	movs	r0, #1
 80036b4:	e00a      	b.n	80036cc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b6:	2200      	movs	r2, #0
 80036b8:	4621      	mov	r1, r4
 80036ba:	f04f 30ff 	mov.w	r0, #4294967295
 80036be:	f000 f85f 	bl	8003780 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_InitTick+0x48>)
 80036c4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c6:	2000      	movs	r0, #0
 80036c8:	e000      	b.n	80036cc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80036ca:	2001      	movs	r0, #1
}
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	bf00      	nop
 80036d0:	20001735 	.word	0x20001735
 80036d4:	200016c4 	.word	0x200016c4
 80036d8:	20001738 	.word	0x20001738

080036dc <HAL_Init>:
{
 80036dc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_Init+0x30>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f8:	2003      	movs	r0, #3
 80036fa:	f000 f82f 	bl	800375c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80036fe:	2000      	movs	r0, #0
 8003700:	f7ff ffc6 	bl	8003690 <HAL_InitTick>
  HAL_MspInit();
 8003704:	f7ff fa82 	bl	8002c0c <HAL_MspInit>
}
 8003708:	2000      	movs	r0, #0
 800370a:	bd08      	pop	{r3, pc}
 800370c:	40023c00 	.word	0x40023c00

08003710 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003710:	4a03      	ldr	r2, [pc, #12]	; (8003720 <HAL_IncTick+0x10>)
 8003712:	6811      	ldr	r1, [r2, #0]
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <HAL_IncTick+0x14>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	440b      	add	r3, r1
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	2000287c 	.word	0x2000287c
 8003724:	20001735 	.word	0x20001735

08003728 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003728:	4b01      	ldr	r3, [pc, #4]	; (8003730 <HAL_GetTick+0x8>)
 800372a:	6818      	ldr	r0, [r3, #0]
}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	2000287c 	.word	0x2000287c

08003734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff fff6 	bl	8003728 <HAL_GetTick>
 800373c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800373e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003742:	d002      	beq.n	800374a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <HAL_Delay+0x24>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800374a:	f7ff ffed 	bl	8003728 <HAL_GetTick>
 800374e:	1b40      	subs	r0, r0, r5
 8003750:	42a0      	cmp	r0, r4
 8003752:	d3fa      	bcc.n	800374a <HAL_Delay+0x16>
  {
  }
}
 8003754:	bd38      	pop	{r3, r4, r5, pc}
 8003756:	bf00      	nop
 8003758:	20001735 	.word	0x20001735

0800375c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800375c:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800375e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003760:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003768:	0200      	lsls	r0, r0, #8
 800376a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800376e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003778:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800377a:	4770      	bx	lr
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003780:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003782:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <HAL_NVIC_SetPriority+0x60>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800378a:	f1c3 0407 	rsb	r4, r3, #7
 800378e:	2c04      	cmp	r4, #4
 8003790:	bf28      	it	cs
 8003792:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003794:	1d1d      	adds	r5, r3, #4
 8003796:	2d06      	cmp	r5, #6
 8003798:	d918      	bls.n	80037cc <HAL_NVIC_SetPriority+0x4c>
 800379a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	f04f 35ff 	mov.w	r5, #4294967295
 80037a0:	fa05 f404 	lsl.w	r4, r5, r4
 80037a4:	ea21 0104 	bic.w	r1, r1, r4
 80037a8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037aa:	fa05 f303 	lsl.w	r3, r5, r3
 80037ae:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80037b4:	2800      	cmp	r0, #0
 80037b6:	db0b      	blt.n	80037d0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b8:	0109      	lsls	r1, r1, #4
 80037ba:	b2c9      	uxtb	r1, r1
 80037bc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80037c0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80037c4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80037c8:	bc30      	pop	{r4, r5}
 80037ca:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037cc:	2300      	movs	r3, #0
 80037ce:	e7e5      	b.n	800379c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d0:	f000 000f 	and.w	r0, r0, #15
 80037d4:	0109      	lsls	r1, r1, #4
 80037d6:	b2c9      	uxtb	r1, r1
 80037d8:	4b02      	ldr	r3, [pc, #8]	; (80037e4 <HAL_NVIC_SetPriority+0x64>)
 80037da:	5419      	strb	r1, [r3, r0]
 80037dc:	e7f4      	b.n	80037c8 <HAL_NVIC_SetPriority+0x48>
 80037de:	bf00      	nop
 80037e0:	e000ed00 	.word	0xe000ed00
 80037e4:	e000ed14 	.word	0xe000ed14

080037e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037e8:	2800      	cmp	r0, #0
 80037ea:	db07      	blt.n	80037fc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ec:	f000 021f 	and.w	r2, r0, #31
 80037f0:	0940      	lsrs	r0, r0, #5
 80037f2:	2301      	movs	r3, #1
 80037f4:	4093      	lsls	r3, r2
 80037f6:	4a02      	ldr	r2, [pc, #8]	; (8003800 <HAL_NVIC_EnableIRQ+0x18>)
 80037f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e100 	.word	0xe000e100

08003804 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003804:	3801      	subs	r0, #1
 8003806:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800380a:	d20a      	bcs.n	8003822 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_SYSTICK_Config+0x24>)
 800380e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	4a06      	ldr	r2, [pc, #24]	; (800382c <HAL_SYSTICK_Config+0x28>)
 8003812:	21f0      	movs	r1, #240	; 0xf0
 8003814:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003818:	2000      	movs	r0, #0
 800381a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800381c:	2207      	movs	r2, #7
 800381e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003820:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003822:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000e010 	.word	0xe000e010
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003830:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003832:	6805      	ldr	r5, [r0, #0]
 8003834:	682c      	ldr	r4, [r5, #0]
 8003836:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800383a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800383c:	6804      	ldr	r4, [r0, #0]
 800383e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003840:	6883      	ldr	r3, [r0, #8]
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d005      	beq.n	8003852 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8003846:	6803      	ldr	r3, [r0, #0]
 8003848:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800384a:	6803      	ldr	r3, [r0, #0]
 800384c:	60da      	str	r2, [r3, #12]
  }
}
 800384e:	bc30      	pop	{r4, r5}
 8003850:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8003852:	6803      	ldr	r3, [r0, #0]
 8003854:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003856:	6803      	ldr	r3, [r0, #0]
 8003858:	60d9      	str	r1, [r3, #12]
 800385a:	e7f8      	b.n	800384e <DMA_SetConfig+0x1e>

0800385c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800385c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800385e:	6803      	ldr	r3, [r0, #0]
 8003860:	b2d9      	uxtb	r1, r3
 8003862:	3910      	subs	r1, #16
 8003864:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <DMA_CalcBaseAndBitshift+0x3c>)
 8003866:	fba2 4201 	umull	r4, r2, r2, r1
 800386a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800386c:	4c0b      	ldr	r4, [pc, #44]	; (800389c <DMA_CalcBaseAndBitshift+0x40>)
 800386e:	5ca2      	ldrb	r2, [r4, r2]
 8003870:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003872:	295f      	cmp	r1, #95	; 0x5f
 8003874:	d909      	bls.n	800388a <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800387a:	f023 0303 	bic.w	r3, r3, #3
 800387e:	3304      	adds	r3, #4
 8003880:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003882:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003888:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800388a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	6583      	str	r3, [r0, #88]	; 0x58
 8003894:	e7f5      	b.n	8003882 <DMA_CalcBaseAndBitshift+0x26>
 8003896:	bf00      	nop
 8003898:	aaaaaaab 	.word	0xaaaaaaab
 800389c:	08009c00 	.word	0x08009c00

080038a0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038a2:	6982      	ldr	r2, [r0, #24]
 80038a4:	b992      	cbnz	r2, 80038cc <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d00a      	beq.n	80038c0 <DMA_CheckFifoParam+0x20>
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d002      	beq.n	80038b4 <DMA_CheckFifoParam+0x14>
 80038ae:	b10b      	cbz	r3, 80038b4 <DMA_CheckFifoParam+0x14>
 80038b0:	2000      	movs	r0, #0
 80038b2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80038b6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80038ba:	d128      	bne.n	800390e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80038bc:	2000      	movs	r0, #0
 80038be:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80038c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038c6:	d024      	beq.n	8003912 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2000      	movs	r0, #0
 80038ca:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038cc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80038d0:	d009      	beq.n	80038e6 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d925      	bls.n	8003922 <DMA_CheckFifoParam+0x82>
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d125      	bne.n	8003926 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80038dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80038e0:	d123      	bne.n	800392a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80038e2:	2000      	movs	r0, #0
 80038e4:	4770      	bx	lr
    switch (tmp)
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d803      	bhi.n	80038f2 <DMA_CheckFifoParam+0x52>
 80038ea:	e8df f003 	tbb	[pc, r3]
 80038ee:	0414      	.short	0x0414
 80038f0:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038f2:	2000      	movs	r0, #0
 80038f4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80038f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80038fc:	d10d      	bne.n	800391a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2000      	movs	r0, #0
 8003900:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003902:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003904:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003908:	d009      	beq.n	800391e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2000      	movs	r0, #0
 800390c:	4770      	bx	lr
        status = HAL_ERROR;
 800390e:	2001      	movs	r0, #1
 8003910:	4770      	bx	lr
        status = HAL_ERROR;
 8003912:	2001      	movs	r0, #1
 8003914:	4770      	bx	lr
      status = HAL_ERROR;
 8003916:	2001      	movs	r0, #1
 8003918:	4770      	bx	lr
        status = HAL_ERROR;
 800391a:	2001      	movs	r0, #1
 800391c:	4770      	bx	lr
        status = HAL_ERROR;
 800391e:	2001      	movs	r0, #1
 8003920:	4770      	bx	lr
      status = HAL_ERROR;
 8003922:	2001      	movs	r0, #1
 8003924:	4770      	bx	lr
    switch (tmp)
 8003926:	2000      	movs	r0, #0
 8003928:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800392a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800392c:	4770      	bx	lr
	...

08003930 <HAL_DMA_Init>:
{
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003934:	f7ff fef8 	bl	8003728 <HAL_GetTick>
  if(hdma == NULL)
 8003938:	2c00      	cmp	r4, #0
 800393a:	d05b      	beq.n	80039f4 <HAL_DMA_Init+0xc4>
 800393c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800393e:	2300      	movs	r3, #0
 8003940:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003944:	2302      	movs	r3, #2
 8003946:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	6813      	ldr	r3, [r2, #0]
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	f012 0f01 	tst.w	r2, #1
 800395c:	d00a      	beq.n	8003974 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800395e:	f7ff fee3 	bl	8003728 <HAL_GetTick>
 8003962:	1b43      	subs	r3, r0, r5
 8003964:	2b05      	cmp	r3, #5
 8003966:	d9f5      	bls.n	8003954 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003968:	2320      	movs	r3, #32
 800396a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800396c:	2003      	movs	r0, #3
 800396e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8003972:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8003974:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003976:	4820      	ldr	r0, [pc, #128]	; (80039f8 <HAL_DMA_Init+0xc8>)
 8003978:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800397a:	6861      	ldr	r1, [r4, #4]
 800397c:	68a2      	ldr	r2, [r4, #8]
 800397e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003980:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003982:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003984:	6921      	ldr	r1, [r4, #16]
 8003986:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003988:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800398c:	69a1      	ldr	r1, [r4, #24]
 800398e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003990:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003992:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003994:	6a21      	ldr	r1, [r4, #32]
 8003996:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003998:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800399a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800399c:	2904      	cmp	r1, #4
 800399e:	d01e      	beq.n	80039de <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80039a0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80039a2:	6826      	ldr	r6, [r4, #0]
 80039a4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039a6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80039aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039ac:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d107      	bne.n	80039c2 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80039b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039b4:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80039b8:	b11b      	cbz	r3, 80039c2 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff ff70 	bl	80038a0 <DMA_CheckFifoParam>
 80039c0:	b990      	cbnz	r0, 80039e8 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80039c2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7ff ff49 	bl	800385c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80039cc:	233f      	movs	r3, #63	; 0x3f
 80039ce:	4093      	lsls	r3, r2
 80039d0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d2:	2000      	movs	r0, #0
 80039d4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80039dc:	e7c9      	b.n	8003972 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80039e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80039e2:	4301      	orrs	r1, r0
 80039e4:	430a      	orrs	r2, r1
 80039e6:	e7db      	b.n	80039a0 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e8:	2340      	movs	r3, #64	; 0x40
 80039ea:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80039ec:	2001      	movs	r0, #1
 80039ee:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80039f2:	e7be      	b.n	8003972 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80039f4:	2001      	movs	r0, #1
 80039f6:	e7bc      	b.n	8003972 <HAL_DMA_Init+0x42>
 80039f8:	f010803f 	.word	0xf010803f

080039fc <HAL_DMA_Start_IT>:
{
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a00:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003a02:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003a06:	2801      	cmp	r0, #1
 8003a08:	d02b      	beq.n	8003a62 <HAL_DMA_Start_IT+0x66>
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a10:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8003a14:	b2c0      	uxtb	r0, r0
 8003a16:	2801      	cmp	r0, #1
 8003a18:	d004      	beq.n	8003a24 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8003a20:	2002      	movs	r0, #2
}
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a24:	2002      	movs	r0, #2
 8003a26:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f7ff fefe 	bl	8003830 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a34:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003a36:	233f      	movs	r3, #63	; 0x3f
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	6813      	ldr	r3, [r2, #0]
 8003a40:	f043 0316 	orr.w	r3, r3, #22
 8003a44:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a48:	b123      	cbz	r3, 8003a54 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a4a:	6822      	ldr	r2, [r4, #0]
 8003a4c:	6813      	ldr	r3, [r2, #0]
 8003a4e:	f043 0308 	orr.w	r3, r3, #8
 8003a52:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	6813      	ldr	r3, [r2, #0]
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5e:	2000      	movs	r0, #0
 8003a60:	e7df      	b.n	8003a22 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8003a62:	2002      	movs	r0, #2
 8003a64:	e7dd      	b.n	8003a22 <HAL_DMA_Start_IT+0x26>

08003a66 <HAL_DMA_Abort>:
{
 8003a66:	b570      	push	{r4, r5, r6, lr}
 8003a68:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a6a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8003a6c:	f7ff fe5c 	bl	8003728 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a70:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d006      	beq.n	8003a88 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003a84:	2001      	movs	r0, #1
}
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	6813      	ldr	r3, [r2, #0]
 8003a8e:	f023 0316 	bic.w	r3, r3, #22
 8003a92:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	6953      	ldr	r3, [r2, #20]
 8003a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9c:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aa0:	b1e3      	cbz	r3, 8003adc <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aa2:	6822      	ldr	r2, [r4, #0]
 8003aa4:	6813      	ldr	r3, [r2, #0]
 8003aa6:	f023 0308 	bic.w	r3, r3, #8
 8003aaa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003aac:	6822      	ldr	r2, [r4, #0]
 8003aae:	6813      	ldr	r3, [r2, #0]
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f013 0f01 	tst.w	r3, #1
 8003abe:	d011      	beq.n	8003ae4 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ac0:	f7ff fe32 	bl	8003728 <HAL_GetTick>
 8003ac4:	1b43      	subs	r3, r0, r5
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d9f5      	bls.n	8003ab6 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aca:	2320      	movs	r3, #32
 8003acc:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ad4:	2003      	movs	r0, #3
 8003ad6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8003ada:	e7d4      	b.n	8003a86 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003adc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1df      	bne.n	8003aa2 <HAL_DMA_Abort+0x3c>
 8003ae2:	e7e3      	b.n	8003aac <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ae6:	233f      	movs	r3, #63	; 0x3f
 8003ae8:	4093      	lsls	r3, r2
 8003aea:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8003aec:	2000      	movs	r0, #0
 8003aee:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003af8:	e7c5      	b.n	8003a86 <HAL_DMA_Abort+0x20>

08003afa <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003afa:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d003      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003b08:	2001      	movs	r0, #1
 8003b0a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b0c:	2305      	movs	r3, #5
 8003b0e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003b12:	6802      	ldr	r2, [r0, #0]
 8003b14:	6813      	ldr	r3, [r2, #0]
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003b1c:	2000      	movs	r0, #0
}
 8003b1e:	4770      	bx	lr

08003b20 <HAL_DMA_IRQHandler>:
{
 8003b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b22:	b083      	sub	sp, #12
 8003b24:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b2a:	4b72      	ldr	r3, [pc, #456]	; (8003cf4 <HAL_DMA_IRQHandler+0x1d4>)
 8003b2c:	681d      	ldr	r5, [r3, #0]
 8003b2e:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <HAL_DMA_IRQHandler+0x1d8>)
 8003b30:	fba3 3505 	umull	r3, r5, r3, r5
 8003b34:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b36:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8003b38:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b3a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	4093      	lsls	r3, r2
 8003b40:	4233      	tst	r3, r6
 8003b42:	d010      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b44:	6803      	ldr	r3, [r0, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	f012 0f04 	tst.w	r2, #4
 8003b4c:	d00b      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	f022 0204 	bic.w	r2, r2, #4
 8003b54:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b56:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003b58:	2308      	movs	r3, #8
 8003b5a:	4093      	lsls	r3, r2
 8003b5c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b5e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4093      	lsls	r3, r2
 8003b6c:	4233      	tst	r3, r6
 8003b6e:	d009      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b70:	6822      	ldr	r2, [r4, #0]
 8003b72:	6952      	ldr	r2, [r2, #20]
 8003b74:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b78:	d004      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b7a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b7e:	f043 0302 	orr.w	r3, r3, #2
 8003b82:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b84:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b86:	2304      	movs	r3, #4
 8003b88:	4093      	lsls	r3, r2
 8003b8a:	4233      	tst	r3, r6
 8003b8c:	d009      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b8e:	6822      	ldr	r2, [r4, #0]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	f012 0f02 	tst.w	r2, #2
 8003b96:	d004      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b98:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	4093      	lsls	r3, r2
 8003ba8:	4233      	tst	r3, r6
 8003baa:	d024      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bac:	6822      	ldr	r2, [r4, #0]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	f012 0f08 	tst.w	r2, #8
 8003bb4:	d01f      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bb6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003bc0:	d00d      	beq.n	8003bde <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003bc8:	d104      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8003bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bcc:	b19b      	cbz	r3, 8003bf6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8003bce:	4620      	mov	r0, r4
 8003bd0:	4798      	blx	r3
 8003bd2:	e010      	b.n	8003bf6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003bd6:	b173      	cbz	r3, 8003bf6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8003bd8:	4620      	mov	r0, r4
 8003bda:	4798      	blx	r3
 8003bdc:	e00b      	b.n	8003bf6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003be4:	d103      	bne.n	8003bee <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	f022 0208 	bic.w	r2, r2, #8
 8003bec:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bf0:	b10b      	cbz	r3, 8003bf6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	4093      	lsls	r3, r2
 8003bfc:	4233      	tst	r3, r6
 8003bfe:	d055      	beq.n	8003cac <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	f012 0f10 	tst.w	r2, #16
 8003c08:	d050      	beq.n	8003cac <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c0a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c0c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	d00e      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003c1e:	d033      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003c26:	d12a      	bne.n	8003c7e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8003c28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d03e      	beq.n	8003cac <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8003c2e:	4620      	mov	r0, r4
 8003c30:	4798      	blx	r3
 8003c32:	e03b      	b.n	8003cac <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	f023 0316 	bic.w	r3, r3, #22
 8003c3c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c3e:	6822      	ldr	r2, [r4, #0]
 8003c40:	6953      	ldr	r3, [r2, #20]
 8003c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c46:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c4a:	b1a3      	cbz	r3, 8003c76 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	6813      	ldr	r3, [r2, #0]
 8003c50:	f023 0308 	bic.w	r3, r3, #8
 8003c54:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c56:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c58:	233f      	movs	r3, #63	; 0x3f
 8003c5a:	4093      	lsls	r3, r2
 8003c5c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8003c6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03f      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8003c70:	4620      	mov	r0, r4
 8003c72:	4798      	blx	r3
        return;
 8003c74:	e03c      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e7      	bne.n	8003c4c <HAL_DMA_IRQHandler+0x12c>
 8003c7c:	e7eb      	b.n	8003c56 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8003c7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c80:	b1a3      	cbz	r3, 8003cac <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8003c82:	4620      	mov	r0, r4
 8003c84:	4798      	blx	r3
 8003c86:	e011      	b.n	8003cac <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003c8e:	d109      	bne.n	8003ca4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	f022 0210 	bic.w	r2, r2, #16
 8003c96:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8003ca4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ca6:	b10b      	cbz	r3, 8003cac <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8003ca8:	4620      	mov	r0, r4
 8003caa:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cae:	b1fb      	cbz	r3, 8003cf0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cb2:	f013 0f01 	tst.w	r3, #1
 8003cb6:	d017      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cb8:	2305      	movs	r3, #5
 8003cba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003cbe:	6822      	ldr	r2, [r4, #0]
 8003cc0:	6813      	ldr	r3, [r2, #0]
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003cc8:	9b01      	ldr	r3, [sp, #4]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	42ab      	cmp	r3, r5
 8003cd0:	d804      	bhi.n	8003cdc <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f013 0f01 	tst.w	r3, #1
 8003cda:	d1f5      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003ce8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003cea:	b10b      	cbz	r3, 8003cf0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003cec:	4620      	mov	r0, r4
 8003cee:	4798      	blx	r3
}
 8003cf0:	b003      	add	sp, #12
 8003cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf4:	200016c4 	.word	0x200016c4
 8003cf8:	1b4e81b5 	.word	0x1b4e81b5

08003cfc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003cfc:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b0f      	cmp	r3, #15
 8003d04:	f200 80dd 	bhi.w	8003ec2 <HAL_GPIO_Init+0x1c2>
{
 8003d08:	b4f0      	push	{r4, r5, r6, r7}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	e05d      	b.n	8003dca <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d0e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d10:	005f      	lsls	r7, r3, #1
 8003d12:	2403      	movs	r4, #3
 8003d14:	40bc      	lsls	r4, r7
 8003d16:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d1a:	68cc      	ldr	r4, [r1, #12]
 8003d1c:	40bc      	lsls	r4, r7
 8003d1e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8003d20:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d22:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d24:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d28:	684c      	ldr	r4, [r1, #4]
 8003d2a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8003d32:	6042      	str	r2, [r0, #4]
 8003d34:	e057      	b.n	8003de6 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d36:	08dc      	lsrs	r4, r3, #3
 8003d38:	3408      	adds	r4, #8
 8003d3a:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d3e:	f003 0207 	and.w	r2, r3, #7
 8003d42:	0096      	lsls	r6, r2, #2
 8003d44:	220f      	movs	r2, #15
 8003d46:	40b2      	lsls	r2, r6
 8003d48:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d4c:	690a      	ldr	r2, [r1, #16]
 8003d4e:	40b2      	lsls	r2, r6
 8003d50:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8003d52:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8003d56:	e05a      	b.n	8003e0e <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d58:	2207      	movs	r2, #7
 8003d5a:	e000      	b.n	8003d5e <HAL_GPIO_Init+0x5e>
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	40b2      	lsls	r2, r6
 8003d60:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d62:	3402      	adds	r4, #2
 8003d64:	4e57      	ldr	r6, [pc, #348]	; (8003ec4 <HAL_GPIO_Init+0x1c4>)
 8003d66:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d6a:	4a57      	ldr	r2, [pc, #348]	; (8003ec8 <HAL_GPIO_Init+0x1c8>)
 8003d6c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003d6e:	43ea      	mvns	r2, r5
 8003d70:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d74:	684f      	ldr	r7, [r1, #4]
 8003d76:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003d7a:	d001      	beq.n	8003d80 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8003d7c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8003d80:	4c51      	ldr	r4, [pc, #324]	; (8003ec8 <HAL_GPIO_Init+0x1c8>)
 8003d82:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8003d84:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003d86:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d8a:	684f      	ldr	r7, [r1, #4]
 8003d8c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003d90:	d001      	beq.n	8003d96 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8003d92:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8003d96:	4c4c      	ldr	r4, [pc, #304]	; (8003ec8 <HAL_GPIO_Init+0x1c8>)
 8003d98:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d9a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003d9c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003da0:	684f      	ldr	r7, [r1, #4]
 8003da2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003da6:	d001      	beq.n	8003dac <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8003da8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8003dac:	4c46      	ldr	r4, [pc, #280]	; (8003ec8 <HAL_GPIO_Init+0x1c8>)
 8003dae:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003db0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003db2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003db4:	684e      	ldr	r6, [r1, #4]
 8003db6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003dba:	d001      	beq.n	8003dc0 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8003dbc:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003dc0:	4c41      	ldr	r4, [pc, #260]	; (8003ec8 <HAL_GPIO_Init+0x1c8>)
 8003dc2:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	2b0f      	cmp	r3, #15
 8003dc8:	d878      	bhi.n	8003ebc <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 8003dca:	2201      	movs	r2, #1
 8003dcc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dce:	680c      	ldr	r4, [r1, #0]
 8003dd0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003dd4:	ea32 0404 	bics.w	r4, r2, r4
 8003dd8:	d1f4      	bne.n	8003dc4 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dda:	684c      	ldr	r4, [r1, #4]
 8003ddc:	f004 0403 	and.w	r4, r4, #3
 8003de0:	3c01      	subs	r4, #1
 8003de2:	2c01      	cmp	r4, #1
 8003de4:	d993      	bls.n	8003d0e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de6:	684a      	ldr	r2, [r1, #4]
 8003de8:	f002 0203 	and.w	r2, r2, #3
 8003dec:	2a03      	cmp	r2, #3
 8003dee:	d009      	beq.n	8003e04 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8003df0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003df2:	005e      	lsls	r6, r3, #1
 8003df4:	2203      	movs	r2, #3
 8003df6:	40b2      	lsls	r2, r6
 8003df8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dfc:	688a      	ldr	r2, [r1, #8]
 8003dfe:	40b2      	lsls	r2, r6
 8003e00:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8003e02:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e04:	684a      	ldr	r2, [r1, #4]
 8003e06:	f002 0203 	and.w	r2, r2, #3
 8003e0a:	2a02      	cmp	r2, #2
 8003e0c:	d093      	beq.n	8003d36 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8003e0e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e10:	005e      	lsls	r6, r3, #1
 8003e12:	2203      	movs	r2, #3
 8003e14:	40b2      	lsls	r2, r6
 8003e16:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e1a:	684a      	ldr	r2, [r1, #4]
 8003e1c:	f002 0203 	and.w	r2, r2, #3
 8003e20:	40b2      	lsls	r2, r6
 8003e22:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003e24:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e26:	684a      	ldr	r2, [r1, #4]
 8003e28:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003e2c:	d0ca      	beq.n	8003dc4 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2e:	2200      	movs	r2, #0
 8003e30:	9201      	str	r2, [sp, #4]
 8003e32:	4a26      	ldr	r2, [pc, #152]	; (8003ecc <HAL_GPIO_Init+0x1cc>)
 8003e34:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003e36:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003e3a:	6454      	str	r4, [r2, #68]	; 0x44
 8003e3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e3e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003e42:	9201      	str	r2, [sp, #4]
 8003e44:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003e46:	089c      	lsrs	r4, r3, #2
 8003e48:	1ca6      	adds	r6, r4, #2
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <HAL_GPIO_Init+0x1c4>)
 8003e4c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e50:	f003 0203 	and.w	r2, r3, #3
 8003e54:	0096      	lsls	r6, r2, #2
 8003e56:	220f      	movs	r2, #15
 8003e58:	40b2      	lsls	r2, r6
 8003e5a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ed0 <HAL_GPIO_Init+0x1d0>)
 8003e60:	4290      	cmp	r0, r2
 8003e62:	f43f af7b 	beq.w	8003d5c <HAL_GPIO_Init+0x5c>
 8003e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e6a:	4290      	cmp	r0, r2
 8003e6c:	d01a      	beq.n	8003ea4 <HAL_GPIO_Init+0x1a4>
 8003e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e72:	4290      	cmp	r0, r2
 8003e74:	d018      	beq.n	8003ea8 <HAL_GPIO_Init+0x1a8>
 8003e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e7a:	4290      	cmp	r0, r2
 8003e7c:	d016      	beq.n	8003eac <HAL_GPIO_Init+0x1ac>
 8003e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e82:	4290      	cmp	r0, r2
 8003e84:	d014      	beq.n	8003eb0 <HAL_GPIO_Init+0x1b0>
 8003e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e8a:	4290      	cmp	r0, r2
 8003e8c:	d012      	beq.n	8003eb4 <HAL_GPIO_Init+0x1b4>
 8003e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e92:	4290      	cmp	r0, r2
 8003e94:	d010      	beq.n	8003eb8 <HAL_GPIO_Init+0x1b8>
 8003e96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e9a:	4290      	cmp	r0, r2
 8003e9c:	f43f af5c 	beq.w	8003d58 <HAL_GPIO_Init+0x58>
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	e75c      	b.n	8003d5e <HAL_GPIO_Init+0x5e>
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	e75a      	b.n	8003d5e <HAL_GPIO_Init+0x5e>
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	e758      	b.n	8003d5e <HAL_GPIO_Init+0x5e>
 8003eac:	2203      	movs	r2, #3
 8003eae:	e756      	b.n	8003d5e <HAL_GPIO_Init+0x5e>
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	e754      	b.n	8003d5e <HAL_GPIO_Init+0x5e>
 8003eb4:	2205      	movs	r2, #5
 8003eb6:	e752      	b.n	8003d5e <HAL_GPIO_Init+0x5e>
 8003eb8:	2206      	movs	r2, #6
 8003eba:	e750      	b.n	8003d5e <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bcf0      	pop	{r4, r5, r6, r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	4770      	bx	lr
 8003ec4:	40013800 	.word	0x40013800
 8003ec8:	40013c00 	.word	0x40013c00
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40020000 	.word	0x40020000

08003ed4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed4:	6803      	ldr	r3, [r0, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003edc:	d101      	bne.n	8003ee2 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8003ede:	2000      	movs	r0, #0
}
 8003ee0:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ee6:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eec:	2220      	movs	r2, #32
 8003eee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ef6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003ef8:	f042 0204 	orr.w	r2, r2, #4
 8003efc:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003efe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003f02:	2001      	movs	r0, #1
 8003f04:	4770      	bx	lr

08003f06 <I2C_WaitOnFlagUntilTimeout>:
{
 8003f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f0a:	4607      	mov	r7, r0
 8003f0c:	460d      	mov	r5, r1
 8003f0e:	4690      	mov	r8, r2
 8003f10:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f12:	e022      	b.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f14:	f7ff fc08 	bl	8003728 <HAL_GetTick>
 8003f18:	9b06      	ldr	r3, [sp, #24]
 8003f1a:	1ac0      	subs	r0, r0, r3
 8003f1c:	42b0      	cmp	r0, r6
 8003f1e:	d800      	bhi.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8003f20:	b9de      	cbnz	r6, 8003f5a <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f26:	2220      	movs	r2, #32
 8003f28:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f32:	f042 0220 	orr.w	r2, r2, #32
 8003f36:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003f38:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	e01a      	b.n	8003f76 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	699c      	ldr	r4, [r3, #24]
 8003f44:	ea25 0404 	bic.w	r4, r5, r4
 8003f48:	b2a4      	uxth	r4, r4
 8003f4a:	fab4 f484 	clz	r4, r4
 8003f4e:	0964      	lsrs	r4, r4, #5
 8003f50:	45a0      	cmp	r8, r4
 8003f52:	d10f      	bne.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8003f54:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003f58:	d1dc      	bne.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f5a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d1ee      	bne.n	8003f40 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695c      	ldr	r4, [r3, #20]
 8003f66:	ea25 0404 	bic.w	r4, r5, r4
 8003f6a:	b2a4      	uxth	r4, r4
 8003f6c:	fab4 f484 	clz	r4, r4
 8003f70:	0964      	lsrs	r4, r4, #5
 8003f72:	e7ed      	b.n	8003f50 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8003f74:	2000      	movs	r0, #0
}
 8003f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7e:	4605      	mov	r5, r0
 8003f80:	460e      	mov	r6, r1
 8003f82:	4617      	mov	r7, r2
 8003f84:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f86:	e03d      	b.n	8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f96:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fa6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003fa8:	f042 0204 	orr.w	r2, r2, #4
 8003fac:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003fae:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	e034      	b.n	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb6:	f7ff fbb7 	bl	8003728 <HAL_GetTick>
 8003fba:	eba0 0008 	sub.w	r0, r0, r8
 8003fbe:	42b8      	cmp	r0, r7
 8003fc0:	d800      	bhi.n	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8003fc2:	b9ff      	cbnz	r7, 8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fce:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003fd4:	f042 0220 	orr.w	r2, r2, #32
 8003fd8:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003fda:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8003fde:	2001      	movs	r0, #1
 8003fe0:	e01e      	b.n	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fe2:	682b      	ldr	r3, [r5, #0]
 8003fe4:	699c      	ldr	r4, [r3, #24]
 8003fe6:	ea26 0404 	bic.w	r4, r6, r4
 8003fea:	b2a4      	uxth	r4, r4
 8003fec:	3c00      	subs	r4, #0
 8003fee:	bf18      	it	ne
 8003ff0:	2401      	movne	r4, #1
 8003ff2:	b1a4      	cbz	r4, 800401e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003ffc:	d1c4      	bne.n	8003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8003ffe:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004002:	d1d8      	bne.n	8003fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004004:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8004008:	2b01      	cmp	r3, #1
 800400a:	d1ea      	bne.n	8003fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 800400c:	682b      	ldr	r3, [r5, #0]
 800400e:	695c      	ldr	r4, [r3, #20]
 8004010:	ea26 0404 	bic.w	r4, r6, r4
 8004014:	b2a4      	uxth	r4, r4
 8004016:	3c00      	subs	r4, #0
 8004018:	bf18      	it	ne
 800401a:	2401      	movne	r4, #1
 800401c:	e7e9      	b.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 800401e:	2000      	movs	r0, #0
}
 8004020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004024 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4604      	mov	r4, r0
 8004028:	460d      	mov	r5, r1
 800402a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004034:	d11c      	bne.n	8004070 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004036:	4620      	mov	r0, r4
 8004038:	f7ff ff4c 	bl	8003ed4 <I2C_IsAcknowledgeFailed>
 800403c:	b9d0      	cbnz	r0, 8004074 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800403e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004042:	d0f3      	beq.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004044:	f7ff fb70 	bl	8003728 <HAL_GetTick>
 8004048:	1b80      	subs	r0, r0, r6
 800404a:	42a8      	cmp	r0, r5
 800404c:	d801      	bhi.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800404e:	2d00      	cmp	r5, #0
 8004050:	d1ec      	bne.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004052:	2300      	movs	r3, #0
 8004054:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004056:	2220      	movs	r2, #32
 8004058:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800405c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004060:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004062:	f042 0220 	orr.w	r2, r2, #32
 8004066:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004068:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800406c:	2001      	movs	r0, #1
 800406e:	e000      	b.n	8004072 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004070:	2000      	movs	r0, #0
}
 8004072:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004074:	2001      	movs	r0, #1
 8004076:	e7fc      	b.n	8004072 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08004078 <I2C_RequestMemoryWrite>:
{
 8004078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800407c:	b085      	sub	sp, #20
 800407e:	4604      	mov	r4, r0
 8004080:	460d      	mov	r5, r1
 8004082:	4691      	mov	r9, r2
 8004084:	461f      	mov	r7, r3
 8004086:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800408a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408c:	6803      	ldr	r3, [r0, #0]
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004094:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004096:	9600      	str	r6, [sp, #0]
 8004098:	4643      	mov	r3, r8
 800409a:	2200      	movs	r2, #0
 800409c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a0:	f7ff ff31 	bl	8003f06 <I2C_WaitOnFlagUntilTimeout>
 80040a4:	b960      	cbnz	r0, 80040c0 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80040ac:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ae:	4633      	mov	r3, r6
 80040b0:	4642      	mov	r2, r8
 80040b2:	4926      	ldr	r1, [pc, #152]	; (800414c <I2C_RequestMemoryWrite+0xd4>)
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7ff ff60 	bl	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ba:	b168      	cbz	r0, 80040d8 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80040bc:	2001      	movs	r0, #1
 80040be:	e008      	b.n	80040d2 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80040c8:	d002      	beq.n	80040d0 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ce:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80040d0:	2003      	movs	r0, #3
}
 80040d2:	b005      	add	sp, #20
 80040d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d8:	2300      	movs	r3, #0
 80040da:	9303      	str	r3, [sp, #12]
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	9203      	str	r2, [sp, #12]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	9303      	str	r3, [sp, #12]
 80040e6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e8:	4632      	mov	r2, r6
 80040ea:	4641      	mov	r1, r8
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff ff99 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 80040f2:	b930      	cbnz	r0, 8004102 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040f4:	2f01      	cmp	r7, #1
 80040f6:	d10f      	bne.n	8004118 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	fa5f f689 	uxtb.w	r6, r9
 80040fe:	611e      	str	r6, [r3, #16]
 8004100:	e7e7      	b.n	80040d2 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004104:	2b04      	cmp	r3, #4
 8004106:	d001      	beq.n	800410c <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8004108:	2001      	movs	r0, #1
 800410a:	e7e2      	b.n	80040d2 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	6822      	ldr	r2, [r4, #0]
 800410e:	6813      	ldr	r3, [r2, #0]
 8004110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e7f7      	b.n	8004108 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800411e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004120:	4632      	mov	r2, r6
 8004122:	4641      	mov	r1, r8
 8004124:	4620      	mov	r0, r4
 8004126:	f7ff ff7d 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 800412a:	b920      	cbnz	r0, 8004136 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	fa5f f689 	uxtb.w	r6, r9
 8004132:	611e      	str	r6, [r3, #16]
 8004134:	e7cd      	b.n	80040d2 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004138:	2b04      	cmp	r3, #4
 800413a:	d001      	beq.n	8004140 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 800413c:	2001      	movs	r0, #1
 800413e:	e7c8      	b.n	80040d2 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e7f7      	b.n	800413c <I2C_RequestMemoryWrite+0xc4>
 800414c:	00010002 	.word	0x00010002

08004150 <I2C_RequestMemoryRead>:
{
 8004150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	4604      	mov	r4, r0
 8004158:	460d      	mov	r5, r1
 800415a:	4616      	mov	r6, r2
 800415c:	4699      	mov	r9, r3
 800415e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004160:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004164:	6802      	ldr	r2, [r0, #0]
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800416c:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800416e:	6803      	ldr	r3, [r0, #0]
 8004170:	6819      	ldr	r1, [r3, #0]
 8004172:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004176:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004178:	f8cd 8000 	str.w	r8, [sp]
 800417c:	463b      	mov	r3, r7
 800417e:	2200      	movs	r2, #0
 8004180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004184:	f7ff febf 	bl	8003f06 <I2C_WaitOnFlagUntilTimeout>
 8004188:	b970      	cbnz	r0, 80041a8 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800418a:	fa5f fa85 	uxtb.w	sl, r5
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004194:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004196:	4643      	mov	r3, r8
 8004198:	463a      	mov	r2, r7
 800419a:	4941      	ldr	r1, [pc, #260]	; (80042a0 <I2C_RequestMemoryRead+0x150>)
 800419c:	4620      	mov	r0, r4
 800419e:	f7ff feec 	bl	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a2:	b168      	cbz	r0, 80041c0 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 80041a4:	2001      	movs	r0, #1
 80041a6:	e008      	b.n	80041ba <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041b0:	d002      	beq.n	80041b8 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041b6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80041b8:	2003      	movs	r0, #3
}
 80041ba:	b004      	add	sp, #16
 80041bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c0:	2300      	movs	r3, #0
 80041c2:	9303      	str	r3, [sp, #12]
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	9203      	str	r2, [sp, #12]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	9303      	str	r3, [sp, #12]
 80041ce:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d0:	4642      	mov	r2, r8
 80041d2:	4639      	mov	r1, r7
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7ff ff25 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 80041da:	b980      	cbnz	r0, 80041fe <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041dc:	f1b9 0f01 	cmp.w	r9, #1
 80041e0:	d118      	bne.n	8004214 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	b2f6      	uxtb	r6, r6
 80041e6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e8:	4642      	mov	r2, r8
 80041ea:	4639      	mov	r1, r7
 80041ec:	4620      	mov	r0, r4
 80041ee:	f7ff ff19 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f2:	b368      	cbz	r0, 8004250 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d024      	beq.n	8004244 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 80041fa:	2001      	movs	r0, #1
 80041fc:	e7dd      	b.n	80041ba <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004200:	2b04      	cmp	r3, #4
 8004202:	d001      	beq.n	8004208 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8004204:	2001      	movs	r0, #1
 8004206:	e7d8      	b.n	80041ba <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	6822      	ldr	r2, [r4, #0]
 800420a:	6813      	ldr	r3, [r2, #0]
 800420c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e7f7      	b.n	8004204 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	0a32      	lsrs	r2, r6, #8
 8004218:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800421a:	4642      	mov	r2, r8
 800421c:	4639      	mov	r1, r7
 800421e:	4620      	mov	r0, r4
 8004220:	f7ff ff00 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 8004224:	b918      	cbnz	r0, 800422e <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	b2f6      	uxtb	r6, r6
 800422a:	611e      	str	r6, [r3, #16]
 800422c:	e7dc      	b.n	80041e8 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004230:	2b04      	cmp	r3, #4
 8004232:	d001      	beq.n	8004238 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8004234:	2001      	movs	r0, #1
 8004236:	e7c0      	b.n	80041ba <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	6822      	ldr	r2, [r4, #0]
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e7f7      	b.n	8004234 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004244:	6822      	ldr	r2, [r4, #0]
 8004246:	6813      	ldr	r3, [r2, #0]
 8004248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e7d4      	b.n	80041fa <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004250:	6822      	ldr	r2, [r4, #0]
 8004252:	6813      	ldr	r3, [r2, #0]
 8004254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004258:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800425a:	f8cd 8000 	str.w	r8, [sp]
 800425e:	463b      	mov	r3, r7
 8004260:	2200      	movs	r2, #0
 8004262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004266:	4620      	mov	r0, r4
 8004268:	f7ff fe4d 	bl	8003f06 <I2C_WaitOnFlagUntilTimeout>
 800426c:	b968      	cbnz	r0, 800428a <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800426e:	6822      	ldr	r2, [r4, #0]
 8004270:	f04a 0301 	orr.w	r3, sl, #1
 8004274:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004276:	4643      	mov	r3, r8
 8004278:	463a      	mov	r2, r7
 800427a:	4909      	ldr	r1, [pc, #36]	; (80042a0 <I2C_RequestMemoryRead+0x150>)
 800427c:	4620      	mov	r0, r4
 800427e:	f7ff fe7c 	bl	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004282:	2800      	cmp	r0, #0
 8004284:	d099      	beq.n	80041ba <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8004286:	2001      	movs	r0, #1
 8004288:	e797      	b.n	80041ba <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004292:	d002      	beq.n	800429a <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004298:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800429a:	2003      	movs	r0, #3
 800429c:	e78d      	b.n	80041ba <I2C_RequestMemoryRead+0x6a>
 800429e:	bf00      	nop
 80042a0:	00010002 	.word	0x00010002

080042a4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	4604      	mov	r4, r0
 80042a8:	460d      	mov	r5, r1
 80042aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f013 0f04 	tst.w	r3, #4
 80042b4:	d11c      	bne.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042b6:	4620      	mov	r0, r4
 80042b8:	f7ff fe0c 	bl	8003ed4 <I2C_IsAcknowledgeFailed>
 80042bc:	b9d0      	cbnz	r0, 80042f4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80042be:	f1b5 3fff 	cmp.w	r5, #4294967295
 80042c2:	d0f3      	beq.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c4:	f7ff fa30 	bl	8003728 <HAL_GetTick>
 80042c8:	1b80      	subs	r0, r0, r6
 80042ca:	42a8      	cmp	r0, r5
 80042cc:	d801      	bhi.n	80042d2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	d1ec      	bne.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042d6:	2220      	movs	r2, #32
 80042d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80042e2:	f042 0220 	orr.w	r2, r2, #32
 80042e6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80042e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80042ec:	2001      	movs	r0, #1
 80042ee:	e000      	b.n	80042f2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80042f0:	2000      	movs	r0, #0
}
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80042f4:	2001      	movs	r0, #1
 80042f6:	e7fc      	b.n	80042f2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080042f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4605      	mov	r5, r0
 80042fc:	460c      	mov	r4, r1
 80042fe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	6959      	ldr	r1, [r3, #20]
 8004304:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004308:	d129      	bne.n	800435e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800430a:	6959      	ldr	r1, [r3, #20]
 800430c:	f011 0f10 	tst.w	r1, #16
 8004310:	d115      	bne.n	800433e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7ff fa09 	bl	8003728 <HAL_GetTick>
 8004316:	1b80      	subs	r0, r0, r6
 8004318:	42a0      	cmp	r0, r4
 800431a:	d801      	bhi.n	8004320 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 800431c:	2c00      	cmp	r4, #0
 800431e:	d1ef      	bne.n	8004300 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004320:	2300      	movs	r3, #0
 8004322:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	2220      	movs	r2, #32
 8004326:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800432e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004330:	f042 0220 	orr.w	r2, r2, #32
 8004334:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004336:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800433a:	2001      	movs	r0, #1
}
 800433c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800433e:	f06f 0210 	mvn.w	r2, #16
 8004342:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004344:	2300      	movs	r3, #0
 8004346:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004348:	2220      	movs	r2, #32
 800434a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004352:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004354:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004356:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800435a:	2001      	movs	r0, #1
 800435c:	e7ee      	b.n	800433c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 800435e:	2000      	movs	r0, #0
 8004360:	e7ec      	b.n	800433c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08004364 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004364:	2800      	cmp	r0, #0
 8004366:	f000 80cc 	beq.w	8004502 <HAL_I2C_Init+0x19e>
{
 800436a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800436e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004372:	2b00      	cmp	r3, #0
 8004374:	d077      	beq.n	8004466 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004376:	2324      	movs	r3, #36	; 0x24
 8004378:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004386:	6822      	ldr	r2, [r4, #0]
 8004388:	6813      	ldr	r3, [r2, #0]
 800438a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004398:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800439a:	f000 ffa7 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	4b5a      	ldr	r3, [pc, #360]	; (800450c <HAL_I2C_Init+0x1a8>)
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d864      	bhi.n	8004470 <HAL_I2C_Init+0x10c>
 80043a6:	4b5a      	ldr	r3, [pc, #360]	; (8004510 <HAL_I2C_Init+0x1ac>)
 80043a8:	4298      	cmp	r0, r3
 80043aa:	bf8c      	ite	hi
 80043ac:	2300      	movhi	r3, #0
 80043ae:	2301      	movls	r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 80a8 	bne.w	8004506 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80043b6:	4d57      	ldr	r5, [pc, #348]	; (8004514 <HAL_I2C_Init+0x1b0>)
 80043b8:	fba5 3500 	umull	r3, r5, r5, r0
 80043bc:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043be:	6826      	ldr	r6, [r4, #0]
 80043c0:	6871      	ldr	r1, [r6, #4]
 80043c2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80043c6:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80043ca:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043cc:	6821      	ldr	r1, [r4, #0]
 80043ce:	6a0b      	ldr	r3, [r1, #32]
 80043d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043d4:	6865      	ldr	r5, [r4, #4]
 80043d6:	4a4d      	ldr	r2, [pc, #308]	; (800450c <HAL_I2C_Init+0x1a8>)
 80043d8:	4295      	cmp	r5, r2
 80043da:	d84f      	bhi.n	800447c <HAL_I2C_Init+0x118>
 80043dc:	1c7a      	adds	r2, r7, #1
 80043de:	4313      	orrs	r3, r2
 80043e0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043e2:	6825      	ldr	r5, [r4, #0]
 80043e4:	69e9      	ldr	r1, [r5, #28]
 80043e6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80043ea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80043ee:	6863      	ldr	r3, [r4, #4]
 80043f0:	4a46      	ldr	r2, [pc, #280]	; (800450c <HAL_I2C_Init+0x1a8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d84c      	bhi.n	8004490 <HAL_I2C_Init+0x12c>
 80043f6:	3801      	subs	r0, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80043fe:	3001      	adds	r0, #1
 8004400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004404:	4218      	tst	r0, r3
 8004406:	d078      	beq.n	80044fa <HAL_I2C_Init+0x196>
 8004408:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800440c:	430b      	orrs	r3, r1
 800440e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004410:	6821      	ldr	r1, [r4, #0]
 8004412:	680b      	ldr	r3, [r1, #0]
 8004414:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004418:	69e2      	ldr	r2, [r4, #28]
 800441a:	6a20      	ldr	r0, [r4, #32]
 800441c:	4302      	orrs	r2, r0
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004422:	6821      	ldr	r1, [r4, #0]
 8004424:	688b      	ldr	r3, [r1, #8]
 8004426:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800442a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800442e:	6922      	ldr	r2, [r4, #16]
 8004430:	68e0      	ldr	r0, [r4, #12]
 8004432:	4302      	orrs	r2, r0
 8004434:	4313      	orrs	r3, r2
 8004436:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004438:	6821      	ldr	r1, [r4, #0]
 800443a:	68cb      	ldr	r3, [r1, #12]
 800443c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004440:	6962      	ldr	r2, [r4, #20]
 8004442:	69a0      	ldr	r0, [r4, #24]
 8004444:	4302      	orrs	r2, r0
 8004446:	4313      	orrs	r3, r2
 8004448:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	6813      	ldr	r3, [r2, #0]
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004454:	2000      	movs	r0, #0
 8004456:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004458:	2320      	movs	r3, #32
 800445a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800445e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8004464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004466:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800446a:	f7fe fa99 	bl	80029a0 <HAL_I2C_MspInit>
 800446e:	e782      	b.n	8004376 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004470:	4b29      	ldr	r3, [pc, #164]	; (8004518 <HAL_I2C_Init+0x1b4>)
 8004472:	4298      	cmp	r0, r3
 8004474:	bf8c      	ite	hi
 8004476:	2300      	movhi	r3, #0
 8004478:	2301      	movls	r3, #1
 800447a:	e799      	b.n	80043b0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800447c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004480:	fb02 f207 	mul.w	r2, r2, r7
 8004484:	4d25      	ldr	r5, [pc, #148]	; (800451c <HAL_I2C_Init+0x1b8>)
 8004486:	fba5 5202 	umull	r5, r2, r5, r2
 800448a:	0992      	lsrs	r2, r2, #6
 800448c:	3201      	adds	r2, #1
 800448e:	e7a6      	b.n	80043de <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004490:	68a2      	ldr	r2, [r4, #8]
 8004492:	b9ba      	cbnz	r2, 80044c4 <HAL_I2C_Init+0x160>
 8004494:	1e46      	subs	r6, r0, #1
 8004496:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800449a:	fbb6 f6f7 	udiv	r6, r6, r7
 800449e:	3601      	adds	r6, #1
 80044a0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80044a4:	fab6 f686 	clz	r6, r6
 80044a8:	0976      	lsrs	r6, r6, #5
 80044aa:	bb46      	cbnz	r6, 80044fe <HAL_I2C_Init+0x19a>
 80044ac:	b9c2      	cbnz	r2, 80044e0 <HAL_I2C_Init+0x17c>
 80044ae:	1e42      	subs	r2, r0, #1
 80044b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80044b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044b8:	3201      	adds	r2, #1
 80044ba:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80044be:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80044c2:	e7a3      	b.n	800440c <HAL_I2C_Init+0xa8>
 80044c4:	1e46      	subs	r6, r0, #1
 80044c6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80044ca:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80044ce:	fbb6 f6f7 	udiv	r6, r6, r7
 80044d2:	3601      	adds	r6, #1
 80044d4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80044d8:	fab6 f686 	clz	r6, r6
 80044dc:	0976      	lsrs	r6, r6, #5
 80044de:	e7e4      	b.n	80044aa <HAL_I2C_Init+0x146>
 80044e0:	1e42      	subs	r2, r0, #1
 80044e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ee:	3201      	adds	r2, #1
 80044f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80044f4:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80044f8:	e788      	b.n	800440c <HAL_I2C_Init+0xa8>
 80044fa:	2304      	movs	r3, #4
 80044fc:	e786      	b.n	800440c <HAL_I2C_Init+0xa8>
 80044fe:	2301      	movs	r3, #1
 8004500:	e784      	b.n	800440c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8004502:	2001      	movs	r0, #1
}
 8004504:	4770      	bx	lr
    return HAL_ERROR;
 8004506:	2001      	movs	r0, #1
 8004508:	e7ac      	b.n	8004464 <HAL_I2C_Init+0x100>
 800450a:	bf00      	nop
 800450c:	000186a0 	.word	0x000186a0
 8004510:	001e847f 	.word	0x001e847f
 8004514:	431bde83 	.word	0x431bde83
 8004518:	003d08ff 	.word	0x003d08ff
 800451c:	10624dd3 	.word	0x10624dd3

08004520 <HAL_I2C_Mem_Write>:
{
 8004520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004524:	b083      	sub	sp, #12
 8004526:	4604      	mov	r4, r0
 8004528:	460f      	mov	r7, r1
 800452a:	4690      	mov	r8, r2
 800452c:	4699      	mov	r9, r3
 800452e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7ff f8fa 	bl	8003728 <HAL_GetTick>
 8004534:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004536:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800453a:	b2c0      	uxtb	r0, r0
 800453c:	2820      	cmp	r0, #32
 800453e:	d003      	beq.n	8004548 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8004540:	2002      	movs	r0, #2
}
 8004542:	b003      	add	sp, #12
 8004544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004548:	9500      	str	r5, [sp, #0]
 800454a:	2319      	movs	r3, #25
 800454c:	2201      	movs	r2, #1
 800454e:	494b      	ldr	r1, [pc, #300]	; (800467c <HAL_I2C_Mem_Write+0x15c>)
 8004550:	4620      	mov	r0, r4
 8004552:	f7ff fcd8 	bl	8003f06 <I2C_WaitOnFlagUntilTimeout>
 8004556:	2800      	cmp	r0, #0
 8004558:	f040 8089 	bne.w	800466e <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 800455c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004560:	2b01      	cmp	r3, #1
 8004562:	f000 8086 	beq.w	8004672 <HAL_I2C_Mem_Write+0x152>
 8004566:	2301      	movs	r3, #1
 8004568:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	f012 0f01 	tst.w	r2, #1
 8004574:	d103      	bne.n	800457e <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	6813      	ldr	r3, [r2, #0]
 8004582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004586:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004588:	2321      	movs	r3, #33	; 0x21
 800458a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800458e:	2340      	movs	r3, #64	; 0x40
 8004590:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004594:	2300      	movs	r3, #0
 8004596:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800459a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800459c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80045a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045a4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a6:	4b36      	ldr	r3, [pc, #216]	; (8004680 <HAL_I2C_Mem_Write+0x160>)
 80045a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045aa:	9501      	str	r5, [sp, #4]
 80045ac:	9600      	str	r6, [sp, #0]
 80045ae:	464b      	mov	r3, r9
 80045b0:	4642      	mov	r2, r8
 80045b2:	4639      	mov	r1, r7
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7ff fd5f 	bl	8004078 <I2C_RequestMemoryWrite>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d15b      	bne.n	8004676 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80045be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d035      	beq.n	8004630 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c4:	462a      	mov	r2, r5
 80045c6:	4631      	mov	r1, r6
 80045c8:	4620      	mov	r0, r4
 80045ca:	f7ff fd2b 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ce:	bb20      	cbnz	r0, 800461a <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	7812      	ldrb	r2, [r2, #0]
 80045d6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80045d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80045da:	1c4b      	adds	r3, r1, #1
 80045dc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80045de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80045e0:	3a01      	subs	r2, #1
 80045e2:	b292      	uxth	r2, r2
 80045e4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80045e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	6958      	ldr	r0, [r3, #20]
 80045f4:	f010 0f04 	tst.w	r0, #4
 80045f8:	d0e1      	beq.n	80045be <HAL_I2C_Mem_Write+0x9e>
 80045fa:	2a00      	cmp	r2, #0
 80045fc:	d0df      	beq.n	80045be <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fe:	784a      	ldrb	r2, [r1, #1]
 8004600:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004604:	3301      	adds	r3, #1
 8004606:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004608:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800460a:	3b01      	subs	r3, #1
 800460c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800460e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29b      	uxth	r3, r3
 8004616:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004618:	e7d1      	b.n	80045be <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800461c:	2b04      	cmp	r3, #4
 800461e:	d001      	beq.n	8004624 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8004620:	2001      	movs	r0, #1
 8004622:	e78e      	b.n	8004542 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004624:	6822      	ldr	r2, [r4, #0]
 8004626:	6813      	ldr	r3, [r2, #0]
 8004628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e7f7      	b.n	8004620 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004630:	462a      	mov	r2, r5
 8004632:	4631      	mov	r1, r6
 8004634:	4620      	mov	r0, r4
 8004636:	f7ff fe35 	bl	80042a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800463a:	b150      	cbz	r0, 8004652 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800463c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800463e:	2b04      	cmp	r3, #4
 8004640:	d001      	beq.n	8004646 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8004642:	2001      	movs	r0, #1
 8004644:	e77d      	b.n	8004542 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	6813      	ldr	r3, [r2, #0]
 800464a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	e7f7      	b.n	8004642 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	6813      	ldr	r3, [r2, #0]
 8004656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800465a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800465c:	2320      	movs	r3, #32
 800465e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004662:	2300      	movs	r3, #0
 8004664:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004668:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800466c:	e769      	b.n	8004542 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800466e:	2002      	movs	r0, #2
 8004670:	e767      	b.n	8004542 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8004672:	2002      	movs	r0, #2
 8004674:	e765      	b.n	8004542 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8004676:	2001      	movs	r0, #1
 8004678:	e763      	b.n	8004542 <HAL_I2C_Mem_Write+0x22>
 800467a:	bf00      	nop
 800467c:	00100002 	.word	0x00100002
 8004680:	ffff0000 	.word	0xffff0000

08004684 <HAL_I2C_Mem_Read>:
{
 8004684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004688:	b087      	sub	sp, #28
 800468a:	4604      	mov	r4, r0
 800468c:	460f      	mov	r7, r1
 800468e:	4690      	mov	r8, r2
 8004690:	4699      	mov	r9, r3
 8004692:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8004694:	f7ff f848 	bl	8003728 <HAL_GetTick>
 8004698:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800469a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800469e:	b2c0      	uxtb	r0, r0
 80046a0:	2820      	cmp	r0, #32
 80046a2:	d004      	beq.n	80046ae <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 80046a4:	2702      	movs	r7, #2
}
 80046a6:	4638      	mov	r0, r7
 80046a8:	b007      	add	sp, #28
 80046aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046ae:	9500      	str	r5, [sp, #0]
 80046b0:	2319      	movs	r3, #25
 80046b2:	2201      	movs	r2, #1
 80046b4:	499d      	ldr	r1, [pc, #628]	; (800492c <HAL_I2C_Mem_Read+0x2a8>)
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff fc25 	bl	8003f06 <I2C_WaitOnFlagUntilTimeout>
 80046bc:	2800      	cmp	r0, #0
 80046be:	f040 8144 	bne.w	800494a <HAL_I2C_Mem_Read+0x2c6>
    __HAL_LOCK(hi2c);
 80046c2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	f000 8141 	beq.w	800494e <HAL_I2C_Mem_Read+0x2ca>
 80046cc:	2301      	movs	r3, #1
 80046ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	f012 0f01 	tst.w	r2, #1
 80046da:	d103      	bne.n	80046e4 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046e4:	6822      	ldr	r2, [r4, #0]
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ec:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046ee:	2322      	movs	r3, #34	; 0x22
 80046f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046f4:	2340      	movs	r3, #64	; 0x40
 80046f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80046fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004700:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004702:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004706:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004708:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800470a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800470c:	4b88      	ldr	r3, [pc, #544]	; (8004930 <HAL_I2C_Mem_Read+0x2ac>)
 800470e:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004710:	9501      	str	r5, [sp, #4]
 8004712:	9600      	str	r6, [sp, #0]
 8004714:	464b      	mov	r3, r9
 8004716:	4642      	mov	r2, r8
 8004718:	4639      	mov	r1, r7
 800471a:	4620      	mov	r0, r4
 800471c:	f7ff fd18 	bl	8004150 <I2C_RequestMemoryRead>
 8004720:	4607      	mov	r7, r0
 8004722:	2800      	cmp	r0, #0
 8004724:	f040 8115 	bne.w	8004952 <HAL_I2C_Mem_Read+0x2ce>
    if (hi2c->XferSize == 0U)
 8004728:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800472a:	b95b      	cbnz	r3, 8004744 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472c:	9302      	str	r3, [sp, #8]
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	9202      	str	r2, [sp, #8]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	9202      	str	r2, [sp, #8]
 8004738:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e098      	b.n	8004876 <HAL_I2C_Mem_Read+0x1f2>
    else if (hi2c->XferSize == 1U)
 8004744:	2b01      	cmp	r3, #1
 8004746:	d00a      	beq.n	800475e <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8004748:	2b02      	cmp	r3, #2
 800474a:	d01a      	beq.n	8004782 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474c:	2300      	movs	r3, #0
 800474e:	9305      	str	r3, [sp, #20]
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	9205      	str	r2, [sp, #20]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	9305      	str	r3, [sp, #20]
 800475a:	9b05      	ldr	r3, [sp, #20]
 800475c:	e08b      	b.n	8004876 <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	6813      	ldr	r3, [r2, #0]
 8004762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004766:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004768:	2300      	movs	r3, #0
 800476a:	9303      	str	r3, [sp, #12]
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	9203      	str	r2, [sp, #12]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	9203      	str	r2, [sp, #12]
 8004776:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e079      	b.n	8004876 <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	6813      	ldr	r3, [r2, #0]
 8004786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800478a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800478c:	6822      	ldr	r2, [r4, #0]
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004794:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	9304      	str	r3, [sp, #16]
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	9204      	str	r2, [sp, #16]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	9b04      	ldr	r3, [sp, #16]
 80047a6:	e066      	b.n	8004876 <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a8:	462a      	mov	r2, r5
 80047aa:	4631      	mov	r1, r6
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7ff fda3 	bl	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	f040 80cf 	bne.w	8004956 <HAL_I2C_Mem_Read+0x2d2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047be:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80047c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047c2:	3301      	adds	r3, #1
 80047c4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80047cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80047d6:	e04e      	b.n	8004876 <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047d8:	9500      	str	r5, [sp, #0]
 80047da:	4633      	mov	r3, r6
 80047dc:	2200      	movs	r2, #0
 80047de:	4955      	ldr	r1, [pc, #340]	; (8004934 <HAL_I2C_Mem_Read+0x2b0>)
 80047e0:	4620      	mov	r0, r4
 80047e2:	f7ff fb90 	bl	8003f06 <I2C_WaitOnFlagUntilTimeout>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	f040 80b7 	bne.w	800495a <HAL_I2C_Mem_Read+0x2d6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ec:	6822      	ldr	r2, [r4, #0]
 80047ee:	6813      	ldr	r3, [r2, #0]
 80047f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047f4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047fc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80047fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004800:	1c53      	adds	r3, r2, #1
 8004802:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004804:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004806:	3b01      	subs	r3, #1
 8004808:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800480a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29b      	uxth	r3, r3
 8004812:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800481a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800481c:	3301      	adds	r3, #1
 800481e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004820:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004826:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29b      	uxth	r3, r3
 800482e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004830:	e021      	b.n	8004876 <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	6813      	ldr	r3, [r2, #0]
 8004836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800483a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004842:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004844:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004846:	1c53      	adds	r3, r2, #1
 8004848:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800484a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800484c:	3b01      	subs	r3, #1
 800484e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004850:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29b      	uxth	r3, r3
 8004858:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004862:	3301      	adds	r3, #1
 8004864:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004866:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004868:	3b01      	subs	r3, #1
 800486a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800486c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29b      	uxth	r3, r3
 8004874:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004876:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	d05d      	beq.n	8004938 <HAL_I2C_Mem_Read+0x2b4>
      if (hi2c->XferSize <= 3U)
 800487c:	2b03      	cmp	r3, #3
 800487e:	d82b      	bhi.n	80048d8 <HAL_I2C_Mem_Read+0x254>
        if (hi2c->XferSize == 1U)
 8004880:	2b01      	cmp	r3, #1
 8004882:	d091      	beq.n	80047a8 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8004884:	2b02      	cmp	r3, #2
 8004886:	d0a7      	beq.n	80047d8 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004888:	9500      	str	r5, [sp, #0]
 800488a:	4633      	mov	r3, r6
 800488c:	2200      	movs	r2, #0
 800488e:	4929      	ldr	r1, [pc, #164]	; (8004934 <HAL_I2C_Mem_Read+0x2b0>)
 8004890:	4620      	mov	r0, r4
 8004892:	f7ff fb38 	bl	8003f06 <I2C_WaitOnFlagUntilTimeout>
 8004896:	2800      	cmp	r0, #0
 8004898:	d161      	bne.n	800495e <HAL_I2C_Mem_Read+0x2da>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048aa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80048ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ae:	3301      	adds	r3, #1
 80048b0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80048b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048b4:	3b01      	subs	r3, #1
 80048b6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80048b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048c2:	9500      	str	r5, [sp, #0]
 80048c4:	4633      	mov	r3, r6
 80048c6:	2200      	movs	r2, #0
 80048c8:	491a      	ldr	r1, [pc, #104]	; (8004934 <HAL_I2C_Mem_Read+0x2b0>)
 80048ca:	4620      	mov	r0, r4
 80048cc:	f7ff fb1b 	bl	8003f06 <I2C_WaitOnFlagUntilTimeout>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d0ae      	beq.n	8004832 <HAL_I2C_Mem_Read+0x1ae>
            return HAL_ERROR;
 80048d4:	2701      	movs	r7, #1
 80048d6:	e6e6      	b.n	80046a6 <HAL_I2C_Mem_Read+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d8:	462a      	mov	r2, r5
 80048da:	4631      	mov	r1, r6
 80048dc:	4620      	mov	r0, r4
 80048de:	f7ff fd0b 	bl	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d13d      	bne.n	8004962 <HAL_I2C_Mem_Read+0x2de>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80048f0:	1c53      	adds	r3, r2, #1
 80048f2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80048f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048f6:	3b01      	subs	r3, #1
 80048f8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80048fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29b      	uxth	r3, r3
 8004902:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	6959      	ldr	r1, [r3, #20]
 8004908:	f011 0f04 	tst.w	r1, #4
 800490c:	d0b3      	beq.n	8004876 <HAL_I2C_Mem_Read+0x1f2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004914:	3301      	adds	r3, #1
 8004916:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004918:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800491a:	3b01      	subs	r3, #1
 800491c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800491e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29b      	uxth	r3, r3
 8004926:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004928:	e7a5      	b.n	8004876 <HAL_I2C_Mem_Read+0x1f2>
 800492a:	bf00      	nop
 800492c:	00100002 	.word	0x00100002
 8004930:	ffff0000 	.word	0xffff0000
 8004934:	00010004 	.word	0x00010004
    hi2c->State = HAL_I2C_STATE_READY;
 8004938:	2320      	movs	r3, #32
 800493a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800493e:	2300      	movs	r3, #0
 8004940:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004944:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004948:	e6ad      	b.n	80046a6 <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 800494a:	2702      	movs	r7, #2
 800494c:	e6ab      	b.n	80046a6 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 800494e:	2702      	movs	r7, #2
 8004950:	e6a9      	b.n	80046a6 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 8004952:	2701      	movs	r7, #1
 8004954:	e6a7      	b.n	80046a6 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8004956:	2701      	movs	r7, #1
 8004958:	e6a5      	b.n	80046a6 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 800495a:	2701      	movs	r7, #1
 800495c:	e6a3      	b.n	80046a6 <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 800495e:	2701      	movs	r7, #1
 8004960:	e6a1      	b.n	80046a6 <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 8004962:	2701      	movs	r7, #1
 8004964:	e69f      	b.n	80046a6 <HAL_I2C_Mem_Read+0x22>
 8004966:	bf00      	nop

08004968 <HAL_I2C_Mem_Read_DMA>:
{
 8004968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800496c:	b087      	sub	sp, #28
 800496e:	4605      	mov	r5, r0
 8004970:	460e      	mov	r6, r1
 8004972:	4617      	mov	r7, r2
 8004974:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8004976:	f7fe fed7 	bl	8003728 <HAL_GetTick>
  __IO uint32_t count = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800497e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b20      	cmp	r3, #32
 8004986:	f040 80e5 	bne.w	8004b54 <HAL_I2C_Mem_Read_DMA+0x1ec>
 800498a:	4681      	mov	r9, r0
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800498c:	4b75      	ldr	r3, [pc, #468]	; (8004b64 <HAL_I2C_Mem_Read_DMA+0x1fc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	08db      	lsrs	r3, r3, #3
 8004992:	4a75      	ldr	r2, [pc, #468]	; (8004b68 <HAL_I2C_Mem_Read_DMA+0x200>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800499e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049a2:	9305      	str	r3, [sp, #20]
      count--;
 80049a4:	9c05      	ldr	r4, [sp, #20]
 80049a6:	3c01      	subs	r4, #1
 80049a8:	9405      	str	r4, [sp, #20]
      if (count == 0U)
 80049aa:	9c05      	ldr	r4, [sp, #20]
 80049ac:	2c00      	cmp	r4, #0
 80049ae:	d055      	beq.n	8004a5c <HAL_I2C_Mem_Read_DMA+0xf4>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	f012 0f02 	tst.w	r2, #2
 80049b8:	d1f4      	bne.n	80049a4 <HAL_I2C_Mem_Read_DMA+0x3c>
    __HAL_LOCK(hi2c);
 80049ba:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 80049be:	2a01      	cmp	r2, #1
 80049c0:	f000 80cc 	beq.w	8004b5c <HAL_I2C_Mem_Read_DMA+0x1f4>
 80049c4:	2201      	movs	r2, #1
 80049c6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	f012 0f01 	tst.w	r2, #1
 80049d0:	d103      	bne.n	80049da <HAL_I2C_Mem_Read_DMA+0x72>
      __HAL_I2C_ENABLE(hi2c);
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049da:	682a      	ldr	r2, [r5, #0]
 80049dc:	6813      	ldr	r3, [r2, #0]
 80049de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049e2:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049e4:	2322      	movs	r3, #34	; 0x22
 80049e6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049ea:	2340      	movs	r3, #64	; 0x40
 80049ec:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80049f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049f6:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049f8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80049fc:	856b      	strh	r3, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049fe:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	852b      	strh	r3, [r5, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a04:	4a59      	ldr	r2, [pc, #356]	; (8004b6c <HAL_I2C_Mem_Read_DMA+0x204>)
 8004a06:	62ea      	str	r2, [r5, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8085 	beq.w	8004b18 <HAL_I2C_Mem_Read_DMA+0x1b0>
      if (hi2c->hdmarx != NULL)
 8004a0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d032      	beq.n	8004a7a <HAL_I2C_Mem_Read_DMA+0x112>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004a14:	4a56      	ldr	r2, [pc, #344]	; (8004b70 <HAL_I2C_Mem_Read_DMA+0x208>)
 8004a16:	63da      	str	r2, [r3, #60]	; 0x3c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004a18:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004a1a:	4a56      	ldr	r2, [pc, #344]	; (8004b74 <HAL_I2C_Mem_Read_DMA+0x20c>)
 8004a1c:	64da      	str	r2, [r3, #76]	; 0x4c
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004a1e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004a20:	2300      	movs	r3, #0
 8004a22:	6413      	str	r3, [r2, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004a24:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004a26:	6453      	str	r3, [r2, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004a28:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004a2a:	6493      	str	r3, [r2, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004a2c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004a2e:	6513      	str	r3, [r2, #80]	; 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004a30:	6829      	ldr	r1, [r5, #0]
 8004a32:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8004a34:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004a36:	3110      	adds	r1, #16
 8004a38:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004a3a:	f7fe ffdf 	bl	80039fc <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8004a3e:	b350      	cbz	r0, 8004a96 <HAL_I2C_Mem_Read_DMA+0x12e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004a40:	2320      	movs	r3, #32
 8004a42:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a46:	2200      	movs	r2, #0
 8004a48:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a4c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004a4e:	f043 0310 	orr.w	r3, r3, #16
 8004a52:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004a54:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8004a58:	2001      	movs	r0, #1
 8004a5a:	e07c      	b.n	8004b56 <HAL_I2C_Mem_Read_DMA+0x1ee>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a60:	2220      	movs	r2, #32
 8004a62:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a66:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a6a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004a6c:	f042 0220 	orr.w	r2, r2, #32
 8004a70:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004a72:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8004a76:	2001      	movs	r0, #1
 8004a78:	e06d      	b.n	8004b56 <HAL_I2C_Mem_Read_DMA+0x1ee>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004a7a:	2320      	movs	r3, #32
 8004a7c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a80:	2200      	movs	r2, #0
 8004a82:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004a86:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8c:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004a8e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8004a92:	2001      	movs	r0, #1
 8004a94:	e05f      	b.n	8004b56 <HAL_I2C_Mem_Read_DMA+0x1ee>
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004a96:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a9a:	2323      	movs	r3, #35	; 0x23
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	4643      	mov	r3, r8
 8004aa0:	463a      	mov	r2, r7
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f7ff fb53 	bl	8004150 <I2C_RequestMemoryRead>
 8004aaa:	b9d8      	cbnz	r0, 8004ae4 <HAL_I2C_Mem_Read_DMA+0x17c>
        if (hi2c->XferSize == 1U)
 8004aac:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d02c      	beq.n	8004b0c <HAL_I2C_Mem_Read_DMA+0x1a4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ab2:	682a      	ldr	r2, [r5, #0]
 8004ab4:	6853      	ldr	r3, [r2, #4]
 8004ab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004aba:	6053      	str	r3, [r2, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abc:	2200      	movs	r2, #0
 8004abe:	9203      	str	r2, [sp, #12]
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6959      	ldr	r1, [r3, #20]
 8004ac4:	9103      	str	r1, [sp, #12]
 8004ac6:	6999      	ldr	r1, [r3, #24]
 8004ac8:	9103      	str	r1, [sp, #12]
 8004aca:	9903      	ldr	r1, [sp, #12]
        __HAL_UNLOCK(hi2c);
 8004acc:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad6:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004ad8:	682a      	ldr	r2, [r5, #0]
 8004ada:	6853      	ldr	r3, [r2, #4]
 8004adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ae0:	6053      	str	r3, [r2, #4]
 8004ae2:	e035      	b.n	8004b50 <HAL_I2C_Mem_Read_DMA+0x1e8>
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004ae4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004ae6:	f7ff f808 	bl	8003afa <HAL_DMA_Abort_IT>
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004aea:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004aec:	2300      	movs	r3, #0
 8004aee:	63d3      	str	r3, [r2, #60]	; 0x3c
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af0:	6829      	ldr	r1, [r5, #0]
 8004af2:	680a      	ldr	r2, [r1, #0]
 8004af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af8:	600a      	str	r2, [r1, #0]
          hi2c->XferSize = 0U;
 8004afa:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004afc:	856b      	strh	r3, [r5, #42]	; 0x2a
          __HAL_I2C_DISABLE(hi2c);
 8004afe:	682a      	ldr	r2, [r5, #0]
 8004b00:	6813      	ldr	r3, [r2, #0]
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 8004b08:	2001      	movs	r0, #1
 8004b0a:	e024      	b.n	8004b56 <HAL_I2C_Mem_Read_DMA+0x1ee>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0c:	682a      	ldr	r2, [r5, #0]
 8004b0e:	6813      	ldr	r3, [r2, #0]
 8004b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e7d1      	b.n	8004abc <HAL_I2C_Mem_Read_DMA+0x154>
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004b18:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b1c:	2323      	movs	r3, #35	; 0x23
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4643      	mov	r3, r8
 8004b22:	463a      	mov	r2, r7
 8004b24:	4631      	mov	r1, r6
 8004b26:	4628      	mov	r0, r5
 8004b28:	f7ff fb12 	bl	8004150 <I2C_RequestMemoryRead>
 8004b2c:	b9c0      	cbnz	r0, 8004b60 <HAL_I2C_Mem_Read_DMA+0x1f8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2e:	2100      	movs	r1, #0
 8004b30:	9104      	str	r1, [sp, #16]
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	9204      	str	r2, [sp, #16]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	9204      	str	r2, [sp, #16]
 8004b3c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b44:	601a      	str	r2, [r3, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8004b46:	2320      	movs	r3, #32
 8004b48:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8004b4c:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
    return HAL_OK;
 8004b50:	2000      	movs	r0, #0
 8004b52:	e000      	b.n	8004b56 <HAL_I2C_Mem_Read_DMA+0x1ee>
    return HAL_BUSY;
 8004b54:	2002      	movs	r0, #2
}
 8004b56:	b007      	add	sp, #28
 8004b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8004b5c:	2002      	movs	r0, #2
 8004b5e:	e7fa      	b.n	8004b56 <HAL_I2C_Mem_Read_DMA+0x1ee>
        return HAL_ERROR;
 8004b60:	2001      	movs	r0, #1
 8004b62:	e7f8      	b.n	8004b56 <HAL_I2C_Mem_Read_DMA+0x1ee>
 8004b64:	200016c4 	.word	0x200016c4
 8004b68:	14f8b589 	.word	0x14f8b589
 8004b6c:	ffff0000 	.word	0xffff0000
 8004b70:	08004bc7 	.word	0x08004bc7
 8004b74:	08004b81 	.word	0x08004b81

08004b78 <HAL_I2C_MasterRxCpltCallback>:
}
 8004b78:	4770      	bx	lr

08004b7a <HAL_I2C_SlaveTxCpltCallback>:
}
 8004b7a:	4770      	bx	lr

08004b7c <HAL_I2C_SlaveRxCpltCallback>:
}
 8004b7c:	4770      	bx	lr

08004b7e <HAL_I2C_ErrorCallback>:
}
 8004b7e:	4770      	bx	lr

08004b80 <I2C_DMAError>:
{
 8004b80:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b82:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8004b84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b86:	b10b      	cbz	r3, 8004b8c <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b88:	2200      	movs	r2, #0
 8004b8a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8004b8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b8e:	b10b      	cbz	r3, 8004b94 <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b90:	2200      	movs	r2, #0
 8004b92:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004b94:	f7ff f8b2 	bl	8003cfc <HAL_DMA_GetError>
 8004b98:	2802      	cmp	r0, #2
 8004b9a:	d100      	bne.n	8004b9e <I2C_DMAError+0x1e>
}
 8004b9c:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	6813      	ldr	r3, [r2, #0]
 8004ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ba6:	6013      	str	r3, [r2, #0]
    hi2c->XferCount = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 8004bac:	2220      	movs	r2, #32
 8004bae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bb8:	f043 0310 	orr.w	r3, r3, #16
 8004bbc:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7ff ffdd 	bl	8004b7e <HAL_I2C_ErrorCallback>
}
 8004bc4:	e7ea      	b.n	8004b9c <I2C_DMAError+0x1c>

08004bc6 <I2C_DMAXferCplt>:
{
 8004bc6:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bc8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004bce:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bd0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004bd4:	b2d1      	uxtb	r1, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bd6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bd8:	6820      	ldr	r0, [r4, #0]
 8004bda:	6842      	ldr	r2, [r0, #4]
 8004bdc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004be0:	6042      	str	r2, [r0, #4]
  if (hi2c->hdmatx != NULL)
 8004be2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004be4:	b10a      	cbz	r2, 8004bea <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004be6:	2000      	movs	r0, #0
 8004be8:	63d0      	str	r0, [r2, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8004bea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bec:	b10a      	cbz	r2, 8004bf2 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004bee:	2000      	movs	r0, #0
 8004bf0:	63d0      	str	r0, [r2, #60]	; 0x3c
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004bf2:	f003 0221 	and.w	r2, r3, #33	; 0x21
 8004bf6:	2a21      	cmp	r2, #33	; 0x21
 8004bf8:	d041      	beq.n	8004c7e <I2C_DMAXferCplt+0xb8>
 8004bfa:	f003 0222 	and.w	r2, r3, #34	; 0x22
 8004bfe:	2a22      	cmp	r2, #34	; 0x22
 8004c00:	d03b      	beq.n	8004c7a <I2C_DMAXferCplt+0xb4>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004c02:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d049      	beq.n	8004c9e <I2C_DMAXferCplt+0xd8>
    if (hi2c->XferCount == (uint16_t)1)
 8004c0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d058      	beq.n	8004cc4 <I2C_DMAXferCplt+0xfe>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	6853      	ldr	r3, [r2, #4]
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1a:	6053      	str	r3, [r2, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004c1c:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004c20:	d006      	beq.n	8004c30 <I2C_DMAXferCplt+0x6a>
 8004c22:	2d08      	cmp	r5, #8
 8004c24:	d004      	beq.n	8004c30 <I2C_DMAXferCplt+0x6a>
 8004c26:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8004c2a:	d001      	beq.n	8004c30 <I2C_DMAXferCplt+0x6a>
 8004c2c:	2d20      	cmp	r5, #32
 8004c2e:	d104      	bne.n	8004c3a <I2C_DMAXferCplt+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c30:	6822      	ldr	r2, [r4, #0]
 8004c32:	6813      	ldr	r3, [r2, #0]
 8004c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c38:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c3a:	6822      	ldr	r2, [r4, #0]
 8004c3c:	6853      	ldr	r3, [r2, #4]
 8004c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c42:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c44:	6822      	ldr	r2, [r4, #0]
 8004c46:	6853      	ldr	r3, [r2, #4]
 8004c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4c:	6053      	str	r3, [r2, #4]
    hi2c->XferCount = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d13b      	bne.n	8004cd0 <I2C_DMAXferCplt+0x10a>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c58:	2320      	movs	r3, #32
 8004c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c5e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d037      	beq.n	8004cd8 <I2C_DMAXferCplt+0x112>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c6e:	2312      	movs	r3, #18
 8004c70:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c72:	4620      	mov	r0, r4
 8004c74:	f7ff ff80 	bl	8004b78 <HAL_I2C_MasterRxCpltCallback>
}
 8004c78:	e011      	b.n	8004c9e <I2C_DMAXferCplt+0xd8>
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004c7a:	2920      	cmp	r1, #32
 8004c7c:	d1c1      	bne.n	8004c02 <I2C_DMAXferCplt+0x3c>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c7e:	6821      	ldr	r1, [r4, #0]
 8004c80:	684a      	ldr	r2, [r1, #4]
 8004c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c86:	604a      	str	r2, [r1, #4]
    hi2c->XferCount = 0U;
 8004c88:	2200      	movs	r2, #0
 8004c8a:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c8c:	2b29      	cmp	r3, #41	; 0x29
 8004c8e:	d007      	beq.n	8004ca0 <I2C_DMAXferCplt+0xda>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c90:	2b2a      	cmp	r3, #42	; 0x2a
 8004c92:	d00e      	beq.n	8004cb2 <I2C_DMAXferCplt+0xec>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c94:	6822      	ldr	r2, [r4, #0]
 8004c96:	6853      	ldr	r3, [r2, #4]
 8004c98:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c9c:	6053      	str	r3, [r2, #4]
}
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ca0:	2321      	movs	r3, #33	; 0x21
 8004ca2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ca4:	2328      	movs	r3, #40	; 0x28
 8004ca6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7ff ff65 	bl	8004b7a <HAL_I2C_SlaveTxCpltCallback>
 8004cb0:	e7f0      	b.n	8004c94 <I2C_DMAXferCplt+0xce>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cb2:	2322      	movs	r3, #34	; 0x22
 8004cb4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cb6:	2328      	movs	r3, #40	; 0x28
 8004cb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f7ff ff5d 	bl	8004b7c <HAL_I2C_SlaveRxCpltCallback>
 8004cc2:	e7e7      	b.n	8004c94 <I2C_DMAXferCplt+0xce>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e7a0      	b.n	8004c12 <I2C_DMAXferCplt+0x4c>
      HAL_I2C_ErrorCallback(hi2c);
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f7ff ff54 	bl	8004b7e <HAL_I2C_ErrorCallback>
 8004cd6:	e7e2      	b.n	8004c9e <I2C_DMAXferCplt+0xd8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cde:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f7fd fda1 	bl	8002828 <HAL_I2C_MemRxCpltCallback>
 8004ce6:	e7da      	b.n	8004c9e <I2C_DMAXferCplt+0xd8>

08004ce8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f000 81df 	beq.w	80050ac <HAL_RCC_OscConfig+0x3c4>
{
 8004cee:	b570      	push	{r4, r5, r6, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf4:	6803      	ldr	r3, [r0, #0]
 8004cf6:	f013 0f01 	tst.w	r3, #1
 8004cfa:	d03b      	beq.n	8004d74 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cfc:	4ba6      	ldr	r3, [pc, #664]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d02c      	beq.n	8004d62 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d08:	4ba3      	ldr	r3, [pc, #652]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d021      	beq.n	8004d58 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d14:	6863      	ldr	r3, [r4, #4]
 8004d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1a:	d04f      	beq.n	8004dbc <HAL_RCC_OscConfig+0xd4>
 8004d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d20:	d052      	beq.n	8004dc8 <HAL_RCC_OscConfig+0xe0>
 8004d22:	4b9d      	ldr	r3, [pc, #628]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d32:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d050      	beq.n	8004ddc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3a:	f7fe fcf5 	bl	8003728 <HAL_GetTick>
 8004d3e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d40:	4b95      	ldr	r3, [pc, #596]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004d48:	d114      	bne.n	8004d74 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4a:	f7fe fced 	bl	8003728 <HAL_GetTick>
 8004d4e:	1b40      	subs	r0, r0, r5
 8004d50:	2864      	cmp	r0, #100	; 0x64
 8004d52:	d9f5      	bls.n	8004d40 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004d54:	2003      	movs	r0, #3
 8004d56:	e1b0      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d58:	4b8f      	ldr	r3, [pc, #572]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004d60:	d0d8      	beq.n	8004d14 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d62:	4b8d      	ldr	r3, [pc, #564]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004d6a:	d003      	beq.n	8004d74 <HAL_RCC_OscConfig+0x8c>
 8004d6c:	6863      	ldr	r3, [r4, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 819e 	beq.w	80050b0 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	f013 0f02 	tst.w	r3, #2
 8004d7a:	d054      	beq.n	8004e26 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d7c:	4b86      	ldr	r3, [pc, #536]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f013 0f0c 	tst.w	r3, #12
 8004d84:	d03e      	beq.n	8004e04 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d86:	4b84      	ldr	r3, [pc, #528]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d033      	beq.n	8004dfa <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d92:	68e3      	ldr	r3, [r4, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d067      	beq.n	8004e68 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d98:	4b80      	ldr	r3, [pc, #512]	; (8004f9c <HAL_RCC_OscConfig+0x2b4>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fe fcc3 	bl	8003728 <HAL_GetTick>
 8004da2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da4:	4b7c      	ldr	r3, [pc, #496]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f013 0f02 	tst.w	r3, #2
 8004dac:	d153      	bne.n	8004e56 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dae:	f7fe fcbb 	bl	8003728 <HAL_GetTick>
 8004db2:	1b40      	subs	r0, r0, r5
 8004db4:	2802      	cmp	r0, #2
 8004db6:	d9f5      	bls.n	8004da4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004db8:	2003      	movs	r0, #3
 8004dba:	e17e      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dbc:	4a76      	ldr	r2, [pc, #472]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e7b5      	b.n	8004d34 <HAL_RCC_OscConfig+0x4c>
 8004dc8:	4b73      	ldr	r3, [pc, #460]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	e7ab      	b.n	8004d34 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004ddc:	f7fe fca4 	bl	8003728 <HAL_GetTick>
 8004de0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004de2:	4b6d      	ldr	r3, [pc, #436]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004dea:	d0c3      	beq.n	8004d74 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dec:	f7fe fc9c 	bl	8003728 <HAL_GetTick>
 8004df0:	1b40      	subs	r0, r0, r5
 8004df2:	2864      	cmp	r0, #100	; 0x64
 8004df4:	d9f5      	bls.n	8004de2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8004df6:	2003      	movs	r0, #3
 8004df8:	e15f      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dfa:	4b67      	ldr	r3, [pc, #412]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004e02:	d1c6      	bne.n	8004d92 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e04:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f013 0f02 	tst.w	r3, #2
 8004e0c:	d003      	beq.n	8004e16 <HAL_RCC_OscConfig+0x12e>
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	f040 814f 	bne.w	80050b4 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e16:	4a60      	ldr	r2, [pc, #384]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004e18:	6813      	ldr	r3, [r2, #0]
 8004e1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004e1e:	6921      	ldr	r1, [r4, #16]
 8004e20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e24:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	f013 0f08 	tst.w	r3, #8
 8004e2c:	d040      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e2e:	6963      	ldr	r3, [r4, #20]
 8004e30:	b363      	cbz	r3, 8004e8c <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e32:	4b5b      	ldr	r3, [pc, #364]	; (8004fa0 <HAL_RCC_OscConfig+0x2b8>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fe fc76 	bl	8003728 <HAL_GetTick>
 8004e3c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3e:	4b56      	ldr	r3, [pc, #344]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e42:	f013 0f02 	tst.w	r3, #2
 8004e46:	d133      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e48:	f7fe fc6e 	bl	8003728 <HAL_GetTick>
 8004e4c:	1b40      	subs	r0, r0, r5
 8004e4e:	2802      	cmp	r0, #2
 8004e50:	d9f5      	bls.n	8004e3e <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8004e52:	2003      	movs	r0, #3
 8004e54:	e131      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e56:	4a50      	ldr	r2, [pc, #320]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004e58:	6813      	ldr	r3, [r2, #0]
 8004e5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004e5e:	6921      	ldr	r1, [r4, #16]
 8004e60:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e7de      	b.n	8004e26 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8004e68:	4b4c      	ldr	r3, [pc, #304]	; (8004f9c <HAL_RCC_OscConfig+0x2b4>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004e6e:	f7fe fc5b 	bl	8003728 <HAL_GetTick>
 8004e72:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e74:	4b48      	ldr	r3, [pc, #288]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f013 0f02 	tst.w	r3, #2
 8004e7c:	d0d3      	beq.n	8004e26 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7e:	f7fe fc53 	bl	8003728 <HAL_GetTick>
 8004e82:	1b40      	subs	r0, r0, r5
 8004e84:	2802      	cmp	r0, #2
 8004e86:	d9f5      	bls.n	8004e74 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8004e88:	2003      	movs	r0, #3
 8004e8a:	e116      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8c:	4b44      	ldr	r3, [pc, #272]	; (8004fa0 <HAL_RCC_OscConfig+0x2b8>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e92:	f7fe fc49 	bl	8003728 <HAL_GetTick>
 8004e96:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e98:	4b3f      	ldr	r3, [pc, #252]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9c:	f013 0f02 	tst.w	r3, #2
 8004ea0:	d006      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea2:	f7fe fc41 	bl	8003728 <HAL_GetTick>
 8004ea6:	1b40      	subs	r0, r0, r5
 8004ea8:	2802      	cmp	r0, #2
 8004eaa:	d9f5      	bls.n	8004e98 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8004eac:	2003      	movs	r0, #3
 8004eae:	e104      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	f013 0f04 	tst.w	r3, #4
 8004eb6:	d078      	beq.n	8004faa <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb8:	4b37      	ldr	r3, [pc, #220]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004ec0:	d10d      	bne.n	8004ede <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	4b34      	ldr	r3, [pc, #208]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004eda:	2501      	movs	r5, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8004ede:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <HAL_RCC_OscConfig+0x2bc>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ee8:	d021      	beq.n	8004f2e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eea:	68a3      	ldr	r3, [r4, #8]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d032      	beq.n	8004f56 <HAL_RCC_OscConfig+0x26e>
 8004ef0:	2b05      	cmp	r3, #5
 8004ef2:	d036      	beq.n	8004f62 <HAL_RCC_OscConfig+0x27a>
 8004ef4:	4b28      	ldr	r3, [pc, #160]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ef8:	f022 0201 	bic.w	r2, r2, #1
 8004efc:	671a      	str	r2, [r3, #112]	; 0x70
 8004efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f00:	f022 0204 	bic.w	r2, r2, #4
 8004f04:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f06:	68a3      	ldr	r3, [r4, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d034      	beq.n	8004f76 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0c:	f7fe fc0c 	bl	8003728 <HAL_GetTick>
 8004f10:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f12:	4b21      	ldr	r3, [pc, #132]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	f013 0f02 	tst.w	r3, #2
 8004f1a:	d145      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1c:	f7fe fc04 	bl	8003728 <HAL_GetTick>
 8004f20:	1b80      	subs	r0, r0, r6
 8004f22:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f26:	4298      	cmp	r0, r3
 8004f28:	d9f3      	bls.n	8004f12 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8004f2a:	2003      	movs	r0, #3
 8004f2c:	e0c5      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <HAL_RCC_OscConfig+0x2bc>)
 8004f30:	6813      	ldr	r3, [r2, #0]
 8004f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f36:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004f38:	f7fe fbf6 	bl	8003728 <HAL_GetTick>
 8004f3c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3e:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <HAL_RCC_OscConfig+0x2bc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f46:	d1d0      	bne.n	8004eea <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f48:	f7fe fbee 	bl	8003728 <HAL_GetTick>
 8004f4c:	1b80      	subs	r0, r0, r6
 8004f4e:	2802      	cmp	r0, #2
 8004f50:	d9f5      	bls.n	8004f3e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8004f52:	2003      	movs	r0, #3
 8004f54:	e0b1      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f56:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004f58:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f60:	e7d1      	b.n	8004f06 <HAL_RCC_OscConfig+0x21e>
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004f64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f66:	f042 0204 	orr.w	r2, r2, #4
 8004f6a:	671a      	str	r2, [r3, #112]	; 0x70
 8004f6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	671a      	str	r2, [r3, #112]	; 0x70
 8004f74:	e7c7      	b.n	8004f06 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f76:	f7fe fbd7 	bl	8003728 <HAL_GetTick>
 8004f7a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <HAL_RCC_OscConfig+0x2b0>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f80:	f013 0f02 	tst.w	r3, #2
 8004f84:	d010      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f86:	f7fe fbcf 	bl	8003728 <HAL_GetTick>
 8004f8a:	1b80      	subs	r0, r0, r6
 8004f8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f90:	4298      	cmp	r0, r3
 8004f92:	d9f3      	bls.n	8004f7c <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8004f94:	2003      	movs	r0, #3
 8004f96:	e090      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	42470000 	.word	0x42470000
 8004fa0:	42470e80 	.word	0x42470e80
 8004fa4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fa8:	b9ed      	cbnz	r5, 8004fe6 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004faa:	69a3      	ldr	r3, [r4, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8083 	beq.w	80050b8 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fb2:	4a49      	ldr	r2, [pc, #292]	; (80050d8 <HAL_RCC_OscConfig+0x3f0>)
 8004fb4:	6892      	ldr	r2, [r2, #8]
 8004fb6:	f002 020c 	and.w	r2, r2, #12
 8004fba:	2a08      	cmp	r2, #8
 8004fbc:	d051      	beq.n	8005062 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d017      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc2:	4b46      	ldr	r3, [pc, #280]	; (80050dc <HAL_RCC_OscConfig+0x3f4>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fe fbae 	bl	8003728 <HAL_GetTick>
 8004fcc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fce:	4b42      	ldr	r3, [pc, #264]	; (80050d8 <HAL_RCC_OscConfig+0x3f0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004fd6:	d042      	beq.n	800505e <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fe fba6 	bl	8003728 <HAL_GetTick>
 8004fdc:	1b00      	subs	r0, r0, r4
 8004fde:	2802      	cmp	r0, #2
 8004fe0:	d9f5      	bls.n	8004fce <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004fe2:	2003      	movs	r0, #3
 8004fe4:	e069      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe6:	4a3c      	ldr	r2, [pc, #240]	; (80050d8 <HAL_RCC_OscConfig+0x3f0>)
 8004fe8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff0:	e7db      	b.n	8004faa <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8004ff2:	4b3a      	ldr	r3, [pc, #232]	; (80050dc <HAL_RCC_OscConfig+0x3f4>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004ff8:	f7fe fb96 	bl	8003728 <HAL_GetTick>
 8004ffc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	4b36      	ldr	r3, [pc, #216]	; (80050d8 <HAL_RCC_OscConfig+0x3f0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005006:	d006      	beq.n	8005016 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005008:	f7fe fb8e 	bl	8003728 <HAL_GetTick>
 800500c:	1b40      	subs	r0, r0, r5
 800500e:	2802      	cmp	r0, #2
 8005010:	d9f5      	bls.n	8004ffe <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8005012:	2003      	movs	r0, #3
 8005014:	e051      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005016:	69e3      	ldr	r3, [r4, #28]
 8005018:	6a22      	ldr	r2, [r4, #32]
 800501a:	4313      	orrs	r3, r2
 800501c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800501e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005022:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005024:	0852      	lsrs	r2, r2, #1
 8005026:	3a01      	subs	r2, #1
 8005028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800502c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800502e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005032:	4a29      	ldr	r2, [pc, #164]	; (80050d8 <HAL_RCC_OscConfig+0x3f0>)
 8005034:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005036:	4b29      	ldr	r3, [pc, #164]	; (80050dc <HAL_RCC_OscConfig+0x3f4>)
 8005038:	2201      	movs	r2, #1
 800503a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800503c:	f7fe fb74 	bl	8003728 <HAL_GetTick>
 8005040:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005042:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <HAL_RCC_OscConfig+0x3f0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800504a:	d106      	bne.n	800505a <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fe fb6c 	bl	8003728 <HAL_GetTick>
 8005050:	1b00      	subs	r0, r0, r4
 8005052:	2802      	cmp	r0, #2
 8005054:	d9f5      	bls.n	8005042 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8005056:	2003      	movs	r0, #3
 8005058:	e02f      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800505a:	2000      	movs	r0, #0
 800505c:	e02d      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
 800505e:	2000      	movs	r0, #0
 8005060:	e02b      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005062:	2b01      	cmp	r3, #1
 8005064:	d02b      	beq.n	80050be <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8005066:	4b1c      	ldr	r3, [pc, #112]	; (80050d8 <HAL_RCC_OscConfig+0x3f0>)
 8005068:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800506e:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005070:	4291      	cmp	r1, r2
 8005072:	d126      	bne.n	80050c2 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005074:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005078:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507a:	428a      	cmp	r2, r1
 800507c:	d123      	bne.n	80050c6 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800507e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005080:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005084:	401a      	ands	r2, r3
 8005086:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800508a:	d11e      	bne.n	80050ca <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800508c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8005090:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005092:	0852      	lsrs	r2, r2, #1
 8005094:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005096:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800509a:	d118      	bne.n	80050ce <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800509c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80050a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80050a6:	d114      	bne.n	80050d2 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80050a8:	2000      	movs	r0, #0
 80050aa:	e006      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 80050ac:	2001      	movs	r0, #1
}
 80050ae:	4770      	bx	lr
        return HAL_ERROR;
 80050b0:	2001      	movs	r0, #1
 80050b2:	e002      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 80050b4:	2001      	movs	r0, #1
 80050b6:	e000      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 80050b8:	2000      	movs	r0, #0
}
 80050ba:	b002      	add	sp, #8
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80050be:	2001      	movs	r0, #1
 80050c0:	e7fb      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 80050c2:	2001      	movs	r0, #1
 80050c4:	e7f9      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
 80050c6:	2001      	movs	r0, #1
 80050c8:	e7f7      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
 80050ca:	2001      	movs	r0, #1
 80050cc:	e7f5      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
 80050ce:	2001      	movs	r0, #1
 80050d0:	e7f3      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
 80050d2:	2001      	movs	r0, #1
 80050d4:	e7f1      	b.n	80050ba <HAL_RCC_OscConfig+0x3d2>
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800
 80050dc:	42470060 	.word	0x42470060

080050e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050e2:	4b24      	ldr	r3, [pc, #144]	; (8005174 <HAL_RCC_GetSysClockFreq+0x94>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d03d      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x8a>
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d13d      	bne.n	800516e <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <HAL_RCC_GetSysClockFreq+0x94>)
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005100:	d012      	beq.n	8005128 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005102:	4b1c      	ldr	r3, [pc, #112]	; (8005174 <HAL_RCC_GetSysClockFreq+0x94>)
 8005104:	6859      	ldr	r1, [r3, #4]
 8005106:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800510a:	2300      	movs	r3, #0
 800510c:	481a      	ldr	r0, [pc, #104]	; (8005178 <HAL_RCC_GetSysClockFreq+0x98>)
 800510e:	fba1 0100 	umull	r0, r1, r1, r0
 8005112:	f7fb fd49 	bl	8000ba8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <HAL_RCC_GetSysClockFreq+0x94>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800511e:	3301      	adds	r3, #1
 8005120:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005122:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005126:	e023      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCC_GetSysClockFreq+0x94>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8005130:	015c      	lsls	r4, r3, #5
 8005132:	2500      	movs	r5, #0
 8005134:	1ae4      	subs	r4, r4, r3
 8005136:	f165 0500 	sbc.w	r5, r5, #0
 800513a:	01ae      	lsls	r6, r5, #6
 800513c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8005140:	01a7      	lsls	r7, r4, #6
 8005142:	1b38      	subs	r0, r7, r4
 8005144:	eb66 0105 	sbc.w	r1, r6, r5
 8005148:	00cc      	lsls	r4, r1, #3
 800514a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800514e:	00c5      	lsls	r5, r0, #3
 8005150:	18e8      	adds	r0, r5, r3
 8005152:	f144 0100 	adc.w	r1, r4, #0
 8005156:	028b      	lsls	r3, r1, #10
 8005158:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800515c:	0284      	lsls	r4, r0, #10
 800515e:	4620      	mov	r0, r4
 8005160:	4619      	mov	r1, r3
 8005162:	2300      	movs	r3, #0
 8005164:	f7fb fd20 	bl	8000ba8 <__aeabi_uldivmod>
 8005168:	e7d5      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800516a:	4803      	ldr	r0, [pc, #12]	; (8005178 <HAL_RCC_GetSysClockFreq+0x98>)
 800516c:	e000      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800516e:	4803      	ldr	r0, [pc, #12]	; (800517c <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005172:	bf00      	nop
 8005174:	40023800 	.word	0x40023800
 8005178:	017d7840 	.word	0x017d7840
 800517c:	00f42400 	.word	0x00f42400

08005180 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005180:	2800      	cmp	r0, #0
 8005182:	f000 809b 	beq.w	80052bc <HAL_RCC_ClockConfig+0x13c>
{
 8005186:	b570      	push	{r4, r5, r6, lr}
 8005188:	460d      	mov	r5, r1
 800518a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800518c:	4b4f      	ldr	r3, [pc, #316]	; (80052cc <HAL_RCC_ClockConfig+0x14c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	428b      	cmp	r3, r1
 8005196:	d208      	bcs.n	80051aa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005198:	b2cb      	uxtb	r3, r1
 800519a:	4a4c      	ldr	r2, [pc, #304]	; (80052cc <HAL_RCC_ClockConfig+0x14c>)
 800519c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	428b      	cmp	r3, r1
 80051a6:	f040 808b 	bne.w	80052c0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	f013 0f02 	tst.w	r3, #2
 80051b0:	d017      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b2:	f013 0f04 	tst.w	r3, #4
 80051b6:	d004      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051b8:	4a45      	ldr	r2, [pc, #276]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 80051ba:	6893      	ldr	r3, [r2, #8]
 80051bc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051c0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	f013 0f08 	tst.w	r3, #8
 80051c8:	d004      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051ca:	4a41      	ldr	r2, [pc, #260]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 80051cc:	6893      	ldr	r3, [r2, #8]
 80051ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051d2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d4:	4a3e      	ldr	r2, [pc, #248]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 80051d6:	6893      	ldr	r3, [r2, #8]
 80051d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051dc:	68a1      	ldr	r1, [r4, #8]
 80051de:	430b      	orrs	r3, r1
 80051e0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	f013 0f01 	tst.w	r3, #1
 80051e8:	d032      	beq.n	8005250 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ea:	6863      	ldr	r3, [r4, #4]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d021      	beq.n	8005234 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051f0:	1e9a      	subs	r2, r3, #2
 80051f2:	2a01      	cmp	r2, #1
 80051f4:	d925      	bls.n	8005242 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f6:	4a36      	ldr	r2, [pc, #216]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	f012 0f02 	tst.w	r2, #2
 80051fe:	d061      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005200:	4933      	ldr	r1, [pc, #204]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 8005202:	688a      	ldr	r2, [r1, #8]
 8005204:	f022 0203 	bic.w	r2, r2, #3
 8005208:	4313      	orrs	r3, r2
 800520a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800520c:	f7fe fa8c 	bl	8003728 <HAL_GetTick>
 8005210:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005212:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	6862      	ldr	r2, [r4, #4]
 800521c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005220:	d016      	beq.n	8005250 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005222:	f7fe fa81 	bl	8003728 <HAL_GetTick>
 8005226:	1b80      	subs	r0, r0, r6
 8005228:	f241 3388 	movw	r3, #5000	; 0x1388
 800522c:	4298      	cmp	r0, r3
 800522e:	d9f0      	bls.n	8005212 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8005230:	2003      	movs	r0, #3
 8005232:	e042      	b.n	80052ba <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005234:	4a26      	ldr	r2, [pc, #152]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800523c:	d1e0      	bne.n	8005200 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800523e:	2001      	movs	r0, #1
 8005240:	e03b      	b.n	80052ba <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	4a23      	ldr	r2, [pc, #140]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800524a:	d1d9      	bne.n	8005200 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800524c:	2001      	movs	r0, #1
 800524e:	e034      	b.n	80052ba <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005250:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <HAL_RCC_ClockConfig+0x14c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	42ab      	cmp	r3, r5
 800525a:	d907      	bls.n	800526c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525c:	b2ea      	uxtb	r2, r5
 800525e:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <HAL_RCC_ClockConfig+0x14c>)
 8005260:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	42ab      	cmp	r3, r5
 800526a:	d12d      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	f013 0f04 	tst.w	r3, #4
 8005272:	d006      	beq.n	8005282 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005274:	4a16      	ldr	r2, [pc, #88]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 8005276:	6893      	ldr	r3, [r2, #8]
 8005278:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800527c:	68e1      	ldr	r1, [r4, #12]
 800527e:	430b      	orrs	r3, r1
 8005280:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	f013 0f08 	tst.w	r3, #8
 8005288:	d007      	beq.n	800529a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800528a:	4a11      	ldr	r2, [pc, #68]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 800528c:	6893      	ldr	r3, [r2, #8]
 800528e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005292:	6921      	ldr	r1, [r4, #16]
 8005294:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005298:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800529a:	f7ff ff21 	bl	80050e0 <HAL_RCC_GetSysClockFreq>
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <HAL_RCC_ClockConfig+0x150>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80052a6:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <HAL_RCC_ClockConfig+0x154>)
 80052a8:	5cd3      	ldrb	r3, [r2, r3]
 80052aa:	40d8      	lsrs	r0, r3
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <HAL_RCC_ClockConfig+0x158>)
 80052ae:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80052b0:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <HAL_RCC_ClockConfig+0x15c>)
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	f7fe f9ec 	bl	8003690 <HAL_InitTick>
  return HAL_OK;
 80052b8:	2000      	movs	r0, #0
}
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80052bc:	2001      	movs	r0, #1
}
 80052be:	4770      	bx	lr
      return HAL_ERROR;
 80052c0:	2001      	movs	r0, #1
 80052c2:	e7fa      	b.n	80052ba <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80052c4:	2001      	movs	r0, #1
 80052c6:	e7f8      	b.n	80052ba <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80052c8:	2001      	movs	r0, #1
 80052ca:	e7f6      	b.n	80052ba <HAL_RCC_ClockConfig+0x13a>
 80052cc:	40023c00 	.word	0x40023c00
 80052d0:	40023800 	.word	0x40023800
 80052d4:	08009be8 	.word	0x08009be8
 80052d8:	200016c4 	.word	0x200016c4
 80052dc:	20001738 	.word	0x20001738

080052e0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80052e0:	4b01      	ldr	r3, [pc, #4]	; (80052e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	200016c4 	.word	0x200016c4

080052ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052ec:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052ee:	f7ff fff7 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 80052f2:	4b04      	ldr	r3, [pc, #16]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x18>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80052fa:	4a03      	ldr	r2, [pc, #12]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80052fc:	5cd3      	ldrb	r3, [r2, r3]
}
 80052fe:	40d8      	lsrs	r0, r3
 8005300:	bd08      	pop	{r3, pc}
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800
 8005308:	08009bf8 	.word	0x08009bf8

0800530c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800530c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800530e:	f7ff ffe7 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 8005312:	4b04      	ldr	r3, [pc, #16]	; (8005324 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800531a:	4a03      	ldr	r2, [pc, #12]	; (8005328 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800531c:	5cd3      	ldrb	r3, [r2, r3]
}
 800531e:	40d8      	lsrs	r0, r3
 8005320:	bd08      	pop	{r3, pc}
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800
 8005328:	08009bf8 	.word	0x08009bf8

0800532c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800532e:	6a03      	ldr	r3, [r0, #32]
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800533a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800533c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005340:	680b      	ldr	r3, [r1, #0]
 8005342:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005344:	f025 0502 	bic.w	r5, r5, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005348:	688b      	ldr	r3, [r1, #8]
 800534a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800534c:	4d10      	ldr	r5, [pc, #64]	; (8005390 <TIM_OC1_SetConfig+0x64>)
 800534e:	42a8      	cmp	r0, r5
 8005350:	d003      	beq.n	800535a <TIM_OC1_SetConfig+0x2e>
 8005352:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005356:	42a8      	cmp	r0, r5
 8005358:	d105      	bne.n	8005366 <TIM_OC1_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800535a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800535e:	68cd      	ldr	r5, [r1, #12]
 8005360:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005362:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005366:	4d0a      	ldr	r5, [pc, #40]	; (8005390 <TIM_OC1_SetConfig+0x64>)
 8005368:	42a8      	cmp	r0, r5
 800536a:	d003      	beq.n	8005374 <TIM_OC1_SetConfig+0x48>
 800536c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005370:	42a8      	cmp	r0, r5
 8005372:	d105      	bne.n	8005380 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005374:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005378:	694d      	ldr	r5, [r1, #20]
 800537a:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800537c:	698a      	ldr	r2, [r1, #24]
 800537e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005380:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005382:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005384:	684a      	ldr	r2, [r1, #4]
 8005386:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005388:	6203      	str	r3, [r0, #32]
}
 800538a:	bc30      	pop	{r4, r5}
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000

08005394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005396:	6a03      	ldr	r3, [r0, #32]
 8005398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053a2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a8:	680d      	ldr	r5, [r1, #0]
 80053aa:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053b0:	688d      	ldr	r5, [r1, #8]
 80053b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053b6:	4d12      	ldr	r5, [pc, #72]	; (8005400 <TIM_OC3_SetConfig+0x6c>)
 80053b8:	42a8      	cmp	r0, r5
 80053ba:	d003      	beq.n	80053c4 <TIM_OC3_SetConfig+0x30>
 80053bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80053c0:	42a8      	cmp	r0, r5
 80053c2:	d106      	bne.n	80053d2 <TIM_OC3_SetConfig+0x3e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053c8:	68cd      	ldr	r5, [r1, #12]
 80053ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d2:	4d0b      	ldr	r5, [pc, #44]	; (8005400 <TIM_OC3_SetConfig+0x6c>)
 80053d4:	42a8      	cmp	r0, r5
 80053d6:	d003      	beq.n	80053e0 <TIM_OC3_SetConfig+0x4c>
 80053d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80053dc:	42a8      	cmp	r0, r5
 80053de:	d107      	bne.n	80053f0 <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053e0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053e4:	694d      	ldr	r5, [r1, #20]
 80053e6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ea:	698d      	ldr	r5, [r1, #24]
 80053ec:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f2:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053f4:	684a      	ldr	r2, [r1, #4]
 80053f6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	6203      	str	r3, [r0, #32]
}
 80053fa:	bc30      	pop	{r4, r5}
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000

08005404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005406:	6a03      	ldr	r3, [r0, #32]
 8005408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800540c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005412:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005414:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005418:	680d      	ldr	r5, [r1, #0]
 800541a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800541e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005422:	688d      	ldr	r5, [r1, #8]
 8005424:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005428:	4d09      	ldr	r5, [pc, #36]	; (8005450 <TIM_OC4_SetConfig+0x4c>)
 800542a:	42a8      	cmp	r0, r5
 800542c:	d003      	beq.n	8005436 <TIM_OC4_SetConfig+0x32>
 800542e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005432:	42a8      	cmp	r0, r5
 8005434:	d104      	bne.n	8005440 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005436:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800543a:	694d      	ldr	r5, [r1, #20]
 800543c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005440:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005442:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005444:	684a      	ldr	r2, [r1, #4]
 8005446:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005448:	6203      	str	r3, [r0, #32]
}
 800544a:	bc30      	pop	{r4, r5}
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40010000 	.word	0x40010000

08005454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005454:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005456:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005458:	6a05      	ldr	r5, [r0, #32]
 800545a:	f025 0501 	bic.w	r5, r5, #1
 800545e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005460:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005462:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005466:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800546a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800546e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005470:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8005472:	6203      	str	r3, [r0, #32]
}
 8005474:	bc30      	pop	{r4, r5}
 8005476:	4770      	bx	lr

08005478 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005478:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547a:	6a05      	ldr	r5, [r0, #32]
 800547c:	f025 0510 	bic.w	r5, r5, #16
 8005480:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005482:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005484:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005486:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800548a:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005492:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005496:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8005498:	6203      	str	r3, [r0, #32]
}
 800549a:	bc30      	pop	{r4, r5}
 800549c:	4770      	bx	lr

0800549e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800549e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a4:	430b      	orrs	r3, r1
 80054a6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054aa:	6083      	str	r3, [r0, #8]
}
 80054ac:	4770      	bx	lr

080054ae <HAL_TIM_PWM_MspInit>:
}
 80054ae:	4770      	bx	lr

080054b0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80054b0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b2:	4a30      	ldr	r2, [pc, #192]	; (8005574 <TIM_Base_SetConfig+0xc4>)
 80054b4:	4290      	cmp	r0, r2
 80054b6:	d012      	beq.n	80054de <TIM_Base_SetConfig+0x2e>
 80054b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80054bc:	d00f      	beq.n	80054de <TIM_Base_SetConfig+0x2e>
 80054be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80054c2:	4290      	cmp	r0, r2
 80054c4:	d00b      	beq.n	80054de <TIM_Base_SetConfig+0x2e>
 80054c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054ca:	4290      	cmp	r0, r2
 80054cc:	d007      	beq.n	80054de <TIM_Base_SetConfig+0x2e>
 80054ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054d2:	4290      	cmp	r0, r2
 80054d4:	d003      	beq.n	80054de <TIM_Base_SetConfig+0x2e>
 80054d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80054da:	4290      	cmp	r0, r2
 80054dc:	d103      	bne.n	80054e6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80054e2:	684a      	ldr	r2, [r1, #4]
 80054e4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e6:	4a23      	ldr	r2, [pc, #140]	; (8005574 <TIM_Base_SetConfig+0xc4>)
 80054e8:	4290      	cmp	r0, r2
 80054ea:	d02a      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 80054ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80054f0:	d027      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 80054f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80054f6:	4290      	cmp	r0, r2
 80054f8:	d023      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 80054fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054fe:	4290      	cmp	r0, r2
 8005500:	d01f      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 8005502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005506:	4290      	cmp	r0, r2
 8005508:	d01b      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 800550a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800550e:	4290      	cmp	r0, r2
 8005510:	d017      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 8005512:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005516:	4290      	cmp	r0, r2
 8005518:	d013      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 800551a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800551e:	4290      	cmp	r0, r2
 8005520:	d00f      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 8005522:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005526:	4290      	cmp	r0, r2
 8005528:	d00b      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 800552a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800552e:	4290      	cmp	r0, r2
 8005530:	d007      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 8005532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005536:	4290      	cmp	r0, r2
 8005538:	d003      	beq.n	8005542 <TIM_Base_SetConfig+0x92>
 800553a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800553e:	4290      	cmp	r0, r2
 8005540:	d103      	bne.n	800554a <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005546:	68ca      	ldr	r2, [r1, #12]
 8005548:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800554a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554e:	694a      	ldr	r2, [r1, #20]
 8005550:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005552:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005554:	688b      	ldr	r3, [r1, #8]
 8005556:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005558:	680b      	ldr	r3, [r1, #0]
 800555a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <TIM_Base_SetConfig+0xc4>)
 800555e:	4298      	cmp	r0, r3
 8005560:	d003      	beq.n	800556a <TIM_Base_SetConfig+0xba>
 8005562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005566:	4298      	cmp	r0, r3
 8005568:	d101      	bne.n	800556e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800556a:	690b      	ldr	r3, [r1, #16]
 800556c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800556e:	2301      	movs	r3, #1
 8005570:	6143      	str	r3, [r0, #20]
}
 8005572:	4770      	bx	lr
 8005574:	40010000 	.word	0x40010000

08005578 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005578:	b340      	cbz	r0, 80055cc <HAL_TIM_Base_Init+0x54>
{
 800557a:	b510      	push	{r4, lr}
 800557c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800557e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005582:	b1f3      	cbz	r3, 80055c2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	2302      	movs	r3, #2
 8005586:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800558a:	4621      	mov	r1, r4
 800558c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005590:	f7ff ff8e 	bl	80054b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005594:	2301      	movs	r3, #1
 8005596:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800559e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80055a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80055a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80055b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80055ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80055be:	2000      	movs	r0, #0
}
 80055c0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80055c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80055c6:	f7fd fb97 	bl	8002cf8 <HAL_TIM_Base_MspInit>
 80055ca:	e7db      	b.n	8005584 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80055cc:	2001      	movs	r0, #1
}
 80055ce:	4770      	bx	lr

080055d0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80055d0:	b340      	cbz	r0, 8005624 <HAL_TIM_PWM_Init+0x54>
{
 80055d2:	b510      	push	{r4, lr}
 80055d4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80055d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80055da:	b1f3      	cbz	r3, 800561a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	2302      	movs	r3, #2
 80055de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e2:	4621      	mov	r1, r4
 80055e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80055e8:	f7ff ff62 	bl	80054b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ec:	2301      	movs	r3, #1
 80055ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80055f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80055fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80055fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005602:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800560a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800560e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005612:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005616:	2000      	movs	r0, #0
}
 8005618:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800561a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800561e:	f7ff ff46 	bl	80054ae <HAL_TIM_PWM_MspInit>
 8005622:	e7db      	b.n	80055dc <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005624:	2001      	movs	r0, #1
}
 8005626:	4770      	bx	lr

08005628 <TIM_OC2_SetConfig>:
{
 8005628:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562a:	6a03      	ldr	r3, [r0, #32]
 800562c:	f023 0310 	bic.w	r3, r3, #16
 8005630:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005632:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005634:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005636:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005638:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800563c:	680d      	ldr	r5, [r1, #0]
 800563e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005642:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005646:	688d      	ldr	r5, [r1, #8]
 8005648:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800564c:	4d11      	ldr	r5, [pc, #68]	; (8005694 <TIM_OC2_SetConfig+0x6c>)
 800564e:	42a8      	cmp	r0, r5
 8005650:	d003      	beq.n	800565a <TIM_OC2_SetConfig+0x32>
 8005652:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005656:	42a8      	cmp	r0, r5
 8005658:	d106      	bne.n	8005668 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 800565a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800565e:	68cd      	ldr	r5, [r1, #12]
 8005660:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005668:	4d0a      	ldr	r5, [pc, #40]	; (8005694 <TIM_OC2_SetConfig+0x6c>)
 800566a:	42a8      	cmp	r0, r5
 800566c:	d003      	beq.n	8005676 <TIM_OC2_SetConfig+0x4e>
 800566e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005672:	42a8      	cmp	r0, r5
 8005674:	d107      	bne.n	8005686 <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005676:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800567a:	694d      	ldr	r5, [r1, #20]
 800567c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005680:	698d      	ldr	r5, [r1, #24]
 8005682:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005686:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005688:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800568a:	684a      	ldr	r2, [r1, #4]
 800568c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800568e:	6203      	str	r3, [r0, #32]
}
 8005690:	bc30      	pop	{r4, r5}
 8005692:	4770      	bx	lr
 8005694:	40010000 	.word	0x40010000

08005698 <HAL_TIM_PWM_ConfigChannel>:
{
 8005698:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800569a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d060      	beq.n	8005764 <HAL_TIM_PWM_ConfigChannel+0xcc>
 80056a2:	4604      	mov	r4, r0
 80056a4:	460d      	mov	r5, r1
 80056a6:	2301      	movs	r3, #1
 80056a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80056ac:	2a0c      	cmp	r2, #12
 80056ae:	d81a      	bhi.n	80056e6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80056b0:	e8df f002 	tbb	[pc, r2]
 80056b4:	19191907 	.word	0x19191907
 80056b8:	1919191d 	.word	0x1919191d
 80056bc:	19191931 	.word	0x19191931
 80056c0:	44          	.byte	0x44
 80056c1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056c2:	6800      	ldr	r0, [r0, #0]
 80056c4:	f7ff fe32 	bl	800532c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056c8:	6822      	ldr	r2, [r4, #0]
 80056ca:	6993      	ldr	r3, [r2, #24]
 80056cc:	f043 0308 	orr.w	r3, r3, #8
 80056d0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	6993      	ldr	r3, [r2, #24]
 80056d6:	f023 0304 	bic.w	r3, r3, #4
 80056da:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056dc:	6822      	ldr	r2, [r4, #0]
 80056de:	6993      	ldr	r3, [r2, #24]
 80056e0:	6929      	ldr	r1, [r5, #16]
 80056e2:	430b      	orrs	r3, r1
 80056e4:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80056e6:	2000      	movs	r0, #0
 80056e8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80056ec:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ee:	6800      	ldr	r0, [r0, #0]
 80056f0:	f7ff ff9a 	bl	8005628 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f4:	6822      	ldr	r2, [r4, #0]
 80056f6:	6993      	ldr	r3, [r2, #24]
 80056f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056fc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	6993      	ldr	r3, [r2, #24]
 8005702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005706:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005708:	6822      	ldr	r2, [r4, #0]
 800570a:	6993      	ldr	r3, [r2, #24]
 800570c:	6929      	ldr	r1, [r5, #16]
 800570e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005712:	6193      	str	r3, [r2, #24]
      break;
 8005714:	e7e7      	b.n	80056e6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005716:	6800      	ldr	r0, [r0, #0]
 8005718:	f7ff fe3c 	bl	8005394 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	69d3      	ldr	r3, [r2, #28]
 8005720:	f043 0308 	orr.w	r3, r3, #8
 8005724:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	69d3      	ldr	r3, [r2, #28]
 800572a:	f023 0304 	bic.w	r3, r3, #4
 800572e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005730:	6822      	ldr	r2, [r4, #0]
 8005732:	69d3      	ldr	r3, [r2, #28]
 8005734:	6929      	ldr	r1, [r5, #16]
 8005736:	430b      	orrs	r3, r1
 8005738:	61d3      	str	r3, [r2, #28]
      break;
 800573a:	e7d4      	b.n	80056e6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800573c:	6800      	ldr	r0, [r0, #0]
 800573e:	f7ff fe61 	bl	8005404 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	69d3      	ldr	r3, [r2, #28]
 8005746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800574a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	69d3      	ldr	r3, [r2, #28]
 8005750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005754:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	69d3      	ldr	r3, [r2, #28]
 800575a:	6929      	ldr	r1, [r5, #16]
 800575c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005760:	61d3      	str	r3, [r2, #28]
      break;
 8005762:	e7c0      	b.n	80056e6 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8005764:	2002      	movs	r0, #2
 8005766:	e7c1      	b.n	80056ec <HAL_TIM_PWM_ConfigChannel+0x54>

08005768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005768:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800576a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800576c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005770:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005774:	430a      	orrs	r2, r1
 8005776:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005778:	6082      	str	r2, [r0, #8]
}
 800577a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005780:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005784:	2b01      	cmp	r3, #1
 8005786:	d066      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0xd6>
{
 8005788:	b510      	push	{r4, lr}
 800578a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800578c:	2301      	movs	r3, #1
 800578e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005792:	2302      	movs	r3, #2
 8005794:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005798:	6802      	ldr	r2, [r0, #0]
 800579a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800579c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80057a4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80057a6:	680b      	ldr	r3, [r1, #0]
 80057a8:	2b60      	cmp	r3, #96	; 0x60
 80057aa:	d040      	beq.n	800582e <HAL_TIM_ConfigClockSource+0xae>
 80057ac:	d822      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x74>
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	d047      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0xc2>
 80057b2:	d90b      	bls.n	80057cc <HAL_TIM_ConfigClockSource+0x4c>
 80057b4:	2b50      	cmp	r3, #80	; 0x50
 80057b6:	d10e      	bne.n	80057d6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b8:	68ca      	ldr	r2, [r1, #12]
 80057ba:	6849      	ldr	r1, [r1, #4]
 80057bc:	6800      	ldr	r0, [r0, #0]
 80057be:	f7ff fe49 	bl	8005454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057c2:	2150      	movs	r1, #80	; 0x50
 80057c4:	6820      	ldr	r0, [r4, #0]
 80057c6:	f7ff fe6a 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 80057ca:	e004      	b.n	80057d6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d00c      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x6a>
 80057d0:	d908      	bls.n	80057e4 <HAL_TIM_ConfigClockSource+0x64>
 80057d2:	2b30      	cmp	r3, #48	; 0x30
 80057d4:	d009      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80057dc:	2000      	movs	r0, #0
 80057de:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80057e2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80057e4:	b10b      	cbz	r3, 80057ea <HAL_TIM_ConfigClockSource+0x6a>
 80057e6:	2b10      	cmp	r3, #16
 80057e8:	d1f5      	bne.n	80057d6 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ea:	4619      	mov	r1, r3
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	f7ff fe56 	bl	800549e <TIM_ITRx_SetConfig>
        break;
 80057f2:	e7f0      	b.n	80057d6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80057f4:	2b70      	cmp	r3, #112	; 0x70
 80057f6:	d00e      	beq.n	8005816 <HAL_TIM_ConfigClockSource+0x96>
 80057f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fc:	d1eb      	bne.n	80057d6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 80057fe:	68cb      	ldr	r3, [r1, #12]
 8005800:	684a      	ldr	r2, [r1, #4]
 8005802:	6889      	ldr	r1, [r1, #8]
 8005804:	6800      	ldr	r0, [r0, #0]
 8005806:	f7ff ffaf 	bl	8005768 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800580a:	6822      	ldr	r2, [r4, #0]
 800580c:	6893      	ldr	r3, [r2, #8]
 800580e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005812:	6093      	str	r3, [r2, #8]
      break;
 8005814:	e7df      	b.n	80057d6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8005816:	68cb      	ldr	r3, [r1, #12]
 8005818:	684a      	ldr	r2, [r1, #4]
 800581a:	6889      	ldr	r1, [r1, #8]
 800581c:	6800      	ldr	r0, [r0, #0]
 800581e:	f7ff ffa3 	bl	8005768 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005822:	6822      	ldr	r2, [r4, #0]
 8005824:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005826:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800582a:	6093      	str	r3, [r2, #8]
      break;
 800582c:	e7d3      	b.n	80057d6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800582e:	68ca      	ldr	r2, [r1, #12]
 8005830:	6849      	ldr	r1, [r1, #4]
 8005832:	6800      	ldr	r0, [r0, #0]
 8005834:	f7ff fe20 	bl	8005478 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005838:	2160      	movs	r1, #96	; 0x60
 800583a:	6820      	ldr	r0, [r4, #0]
 800583c:	f7ff fe2f 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 8005840:	e7c9      	b.n	80057d6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005842:	68ca      	ldr	r2, [r1, #12]
 8005844:	6849      	ldr	r1, [r1, #4]
 8005846:	6800      	ldr	r0, [r0, #0]
 8005848:	f7ff fe04 	bl	8005454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800584c:	2140      	movs	r1, #64	; 0x40
 800584e:	6820      	ldr	r0, [r4, #0]
 8005850:	f7ff fe25 	bl	800549e <TIM_ITRx_SetConfig>
      break;
 8005854:	e7bf      	b.n	80057d6 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8005856:	2002      	movs	r0, #2
}
 8005858:	4770      	bx	lr

0800585a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800585a:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800585c:	f001 011f 	and.w	r1, r1, #31
 8005860:	2301      	movs	r3, #1
 8005862:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005866:	6a03      	ldr	r3, [r0, #32]
 8005868:	ea23 0304 	bic.w	r3, r3, r4
 800586c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800586e:	6a03      	ldr	r3, [r0, #32]
 8005870:	fa02 f101 	lsl.w	r1, r2, r1
 8005874:	430b      	orrs	r3, r1
 8005876:	6203      	str	r3, [r0, #32]
}
 8005878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <HAL_TIM_PWM_Start>:
{
 8005880:	b510      	push	{r4, lr}
 8005882:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005884:	4608      	mov	r0, r1
 8005886:	2900      	cmp	r1, #0
 8005888:	d142      	bne.n	8005910 <HAL_TIM_PWM_Start+0x90>
 800588a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800588e:	b2db      	uxtb	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	bf18      	it	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d16e      	bne.n	8005978 <HAL_TIM_PWM_Start+0xf8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800589a:	2800      	cmp	r0, #0
 800589c:	d151      	bne.n	8005942 <HAL_TIM_PWM_Start+0xc2>
 800589e:	2302      	movs	r3, #2
 80058a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058a4:	2201      	movs	r2, #1
 80058a6:	4601      	mov	r1, r0
 80058a8:	6820      	ldr	r0, [r4, #0]
 80058aa:	f7ff ffd6 	bl	800585a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	4a33      	ldr	r2, [pc, #204]	; (8005980 <HAL_TIM_PWM_Start+0x100>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d003      	beq.n	80058be <HAL_TIM_PWM_Start+0x3e>
 80058b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d103      	bne.n	80058c6 <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 80058be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058c4:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	4a2d      	ldr	r2, [pc, #180]	; (8005980 <HAL_TIM_PWM_Start+0x100>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d049      	beq.n	8005962 <HAL_TIM_PWM_Start+0xe2>
 80058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d2:	d046      	beq.n	8005962 <HAL_TIM_PWM_Start+0xe2>
 80058d4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80058d8:	4293      	cmp	r3, r2
 80058da:	d042      	beq.n	8005962 <HAL_TIM_PWM_Start+0xe2>
 80058dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d03e      	beq.n	8005962 <HAL_TIM_PWM_Start+0xe2>
 80058e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d03a      	beq.n	8005962 <HAL_TIM_PWM_Start+0xe2>
 80058ec:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d036      	beq.n	8005962 <HAL_TIM_PWM_Start+0xe2>
 80058f4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d032      	beq.n	8005962 <HAL_TIM_PWM_Start+0xe2>
 80058fc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005900:	4293      	cmp	r3, r2
 8005902:	d02e      	beq.n	8005962 <HAL_TIM_PWM_Start+0xe2>
    __HAL_TIM_ENABLE(htim);
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800590c:	2000      	movs	r0, #0
 800590e:	e032      	b.n	8005976 <HAL_TIM_PWM_Start+0xf6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005910:	2904      	cmp	r1, #4
 8005912:	d008      	beq.n	8005926 <HAL_TIM_PWM_Start+0xa6>
 8005914:	2908      	cmp	r1, #8
 8005916:	d00d      	beq.n	8005934 <HAL_TIM_PWM_Start+0xb4>
 8005918:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800591c:	b2db      	uxtb	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	bf18      	it	ne
 8005922:	2301      	movne	r3, #1
 8005924:	e7b7      	b.n	8005896 <HAL_TIM_PWM_Start+0x16>
 8005926:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800592a:	b2db      	uxtb	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	bf18      	it	ne
 8005930:	2301      	movne	r3, #1
 8005932:	e7b0      	b.n	8005896 <HAL_TIM_PWM_Start+0x16>
 8005934:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005938:	b2db      	uxtb	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	bf18      	it	ne
 800593e:	2301      	movne	r3, #1
 8005940:	e7a9      	b.n	8005896 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005942:	2804      	cmp	r0, #4
 8005944:	d005      	beq.n	8005952 <HAL_TIM_PWM_Start+0xd2>
 8005946:	2808      	cmp	r0, #8
 8005948:	d007      	beq.n	800595a <HAL_TIM_PWM_Start+0xda>
 800594a:	2302      	movs	r3, #2
 800594c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005950:	e7a8      	b.n	80058a4 <HAL_TIM_PWM_Start+0x24>
 8005952:	2302      	movs	r3, #2
 8005954:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005958:	e7a4      	b.n	80058a4 <HAL_TIM_PWM_Start+0x24>
 800595a:	2302      	movs	r3, #2
 800595c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005960:	e7a0      	b.n	80058a4 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005968:	2a06      	cmp	r2, #6
 800596a:	d007      	beq.n	800597c <HAL_TIM_PWM_Start+0xfc>
      __HAL_TIM_ENABLE(htim);
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005974:	2000      	movs	r0, #0
}
 8005976:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005978:	2001      	movs	r0, #1
 800597a:	e7fc      	b.n	8005976 <HAL_TIM_PWM_Start+0xf6>
  return HAL_OK;
 800597c:	2000      	movs	r0, #0
 800597e:	e7fa      	b.n	8005976 <HAL_TIM_PWM_Start+0xf6>
 8005980:	40010000 	.word	0x40010000

08005984 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005984:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d03b      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 800598c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800598e:	2301      	movs	r3, #1
 8005990:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	2302      	movs	r3, #2
 8005996:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800599a:	6803      	ldr	r3, [r0, #0]
 800599c:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800599e:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059a4:	680a      	ldr	r2, [r1, #0]
 80059a6:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059aa:	6803      	ldr	r3, [r0, #0]
 80059ac:	4a16      	ldr	r2, [pc, #88]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01a      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d017      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80059b8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80059bc:	4293      	cmp	r3, r2
 80059be:	d013      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80059c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00f      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80059c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00b      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80059d0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d007      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80059d8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80059e0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d104      	bne.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ec:	684a      	ldr	r2, [r1, #4]
 80059ee:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f0:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f8:	2300      	movs	r3, #0
 80059fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80059fe:	4618      	mov	r0, r3
}
 8005a00:	bc30      	pop	{r4, r5}
 8005a02:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005a04:	2002      	movs	r0, #2
}
 8005a06:	4770      	bx	lr
 8005a08:	40010000 	.word	0x40010000

08005a0c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d022      	beq.n	8005a5a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8005a14:	2301      	movs	r3, #1
 8005a16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a1a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a20:	688a      	ldr	r2, [r1, #8]
 8005a22:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a28:	684a      	ldr	r2, [r1, #4]
 8005a2a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a30:	680a      	ldr	r2, [r1, #0]
 8005a32:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a38:	690a      	ldr	r2, [r1, #16]
 8005a3a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a40:	694a      	ldr	r2, [r1, #20]
 8005a42:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a48:	69ca      	ldr	r2, [r1, #28]
 8005a4a:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a4c:	6802      	ldr	r2, [r0, #0]
 8005a4e:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a50:	2300      	movs	r3, #0
 8005a52:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005a56:	4618      	mov	r0, r3
 8005a58:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005a5a:	2002      	movs	r0, #2
}
 8005a5c:	4770      	bx	lr

08005a5e <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a5e:	6802      	ldr	r2, [r0, #0]
 8005a60:	68d3      	ldr	r3, [r2, #12]
 8005a62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a66:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a68:	2320      	movs	r3, #32
 8005a6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005a6e:	4770      	bx	lr

08005a70 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a70:	6802      	ldr	r2, [r0, #0]
 8005a72:	68d3      	ldr	r3, [r2, #12]
 8005a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a78:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7a:	6802      	ldr	r2, [r0, #0]
 8005a7c:	6953      	ldr	r3, [r2, #20]
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a84:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d005      	beq.n	8005a96 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	2320      	movs	r3, #32
 8005a8c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a90:	2300      	movs	r3, #0
 8005a92:	6303      	str	r3, [r0, #48]	; 0x30
}
 8005a94:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a96:	6802      	ldr	r2, [r0, #0]
 8005a98:	68d3      	ldr	r3, [r2, #12]
 8005a9a:	f023 0310 	bic.w	r3, r3, #16
 8005a9e:	60d3      	str	r3, [r2, #12]
 8005aa0:	e7f3      	b.n	8005a8a <UART_EndRxTransfer+0x1a>

08005aa2 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aa2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b21      	cmp	r3, #33	; 0x21
 8005aaa:	d001      	beq.n	8005ab0 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005aac:	2002      	movs	r0, #2
  }
}
 8005aae:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab0:	6883      	ldr	r3, [r0, #8]
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab6:	d017      	beq.n	8005ae8 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ab8:	6a03      	ldr	r3, [r0, #32]
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	6202      	str	r2, [r0, #32]
 8005abe:	781a      	ldrb	r2, [r3, #0]
 8005ac0:	6803      	ldr	r3, [r0, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8005ac4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	84c3      	strh	r3, [r0, #38]	; 0x26
 8005ace:	b94b      	cbnz	r3, 8005ae4 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ad0:	6802      	ldr	r2, [r0, #0]
 8005ad2:	68d3      	ldr	r3, [r2, #12]
 8005ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad8:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ada:	6802      	ldr	r2, [r0, #0]
 8005adc:	68d3      	ldr	r3, [r2, #12]
 8005ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae2:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae8:	6903      	ldr	r3, [r0, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e4      	bne.n	8005ab8 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005aee:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	6802      	ldr	r2, [r0, #0]
 8005af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af8:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8005afa:	6a03      	ldr	r3, [r0, #32]
 8005afc:	3302      	adds	r3, #2
 8005afe:	6203      	str	r3, [r0, #32]
 8005b00:	e7e0      	b.n	8005ac4 <UART_Transmit_IT+0x22>
	...

08005b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b08:	6802      	ldr	r2, [r0, #0]
 8005b0a:	6913      	ldr	r3, [r2, #16]
 8005b0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b10:	68c1      	ldr	r1, [r0, #12]
 8005b12:	430b      	orrs	r3, r1
 8005b14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b16:	6883      	ldr	r3, [r0, #8]
 8005b18:	6902      	ldr	r2, [r0, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	6942      	ldr	r2, [r0, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	69c2      	ldr	r2, [r0, #28]
 8005b22:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005b24:	6801      	ldr	r1, [r0, #0]
 8005b26:	68cb      	ldr	r3, [r1, #12]
 8005b28:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b2c:	f023 030c 	bic.w	r3, r3, #12
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b34:	6802      	ldr	r2, [r0, #0]
 8005b36:	6953      	ldr	r3, [r2, #20]
 8005b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3c:	6981      	ldr	r1, [r0, #24]
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b42:	6803      	ldr	r3, [r0, #0]
 8005b44:	4a34      	ldr	r2, [pc, #208]	; (8005c18 <UART_SetConfig+0x114>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d006      	beq.n	8005b58 <UART_SetConfig+0x54>
 8005b4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d002      	beq.n	8005b58 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b52:	f7ff fbcb 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 8005b56:	e001      	b.n	8005b5c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b58:	f7ff fbd8 	bl	800530c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b5c:	69e3      	ldr	r3, [r4, #28]
 8005b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b62:	d02a      	beq.n	8005bba <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b64:	2600      	movs	r6, #0
 8005b66:	1805      	adds	r5, r0, r0
 8005b68:	eb46 0106 	adc.w	r1, r6, r6
 8005b6c:	182d      	adds	r5, r5, r0
 8005b6e:	eb46 0101 	adc.w	r1, r6, r1
 8005b72:	00cb      	lsls	r3, r1, #3
 8005b74:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005b78:	00ea      	lsls	r2, r5, #3
 8005b7a:	4615      	mov	r5, r2
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6863      	ldr	r3, [r4, #4]
 8005b80:	009a      	lsls	r2, r3, #2
 8005b82:	0f9b      	lsrs	r3, r3, #30
 8005b84:	1828      	adds	r0, r5, r0
 8005b86:	eb46 0101 	adc.w	r1, r6, r1
 8005b8a:	f7fb f80d 	bl	8000ba8 <__aeabi_uldivmod>
 8005b8e:	4d23      	ldr	r5, [pc, #140]	; (8005c1c <UART_SetConfig+0x118>)
 8005b90:	fba5 3200 	umull	r3, r2, r5, r0
 8005b94:	0951      	lsrs	r1, r2, #5
 8005b96:	2364      	movs	r3, #100	; 0x64
 8005b98:	fb03 0311 	mls	r3, r3, r1, r0
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	3332      	adds	r3, #50	; 0x32
 8005ba0:	fba5 2303 	umull	r2, r3, r5, r3
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005baa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	6821      	ldr	r1, [r4, #0]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	608b      	str	r3, [r1, #8]
  }
}
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bba:	2600      	movs	r6, #0
 8005bbc:	1805      	adds	r5, r0, r0
 8005bbe:	eb46 0106 	adc.w	r1, r6, r6
 8005bc2:	182d      	adds	r5, r5, r0
 8005bc4:	eb46 0101 	adc.w	r1, r6, r1
 8005bc8:	00cb      	lsls	r3, r1, #3
 8005bca:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005bce:	00ea      	lsls	r2, r5, #3
 8005bd0:	4615      	mov	r5, r2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6862      	ldr	r2, [r4, #4]
 8005bd6:	4633      	mov	r3, r6
 8005bd8:	1892      	adds	r2, r2, r2
 8005bda:	eb46 0303 	adc.w	r3, r6, r3
 8005bde:	1828      	adds	r0, r5, r0
 8005be0:	eb46 0101 	adc.w	r1, r6, r1
 8005be4:	f7fa ffe0 	bl	8000ba8 <__aeabi_uldivmod>
 8005be8:	4d0c      	ldr	r5, [pc, #48]	; (8005c1c <UART_SetConfig+0x118>)
 8005bea:	fba5 3200 	umull	r3, r2, r5, r0
 8005bee:	0951      	lsrs	r1, r2, #5
 8005bf0:	2364      	movs	r3, #100	; 0x64
 8005bf2:	fb03 0311 	mls	r3, r3, r1, r0
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	3332      	adds	r3, #50	; 0x32
 8005bfa:	fba5 2303 	umull	r2, r3, r5, r3
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	005a      	lsls	r2, r3, #1
 8005c02:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005c06:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	6821      	ldr	r1, [r4, #0]
 8005c10:	4413      	add	r3, r2
 8005c12:	608b      	str	r3, [r1, #8]
 8005c14:	e7d0      	b.n	8005bb8 <UART_SetConfig+0xb4>
 8005c16:	bf00      	nop
 8005c18:	40011000 	.word	0x40011000
 8005c1c:	51eb851f 	.word	0x51eb851f

08005c20 <UART_WaitOnFlagUntilTimeout>:
{
 8005c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c24:	4605      	mov	r5, r0
 8005c26:	460f      	mov	r7, r1
 8005c28:	4616      	mov	r6, r2
 8005c2a:	4699      	mov	r9, r3
 8005c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c30:	682c      	ldr	r4, [r5, #0]
 8005c32:	6824      	ldr	r4, [r4, #0]
 8005c34:	ea37 0304 	bics.w	r3, r7, r4
 8005c38:	bf0c      	ite	eq
 8005c3a:	2401      	moveq	r4, #1
 8005c3c:	2400      	movne	r4, #0
 8005c3e:	42b4      	cmp	r4, r6
 8005c40:	d11f      	bne.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005c46:	d0f3      	beq.n	8005c30 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c48:	f1b8 0f00 	cmp.w	r8, #0
 8005c4c:	d005      	beq.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x3a>
 8005c4e:	f7fd fd6b 	bl	8003728 <HAL_GetTick>
 8005c52:	eba0 0009 	sub.w	r0, r0, r9
 8005c56:	4540      	cmp	r0, r8
 8005c58:	d9ea      	bls.n	8005c30 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c5a:	682a      	ldr	r2, [r5, #0]
 8005c5c:	68d3      	ldr	r3, [r2, #12]
 8005c5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c62:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c64:	682a      	ldr	r2, [r5, #0]
 8005c66:	6953      	ldr	r3, [r2, #20]
 8005c68:	f023 0301 	bic.w	r3, r3, #1
 8005c6c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005c6e:	2320      	movs	r3, #32
 8005c70:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c74:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8005c7e:	2003      	movs	r0, #3
 8005c80:	e000      	b.n	8005c84 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8005c82:	2000      	movs	r0, #0
}
 8005c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005c88 <HAL_UART_Init>:
  if (huart == NULL)
 8005c88:	b358      	cbz	r0, 8005ce2 <HAL_UART_Init+0x5a>
{
 8005c8a:	b510      	push	{r4, lr}
 8005c8c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c92:	b30b      	cbz	r3, 8005cd8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005c94:	2324      	movs	r3, #36	; 0x24
 8005c96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005c9a:	6822      	ldr	r2, [r4, #0]
 8005c9c:	68d3      	ldr	r3, [r2, #12]
 8005c9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ca2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f7ff ff2d 	bl	8005b04 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005caa:	6822      	ldr	r2, [r4, #0]
 8005cac:	6913      	ldr	r3, [r2, #16]
 8005cae:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005cb2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	6953      	ldr	r3, [r2, #20]
 8005cb8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005cbc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	68d3      	ldr	r3, [r2, #12]
 8005cc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cc6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc8:	2000      	movs	r0, #0
 8005cca:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	2320      	movs	r3, #32
 8005cce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005cd6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005cd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005cdc:	f7fd f8e8 	bl	8002eb0 <HAL_UART_MspInit>
 8005ce0:	e7d8      	b.n	8005c94 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005ce2:	2001      	movs	r0, #1
}
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_UART_Transmit>:
{
 8005ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005cee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d154      	bne.n	8005da2 <HAL_UART_Transmit+0xbc>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	d053      	beq.n	8005daa <HAL_UART_Transmit+0xc4>
 8005d02:	2a00      	cmp	r2, #0
 8005d04:	d053      	beq.n	8005dae <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8005d06:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d051      	beq.n	8005db2 <HAL_UART_Transmit+0xcc>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d14:	2300      	movs	r3, #0
 8005d16:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d18:	2321      	movs	r3, #33	; 0x21
 8005d1a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8005d1e:	f7fd fd03 	bl	8003728 <HAL_GetTick>
 8005d22:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005d24:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d28:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d2c:	68a3      	ldr	r3, [r4, #8]
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d32:	d005      	beq.n	8005d40 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8005d34:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8005d3e:	e012      	b.n	8005d66 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	b113      	cbz	r3, 8005d4a <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8005d44:	f04f 0800 	mov.w	r8, #0
 8005d48:	e7f6      	b.n	8005d38 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8005d4a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005d4c:	2500      	movs	r5, #0
 8005d4e:	e7f3      	b.n	8005d38 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d50:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8005d5c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005d5e:	b292      	uxth	r2, r2
 8005d60:	3a01      	subs	r2, #1
 8005d62:	b292      	uxth	r2, r2
 8005d64:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	b173      	cbz	r3, 8005d8a <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d6c:	9600      	str	r6, [sp, #0]
 8005d6e:	463b      	mov	r3, r7
 8005d70:	2200      	movs	r2, #0
 8005d72:	2180      	movs	r1, #128	; 0x80
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7ff ff53 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 8005d7a:	b9e0      	cbnz	r0, 8005db6 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8005d7c:	2d00      	cmp	r5, #0
 8005d7e:	d0e7      	beq.n	8005d50 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d80:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d88:	e7e8      	b.n	8005d5c <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d8a:	9600      	str	r6, [sp, #0]
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2140      	movs	r1, #64	; 0x40
 8005d92:	4620      	mov	r0, r4
 8005d94:	f7ff ff44 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 8005d98:	b978      	cbnz	r0, 8005dba <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8005d9a:	2320      	movs	r3, #32
 8005d9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8005da0:	e000      	b.n	8005da4 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8005da2:	2002      	movs	r0, #2
}
 8005da4:	b002      	add	sp, #8
 8005da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005daa:	2001      	movs	r0, #1
 8005dac:	e7fa      	b.n	8005da4 <HAL_UART_Transmit+0xbe>
 8005dae:	2001      	movs	r0, #1
 8005db0:	e7f8      	b.n	8005da4 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8005db2:	2002      	movs	r0, #2
 8005db4:	e7f6      	b.n	8005da4 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8005db6:	2003      	movs	r0, #3
 8005db8:	e7f4      	b.n	8005da4 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8005dba:	2003      	movs	r0, #3
 8005dbc:	e7f2      	b.n	8005da4 <HAL_UART_Transmit+0xbe>

08005dbe <HAL_UART_Receive>:
{
 8005dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dc6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d15c      	bne.n	8005e8a <HAL_UART_Receive+0xcc>
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005dd6:	2900      	cmp	r1, #0
 8005dd8:	d05b      	beq.n	8005e92 <HAL_UART_Receive+0xd4>
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	d05b      	beq.n	8005e96 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8005dde:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d059      	beq.n	8005e9a <HAL_UART_Receive+0xdc>
 8005de6:	2301      	movs	r3, #1
 8005de8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005df0:	2222      	movs	r2, #34	; 0x22
 8005df2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df6:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8005df8:	f7fd fc96 	bl	8003728 <HAL_GetTick>
 8005dfc:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8005dfe:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005e02:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e06:	68a3      	ldr	r3, [r4, #8]
 8005e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0c:	d005      	beq.n	8005e1a <HAL_UART_Receive+0x5c>
      pdata16bits = NULL;
 8005e0e:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8005e12:	2300      	movs	r3, #0
 8005e14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 8005e18:	e017      	b.n	8005e4a <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	b113      	cbz	r3, 8005e24 <HAL_UART_Receive+0x66>
      pdata16bits = NULL;
 8005e1e:	f04f 0800 	mov.w	r8, #0
 8005e22:	e7f6      	b.n	8005e12 <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 8005e24:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005e26:	2500      	movs	r5, #0
 8005e28:	e7f3      	b.n	8005e12 <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e32:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8005e36:	e003      	b.n	8005e40 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8005e3e:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8005e40:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8005e42:	b292      	uxth	r2, r2
 8005e44:	3a01      	subs	r2, #1
 8005e46:	b292      	uxth	r2, r2
 8005e48:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005e4a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	b1bb      	cbz	r3, 8005e80 <HAL_UART_Receive+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e50:	9600      	str	r6, [sp, #0]
 8005e52:	463b      	mov	r3, r7
 8005e54:	2200      	movs	r2, #0
 8005e56:	2120      	movs	r1, #32
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7ff fee1 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 8005e5e:	b9f0      	cbnz	r0, 8005e9e <HAL_UART_Receive+0xe0>
      if (pdata8bits == NULL)
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	d0e2      	beq.n	8005e2a <HAL_UART_Receive+0x6c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e64:	68a3      	ldr	r3, [r4, #8]
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6a:	d0e5      	beq.n	8005e38 <HAL_UART_Receive+0x7a>
 8005e6c:	b913      	cbnz	r3, 8005e74 <HAL_UART_Receive+0xb6>
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0e1      	beq.n	8005e38 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e7c:	702b      	strb	r3, [r5, #0]
 8005e7e:	e7de      	b.n	8005e3e <HAL_UART_Receive+0x80>
    huart->RxState = HAL_UART_STATE_READY;
 8005e80:	2320      	movs	r3, #32
 8005e82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005e86:	2000      	movs	r0, #0
 8005e88:	e000      	b.n	8005e8c <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 8005e8a:	2002      	movs	r0, #2
}
 8005e8c:	b002      	add	sp, #8
 8005e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005e92:	2001      	movs	r0, #1
 8005e94:	e7fa      	b.n	8005e8c <HAL_UART_Receive+0xce>
 8005e96:	2001      	movs	r0, #1
 8005e98:	e7f8      	b.n	8005e8c <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 8005e9a:	2002      	movs	r0, #2
 8005e9c:	e7f6      	b.n	8005e8c <HAL_UART_Receive+0xce>
        return HAL_TIMEOUT;
 8005e9e:	2003      	movs	r0, #3
 8005ea0:	e7f4      	b.n	8005e8c <HAL_UART_Receive+0xce>
	...

08005ea4 <HAL_UART_Transmit_DMA>:
{
 8005ea4:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d131      	bne.n	8005f14 <HAL_UART_Transmit_DMA+0x70>
 8005eb0:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005eb2:	2900      	cmp	r1, #0
 8005eb4:	d030      	beq.n	8005f18 <HAL_UART_Transmit_DMA+0x74>
 8005eb6:	2a00      	cmp	r2, #0
 8005eb8:	d030      	beq.n	8005f1c <HAL_UART_Transmit_DMA+0x78>
    __HAL_LOCK(huart);
 8005eba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d02e      	beq.n	8005f20 <HAL_UART_Transmit_DMA+0x7c>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 8005ec8:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8005eca:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ecc:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ece:	2500      	movs	r5, #0
 8005ed0:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ed2:	2321      	movs	r3, #33	; 0x21
 8005ed4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ed8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005eda:	4812      	ldr	r0, [pc, #72]	; (8005f24 <HAL_UART_Transmit_DMA+0x80>)
 8005edc:	63d8      	str	r0, [r3, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ee0:	4811      	ldr	r0, [pc, #68]	; (8005f28 <HAL_UART_Transmit_DMA+0x84>)
 8005ee2:	6418      	str	r0, [r3, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ee6:	4811      	ldr	r0, [pc, #68]	; (8005f2c <HAL_UART_Transmit_DMA+0x88>)
 8005ee8:	64d8      	str	r0, [r3, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8005eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005eec:	651d      	str	r5, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005eee:	6820      	ldr	r0, [r4, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	1d02      	adds	r2, r0, #4
 8005ef4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005ef6:	f7fd fd81 	bl	80039fc <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f00:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8005f02:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	6953      	ldr	r3, [r2, #20]
 8005f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0e:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8005f10:	4628      	mov	r0, r5
 8005f12:	e000      	b.n	8005f16 <HAL_UART_Transmit_DMA+0x72>
    return HAL_BUSY;
 8005f14:	2002      	movs	r0, #2
}
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005f18:	2001      	movs	r0, #1
 8005f1a:	e7fc      	b.n	8005f16 <HAL_UART_Transmit_DMA+0x72>
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	e7fa      	b.n	8005f16 <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 8005f20:	2002      	movs	r0, #2
 8005f22:	e7f8      	b.n	8005f16 <HAL_UART_Transmit_DMA+0x72>
 8005f24:	08005f31 	.word	0x08005f31
 8005f28:	08005f7d 	.word	0x08005f7d
 8005f2c:	08005f8d 	.word	0x08005f8d

08005f30 <UART_DMATransmitCplt>:
{
 8005f30:	b508      	push	{r3, lr}
 8005f32:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f34:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f3e:	d10c      	bne.n	8005f5a <UART_DMATransmitCplt+0x2a>
    huart->TxXferCount = 0x00U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f44:	6802      	ldr	r2, [r0, #0]
 8005f46:	6953      	ldr	r3, [r2, #20]
 8005f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4c:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f4e:	6802      	ldr	r2, [r0, #0]
 8005f50:	68d3      	ldr	r3, [r2, #12]
 8005f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f56:	60d3      	str	r3, [r2, #12]
}
 8005f58:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005f5a:	f7fc feb9 	bl	8002cd0 <HAL_UART_TxCpltCallback>
}
 8005f5e:	e7fb      	b.n	8005f58 <UART_DMATransmitCplt+0x28>

08005f60 <UART_EndTransmit_IT>:
{
 8005f60:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f62:	6801      	ldr	r1, [r0, #0]
 8005f64:	68ca      	ldr	r2, [r1, #12]
 8005f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f6a:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8005f72:	f7fc fead 	bl	8002cd0 <HAL_UART_TxCpltCallback>
}
 8005f76:	2000      	movs	r0, #0
 8005f78:	bd08      	pop	{r3, pc}

08005f7a <HAL_UART_TxHalfCpltCallback>:
}
 8005f7a:	4770      	bx	lr

08005f7c <UART_DMATxHalfCplt>:
{
 8005f7c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005f7e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005f80:	f7ff fffb 	bl	8005f7a <HAL_UART_TxHalfCpltCallback>
}
 8005f84:	bd08      	pop	{r3, pc}

08005f86 <HAL_UART_RxCpltCallback>:
}
 8005f86:	4770      	bx	lr

08005f88 <HAL_UART_RxHalfCpltCallback>:
}
 8005f88:	4770      	bx	lr

08005f8a <HAL_UART_ErrorCallback>:
}
 8005f8a:	4770      	bx	lr

08005f8c <UART_DMAError>:
{
 8005f8c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f8e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f94:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b21      	cmp	r3, #33	; 0x21
 8005f9c:	d010      	beq.n	8005fc0 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fa6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b22      	cmp	r3, #34	; 0x22
 8005fae:	d011      	beq.n	8005fd4 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fb2:	f043 0310 	orr.w	r3, r3, #16
 8005fb6:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7ff ffe6 	bl	8005f8a <HAL_UART_ErrorCallback>
}
 8005fbe:	bd10      	pop	{r4, pc}
 8005fc0:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005fc4:	2a00      	cmp	r2, #0
 8005fc6:	d0ea      	beq.n	8005f9e <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f7ff fd46 	bl	8005a5e <UART_EndTxTransfer>
 8005fd2:	e7e4      	b.n	8005f9e <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fd4:	2a00      	cmp	r2, #0
 8005fd6:	d0eb      	beq.n	8005fb0 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f7ff fd47 	bl	8005a70 <UART_EndRxTransfer>
 8005fe2:	e7e5      	b.n	8005fb0 <UART_DMAError+0x24>

08005fe4 <UART_DMAAbortOnError>:
{
 8005fe4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fec:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005fee:	f7ff ffcc 	bl	8005f8a <HAL_UART_ErrorCallback>
}
 8005ff2:	bd08      	pop	{r3, pc}

08005ff4 <HAL_UARTEx_RxEventCallback>:
}
 8005ff4:	4770      	bx	lr

08005ff6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ff6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b22      	cmp	r3, #34	; 0x22
 8005ffe:	d153      	bne.n	80060a8 <UART_Receive_IT+0xb2>
{
 8006000:	b510      	push	{r4, lr}
 8006002:	4604      	mov	r4, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006004:	6883      	ldr	r3, [r0, #8]
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600a:	d030      	beq.n	800606e <UART_Receive_IT+0x78>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800600c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800600e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006012:	d004      	beq.n	800601e <UART_Receive_IT+0x28>
 8006014:	2b00      	cmp	r3, #0
 8006016:	d137      	bne.n	8006088 <UART_Receive_IT+0x92>
 8006018:	6923      	ldr	r3, [r4, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d134      	bne.n	8006088 <UART_Receive_IT+0x92>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8006024:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006026:	3301      	adds	r3, #1
 8006028:	62a3      	str	r3, [r4, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800602a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29b      	uxth	r3, r3
 8006032:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8006034:	2b00      	cmp	r3, #0
 8006036:	d139      	bne.n	80060ac <UART_Receive_IT+0xb6>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006038:	6822      	ldr	r2, [r4, #0]
 800603a:	68d3      	ldr	r3, [r2, #12]
 800603c:	f023 0320 	bic.w	r3, r3, #32
 8006040:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	68d3      	ldr	r3, [r2, #12]
 8006046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800604a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	6953      	ldr	r3, [r2, #20]
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006056:	2320      	movs	r3, #32
 8006058:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800605e:	2b01      	cmp	r3, #1
 8006060:	d018      	beq.n	8006094 <UART_Receive_IT+0x9e>
       HAL_UART_RxCpltCallback(huart);
 8006062:	4620      	mov	r0, r4
 8006064:	f7ff ff8f 	bl	8005f86 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006068:	2000      	movs	r0, #0
 800606a:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_OK;
 800606c:	e01f      	b.n	80060ae <UART_Receive_IT+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800606e:	6902      	ldr	r2, [r0, #16]
 8006070:	2a00      	cmp	r2, #0
 8006072:	d1cb      	bne.n	800600c <UART_Receive_IT+0x16>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006074:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006076:	6803      	ldr	r3, [r0, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006080:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006082:	3302      	adds	r3, #2
 8006084:	6283      	str	r3, [r0, #40]	; 0x28
 8006086:	e7d0      	b.n	800602a <UART_Receive_IT+0x34>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006090:	7013      	strb	r3, [r2, #0]
 8006092:	e7c7      	b.n	8006024 <UART_Receive_IT+0x2e>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006094:	6822      	ldr	r2, [r4, #0]
 8006096:	68d3      	ldr	r3, [r2, #12]
 8006098:	f023 0310 	bic.w	r3, r3, #16
 800609c:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800609e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80060a0:	4620      	mov	r0, r4
 80060a2:	f7ff ffa7 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
 80060a6:	e7df      	b.n	8006068 <UART_Receive_IT+0x72>
    return HAL_BUSY;
 80060a8:	2002      	movs	r0, #2
}
 80060aa:	4770      	bx	lr
    return HAL_OK;
 80060ac:	2000      	movs	r0, #0
}
 80060ae:	bd10      	pop	{r4, pc}

080060b0 <HAL_UART_IRQHandler>:
{
 80060b0:	b530      	push	{r4, r5, lr}
 80060b2:	b083      	sub	sp, #12
 80060b4:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060b6:	6802      	ldr	r2, [r0, #0]
 80060b8:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ba:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060bc:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80060be:	f013 050f 	ands.w	r5, r3, #15
 80060c2:	d105      	bne.n	80060d0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060c4:	f013 0f20 	tst.w	r3, #32
 80060c8:	d002      	beq.n	80060d0 <HAL_UART_IRQHandler+0x20>
 80060ca:	f010 0f20 	tst.w	r0, #32
 80060ce:	d119      	bne.n	8006104 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060d0:	b12d      	cbz	r5, 80060de <HAL_UART_IRQHandler+0x2e>
 80060d2:	f011 0101 	ands.w	r1, r1, #1
 80060d6:	d119      	bne.n	800610c <HAL_UART_IRQHandler+0x5c>
 80060d8:	f410 7f90 	tst.w	r0, #288	; 0x120
 80060dc:	d116      	bne.n	800610c <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80060e0:	2901      	cmp	r1, #1
 80060e2:	d075      	beq.n	80061d0 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060e8:	d003      	beq.n	80060f2 <HAL_UART_IRQHandler+0x42>
 80060ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80060ee:	f040 80d8 	bne.w	80062a2 <HAL_UART_IRQHandler+0x1f2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060f6:	d003      	beq.n	8006100 <HAL_UART_IRQHandler+0x50>
 80060f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060fc:	f040 80d5 	bne.w	80062aa <HAL_UART_IRQHandler+0x1fa>
}
 8006100:	b003      	add	sp, #12
 8006102:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8006104:	4620      	mov	r0, r4
 8006106:	f7ff ff76 	bl	8005ff6 <UART_Receive_IT>
      return;
 800610a:	e7f9      	b.n	8006100 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800610c:	f013 0f01 	tst.w	r3, #1
 8006110:	d006      	beq.n	8006120 <HAL_UART_IRQHandler+0x70>
 8006112:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006116:	d003      	beq.n	8006120 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006118:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006120:	f013 0f04 	tst.w	r3, #4
 8006124:	d004      	beq.n	8006130 <HAL_UART_IRQHandler+0x80>
 8006126:	b119      	cbz	r1, 8006130 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006128:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800612a:	f042 0202 	orr.w	r2, r2, #2
 800612e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006130:	f013 0f02 	tst.w	r3, #2
 8006134:	d004      	beq.n	8006140 <HAL_UART_IRQHandler+0x90>
 8006136:	b119      	cbz	r1, 8006140 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006138:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800613a:	f042 0204 	orr.w	r2, r2, #4
 800613e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006140:	f013 0f08 	tst.w	r3, #8
 8006144:	d007      	beq.n	8006156 <HAL_UART_IRQHandler+0xa6>
 8006146:	f010 0f20 	tst.w	r0, #32
 800614a:	d100      	bne.n	800614e <HAL_UART_IRQHandler+0x9e>
 800614c:	b119      	cbz	r1, 8006156 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800614e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006150:	f042 0208 	orr.w	r2, r2, #8
 8006154:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006156:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006158:	2a00      	cmp	r2, #0
 800615a:	d0d1      	beq.n	8006100 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800615c:	f013 0f20 	tst.w	r3, #32
 8006160:	d002      	beq.n	8006168 <HAL_UART_IRQHandler+0xb8>
 8006162:	f010 0f20 	tst.w	r0, #32
 8006166:	d121      	bne.n	80061ac <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006170:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006172:	f012 0f08 	tst.w	r2, #8
 8006176:	d100      	bne.n	800617a <HAL_UART_IRQHandler+0xca>
 8006178:	b323      	cbz	r3, 80061c4 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff fc78 	bl	8005a70 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006188:	d018      	beq.n	80061bc <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800618a:	695a      	ldr	r2, [r3, #20]
 800618c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006190:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006192:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006194:	b173      	cbz	r3, 80061b4 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006196:	4a47      	ldr	r2, [pc, #284]	; (80062b4 <HAL_UART_IRQHandler+0x204>)
 8006198:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800619a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800619c:	f7fd fcad 	bl	8003afa <HAL_DMA_Abort_IT>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d0ad      	beq.n	8006100 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80061a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80061a8:	4798      	blx	r3
 80061aa:	e7a9      	b.n	8006100 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7ff ff22 	bl	8005ff6 <UART_Receive_IT>
 80061b2:	e7d9      	b.n	8006168 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7ff fee8 	bl	8005f8a <HAL_UART_ErrorCallback>
 80061ba:	e7a1      	b.n	8006100 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 80061bc:	4620      	mov	r0, r4
 80061be:	f7ff fee4 	bl	8005f8a <HAL_UART_ErrorCallback>
 80061c2:	e79d      	b.n	8006100 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 80061c4:	4620      	mov	r0, r4
 80061c6:	f7ff fee0 	bl	8005f8a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 80061ce:	e797      	b.n	8006100 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80061d0:	f013 0f10 	tst.w	r3, #16
 80061d4:	d086      	beq.n	80060e4 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80061d6:	f010 0f10 	tst.w	r0, #16
 80061da:	d083      	beq.n	80060e4 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061dc:	2300      	movs	r3, #0
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	6813      	ldr	r3, [r2, #0]
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	6853      	ldr	r3, [r2, #4]
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ea:	6953      	ldr	r3, [r2, #20]
 80061ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80061f0:	d033      	beq.n	800625a <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061f4:	680b      	ldr	r3, [r1, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d080      	beq.n	8006100 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80061fe:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8006200:	4298      	cmp	r0, r3
 8006202:	f67f af7d 	bls.w	8006100 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8006206:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006208:	69cb      	ldr	r3, [r1, #28]
 800620a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620e:	d108      	bne.n	8006222 <HAL_UART_IRQHandler+0x172>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006210:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006212:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006214:	b29b      	uxth	r3, r3
 8006216:	1ac9      	subs	r1, r1, r3
 8006218:	b289      	uxth	r1, r1
 800621a:	4620      	mov	r0, r4
 800621c:	f7ff feea 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
      return;
 8006220:	e76e      	b.n	8006100 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006222:	68d3      	ldr	r3, [r2, #12]
 8006224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006228:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	6953      	ldr	r3, [r2, #20]
 800622e:	f023 0301 	bic.w	r3, r3, #1
 8006232:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	6953      	ldr	r3, [r2, #20]
 8006238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623c:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800623e:	2320      	movs	r3, #32
 8006240:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006244:	2300      	movs	r3, #0
 8006246:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006248:	6822      	ldr	r2, [r4, #0]
 800624a:	68d3      	ldr	r3, [r2, #12]
 800624c:	f023 0310 	bic.w	r3, r3, #16
 8006250:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006252:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006254:	f7fd fc07 	bl	8003a66 <HAL_DMA_Abort>
 8006258:	e7da      	b.n	8006210 <HAL_UART_IRQHandler+0x160>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800625a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800625c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800625e:	b29b      	uxth	r3, r3
 8006260:	1ac9      	subs	r1, r1, r3
 8006262:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8006264:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	f43f af49 	beq.w	8006100 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 800626e:	2900      	cmp	r1, #0
 8006270:	f43f af46 	beq.w	8006100 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006274:	68d3      	ldr	r3, [r2, #12]
 8006276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800627a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627c:	6822      	ldr	r2, [r4, #0]
 800627e:	6953      	ldr	r3, [r2, #20]
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8006286:	2320      	movs	r3, #32
 8006288:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628c:	2300      	movs	r3, #0
 800628e:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006290:	6822      	ldr	r2, [r4, #0]
 8006292:	68d3      	ldr	r3, [r2, #12]
 8006294:	f023 0310 	bic.w	r3, r3, #16
 8006298:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800629a:	4620      	mov	r0, r4
 800629c:	f7ff feaa 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
      return;
 80062a0:	e72e      	b.n	8006100 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 80062a2:	4620      	mov	r0, r4
 80062a4:	f7ff fbfd 	bl	8005aa2 <UART_Transmit_IT>
    return;
 80062a8:	e72a      	b.n	8006100 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 80062aa:	4620      	mov	r0, r4
 80062ac:	f7ff fe58 	bl	8005f60 <UART_EndTransmit_IT>
    return;
 80062b0:	e726      	b.n	8006100 <HAL_UART_IRQHandler+0x50>
 80062b2:	bf00      	nop
 80062b4:	08005fe5 	.word	0x08005fe5

080062b8 <UART_DMARxHalfCplt>:
{
 80062b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d002      	beq.n	80062c8 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80062c2:	f7ff fe61 	bl	8005f88 <HAL_UART_RxHalfCpltCallback>
}
 80062c6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80062c8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80062ca:	0849      	lsrs	r1, r1, #1
 80062cc:	f7ff fe92 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
 80062d0:	e7f9      	b.n	80062c6 <UART_DMARxHalfCplt+0xe>

080062d2 <UART_DMAReceiveCplt>:
{
 80062d2:	b508      	push	{r3, lr}
 80062d4:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80062e0:	d116      	bne.n	8006310 <UART_DMAReceiveCplt+0x3e>
    huart->RxXferCount = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062e6:	6802      	ldr	r2, [r0, #0]
 80062e8:	68d3      	ldr	r3, [r2, #12]
 80062ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062ee:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f0:	6802      	ldr	r2, [r0, #0]
 80062f2:	6953      	ldr	r3, [r2, #20]
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fa:	6802      	ldr	r2, [r0, #0]
 80062fc:	6953      	ldr	r3, [r2, #20]
 80062fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006302:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8006304:	2320      	movs	r3, #32
 8006306:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800630c:	2b01      	cmp	r3, #1
 800630e:	d005      	beq.n	800631c <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006310:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006312:	2b01      	cmp	r3, #1
 8006314:	d008      	beq.n	8006328 <UART_DMAReceiveCplt+0x56>
    HAL_UART_RxCpltCallback(huart);
 8006316:	f7ff fe36 	bl	8005f86 <HAL_UART_RxCpltCallback>
}
 800631a:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631c:	6802      	ldr	r2, [r0, #0]
 800631e:	68d3      	ldr	r3, [r2, #12]
 8006320:	f023 0310 	bic.w	r3, r3, #16
 8006324:	60d3      	str	r3, [r2, #12]
 8006326:	e7f3      	b.n	8006310 <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006328:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800632a:	f7ff fe63 	bl	8005ff4 <HAL_UARTEx_RxEventCallback>
 800632e:	e7f4      	b.n	800631a <UART_DMAReceiveCplt+0x48>

08006330 <UART_Start_Receive_DMA>:
{
 8006330:	b530      	push	{r4, r5, lr}
 8006332:	b083      	sub	sp, #12
 8006334:	4604      	mov	r4, r0
 8006336:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8006338:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800633a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633c:	2500      	movs	r5, #0
 800633e:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006340:	2222      	movs	r2, #34	; 0x22
 8006342:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006346:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006348:	4814      	ldr	r0, [pc, #80]	; (800639c <UART_Start_Receive_DMA+0x6c>)
 800634a:	63d0      	str	r0, [r2, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800634c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800634e:	4814      	ldr	r0, [pc, #80]	; (80063a0 <UART_Start_Receive_DMA+0x70>)
 8006350:	6410      	str	r0, [r2, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006352:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006354:	4813      	ldr	r0, [pc, #76]	; (80063a4 <UART_Start_Receive_DMA+0x74>)
 8006356:	64d0      	str	r0, [r2, #76]	; 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8006358:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800635a:	6515      	str	r5, [r2, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800635c:	6820      	ldr	r0, [r4, #0]
 800635e:	460a      	mov	r2, r1
 8006360:	1d01      	adds	r1, r0, #4
 8006362:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006364:	f7fd fb4a 	bl	80039fc <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006368:	9501      	str	r5, [sp, #4]
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	9201      	str	r2, [sp, #4]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	9201      	str	r2, [sp, #4]
 8006374:	9a01      	ldr	r2, [sp, #4]
  __HAL_UNLOCK(huart);
 8006376:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006380:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006382:	6822      	ldr	r2, [r4, #0]
 8006384:	6953      	ldr	r3, [r2, #20]
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	6953      	ldr	r3, [r2, #20]
 8006390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006394:	6153      	str	r3, [r2, #20]
}
 8006396:	4628      	mov	r0, r5
 8006398:	b003      	add	sp, #12
 800639a:	bd30      	pop	{r4, r5, pc}
 800639c:	080062d3 	.word	0x080062d3
 80063a0:	080062b9 	.word	0x080062b9
 80063a4:	08005f8d 	.word	0x08005f8d

080063a8 <HAL_UART_Receive_DMA>:
{
 80063a8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80063aa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d10d      	bne.n	80063d0 <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 80063b4:	b171      	cbz	r1, 80063d4 <HAL_UART_Receive_DMA+0x2c>
 80063b6:	b17a      	cbz	r2, 80063d8 <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 80063b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d00d      	beq.n	80063dc <HAL_UART_Receive_DMA+0x34>
 80063c0:	2301      	movs	r3, #1
 80063c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c6:	2300      	movs	r3, #0
 80063c8:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_DMA(huart, pData, Size));
 80063ca:	f7ff ffb1 	bl	8006330 <UART_Start_Receive_DMA>
 80063ce:	e000      	b.n	80063d2 <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 80063d0:	2002      	movs	r0, #2
}
 80063d2:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 80063d4:	2001      	movs	r0, #1
 80063d6:	e7fc      	b.n	80063d2 <HAL_UART_Receive_DMA+0x2a>
 80063d8:	2001      	movs	r0, #1
 80063da:	e7fa      	b.n	80063d2 <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 80063dc:	2002      	movs	r0, #2
 80063de:	e7f8      	b.n	80063d2 <HAL_UART_Receive_DMA+0x2a>

080063e0 <FILTER_init>:
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 80063e0:	2300      	movs	r3, #0
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	dc0c      	bgt.n	8006400 <FILTER_init+0x20>
void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 80063e6:	b430      	push	{r4, r5}
		filter->settings[s] = settings[s] ;
 80063e8:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 80063ec:	6825      	ldr	r5, [r4, #0]
 80063ee:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80063f2:	6025      	str	r5, [r4, #0]
	for(int32_t s = 0; s < 3; s++)
 80063f4:	3301      	adds	r3, #1
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	ddf6      	ble.n	80063e8 <FILTER_init+0x8>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 80063fa:	7602      	strb	r2, [r0, #24]
}
 80063fc:	bc30      	pop	{r4, r5}
 80063fe:	4770      	bx	lr
	filter->order = order ;
 8006400:	7602      	strb	r2, [r0, #24]
 8006402:	4770      	bx	lr

08006404 <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
	float to_return = 0 ;
	switch(filter->order){
 8006404:	7e03      	ldrb	r3, [r0, #24]
 8006406:	b113      	cbz	r3, 800640e <FILTER_process+0xa>
 8006408:	2b01      	cmp	r3, #1
 800640a:	d011      	beq.n	8006430 <FILTER_process+0x2c>
 800640c:	4770      	bx	lr
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 800640e:	edd0 7a00 	vldr	s15, [r0]
 8006412:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006416:	edd0 7a04 	vldr	s15, [r0, #16]
 800641a:	ed90 7a01 	vldr	s14, [r0, #4]
 800641e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006422:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006426:	ed80 0a03 	vstr	s0, [r0, #12]
			filter->values[1] = filter->values[0];
 800642a:	ed80 0a04 	vstr	s0, [r0, #16]
			to_return =  filter->values[0];
			break ;
 800642e:	4770      	bx	lr

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 8006430:	edd0 7a00 	vldr	s15, [r0]
 8006434:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006438:	ed90 7a04 	vldr	s14, [r0, #16]
 800643c:	edd0 7a01 	vldr	s15, [r0, #4]
 8006440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006444:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006448:	ed90 0a05 	vldr	s0, [r0, #20]
 800644c:	edd0 6a02 	vldr	s13, [r0, #8]
 8006450:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006454:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006458:	ed80 0a03 	vstr	s0, [r0, #12]
			filter->values[2] = filter->values[1];
 800645c:	ed80 7a05 	vstr	s14, [r0, #20]
			filter->values[1] = filter->values[0];
 8006460:	ed80 0a04 	vstr	s0, [r0, #16]
			to_return = new_value ;
			break;
	}

	return to_return ;
};
 8006464:	4770      	bx	lr

08006466 <MOTORS_Init>:

#ifndef MOTOR_MAX_POWER
	#define MOTOR_MAX_POWER 500
#endif

void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, float * input, motor_direction_e direction, bool_e start){
 8006466:	b538      	push	{r3, r4, r5, lr}
 8006468:	460d      	mov	r5, r1
 800646a:	9904      	ldr	r1, [sp, #16]
	motors->htim = htim ;
 800646c:	6005      	str	r5, [r0, #0]
	motors->input = input;
 800646e:	6082      	str	r2, [r0, #8]
	motors->direction = direction ;
 8006470:	7143      	strb	r3, [r0, #5]
	motors->duty[0] = 0 ;
 8006472:	2300      	movs	r3, #0
 8006474:	60c3      	str	r3, [r0, #12]
	motors->duty[1] = 0 ;
 8006476:	6103      	str	r3, [r0, #16]
	motors->duty[2] = 0 ;
 8006478:	6143      	str	r3, [r0, #20]
	motors->duty[3] = 0 ;
 800647a:	6183      	str	r3, [r0, #24]
	if(start){
 800647c:	b901      	cbnz	r1, 8006480 <MOTORS_Init+0x1a>
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
	}
}
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	4604      	mov	r4, r0
		motors->state = MOTORS_STATE_RUNNING ;
 8006482:	2301      	movs	r3, #1
 8006484:	7103      	strb	r3, [r0, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8006486:	2100      	movs	r1, #0
 8006488:	4628      	mov	r0, r5
 800648a:	f7ff f9f9 	bl	8005880 <HAL_TIM_PWM_Start>
 800648e:	7720      	strb	r0, [r4, #28]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8006490:	2104      	movs	r1, #4
 8006492:	4628      	mov	r0, r5
 8006494:	f7ff f9f4 	bl	8005880 <HAL_TIM_PWM_Start>
 8006498:	7720      	strb	r0, [r4, #28]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 800649a:	2108      	movs	r1, #8
 800649c:	4628      	mov	r0, r5
 800649e:	f7ff f9ef 	bl	8005880 <HAL_TIM_PWM_Start>
 80064a2:	7720      	strb	r0, [r4, #28]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 80064a4:	210c      	movs	r1, #12
 80064a6:	4628      	mov	r0, r5
 80064a8:	f7ff f9ea 	bl	8005880 <HAL_TIM_PWM_Start>
 80064ac:	7720      	strb	r0, [r4, #28]
}
 80064ae:	e7e6      	b.n	800647e <MOTORS_Init+0x18>

080064b0 <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_2);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_3);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){
 80064b0:	b510      	push	{r4, lr}
 80064b2:	4604      	mov	r4, r0

	static int16_t moteur_0_offset;
	switch(motors->direction){
 80064b4:	7943      	ldrb	r3, [r0, #5]
 80064b6:	b183      	cbz	r3, 80064da <MOTORS_Change_output+0x2a>
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d029      	beq.n	8006510 <MOTORS_Change_output+0x60>

			moteur_0_offset = 1499;
			break;
	}

	motors->htim->Instance->CCR1 = (int16_t)motors->duty[0]+moteur_0_offset;
 80064bc:	edd4 7a03 	vldr	s15, [r4, #12]
 80064c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b2e      	ldr	r3, [pc, #184]	; (8006584 <MOTORS_Change_output+0xd4>)
 80064ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ce:	ee17 1a90 	vmov	r1, s15
 80064d2:	fa03 f381 	sxtah	r3, r3, r1
 80064d6:	6353      	str	r3, [r2, #52]	; 0x34
//	motors->htim->Instance->CCR2 = (int16_t)motors->duty[1]+moteur_0_offset;
//	motors->htim->Instance->CCR3 = (int16_t)motors->duty[2]+moteur_0_offset;
//	motors->htim->Instance->CCR4 = (int16_t)motors->duty[3]+moteur_0_offset;
}
 80064d8:	bd10      	pop	{r4, pc}
			motors->duty[0] = MIN(MOTOR_MAX_POWER, motors->input[0]);
 80064da:	6883      	ldr	r3, [r0, #8]
 80064dc:	edd3 7a00 	vldr	s15, [r3]
 80064e0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006588 <MOTORS_Change_output+0xd8>
 80064e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ec:	d401      	bmi.n	80064f2 <MOTORS_Change_output+0x42>
 80064ee:	eef0 7a47 	vmov.f32	s15, s14
 80064f2:	edc4 7a03 	vstr	s15, [r4, #12]
			motors->duty[0] = sqrtf(1000*motors->duty[0]);
 80064f6:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800658c <MOTORS_Change_output+0xdc>
 80064fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80064fe:	f003 fa11 	bl	8009924 <sqrtf>
 8006502:	ed84 0a03 	vstr	s0, [r4, #12]
			moteur_0_offset = 999;
 8006506:	4b1f      	ldr	r3, [pc, #124]	; (8006584 <MOTORS_Change_output+0xd4>)
 8006508:	f240 32e7 	movw	r2, #999	; 0x3e7
 800650c:	801a      	strh	r2, [r3, #0]
			break;
 800650e:	e7d5      	b.n	80064bc <MOTORS_Change_output+0xc>
			motors->duty[0] = MIN(MOTOR_MAX_POWER, motors->input[0]);
 8006510:	6883      	ldr	r3, [r0, #8]
 8006512:	edd3 7a00 	vldr	s15, [r3]
 8006516:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006588 <MOTORS_Change_output+0xd8>
 800651a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800651e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006522:	d401      	bmi.n	8006528 <MOTORS_Change_output+0x78>
 8006524:	eef0 7a47 	vmov.f32	s15, s14
			motors->duty[0] = MAX(-MOTOR_MAX_POWER, motors->duty[0]);
 8006528:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006590 <MOTORS_Change_output+0xe0>
 800652c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006534:	d501      	bpl.n	800653a <MOTORS_Change_output+0x8a>
 8006536:	eef0 7a47 	vmov.f32	s15, s14
 800653a:	edc4 7a03 	vstr	s15, [r4, #12]
			if(motors->duty[0] >= 0)
 800653e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006546:	db10      	blt.n	800656a <MOTORS_Change_output+0xba>
				motors->duty[0] = 0.5f*sqrtf(1000*motors->duty[0]);
 8006548:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800658c <MOTORS_Change_output+0xdc>
 800654c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006550:	f003 f9e8 	bl	8009924 <sqrtf>
 8006554:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006558:	ee20 0a27 	vmul.f32	s0, s0, s15
 800655c:	ed84 0a03 	vstr	s0, [r4, #12]
			moteur_0_offset = 1499;
 8006560:	4b08      	ldr	r3, [pc, #32]	; (8006584 <MOTORS_Change_output+0xd4>)
 8006562:	f240 52db 	movw	r2, #1499	; 0x5db
 8006566:	801a      	strh	r2, [r3, #0]
			break;
 8006568:	e7a8      	b.n	80064bc <MOTORS_Change_output+0xc>
				motors->duty[0] = -0.5f*sqrtf(-1000*motors->duty[0]);
 800656a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8006594 <MOTORS_Change_output+0xe4>
 800656e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006572:	f003 f9d7 	bl	8009924 <sqrtf>
 8006576:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800657a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800657e:	ed84 0a03 	vstr	s0, [r4, #12]
 8006582:	e7ed      	b.n	8006560 <MOTORS_Change_output+0xb0>
 8006584:	20001cd8 	.word	0x20001cd8
 8006588:	43fa0000 	.word	0x43fa0000
 800658c:	447a0000 	.word	0x447a0000
 8006590:	c3fa0000 	.word	0xc3fa0000
 8006594:	c47a0000 	.word	0xc47a0000

08006598 <PID_init>:
}



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	460f      	mov	r7, r1
 800659c:	4619      	mov	r1, r3
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800659e:	2400      	movs	r4, #0
 80065a0:	2c04      	cmp	r4, #4
 80065a2:	d809      	bhi.n	80065b8 <PID_init+0x20>
		pid->settings[s] = settings[s] ;
 80065a4:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 80065a8:	682e      	ldr	r6, [r5, #0]
 80065aa:	1d25      	adds	r5, r4, #4
 80065ac:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80065b0:	602e      	str	r6, [r5, #0]
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 80065b2:	3401      	adds	r4, #1
 80065b4:	b2e4      	uxtb	r4, r4
 80065b6:	e7f3      	b.n	80065a0 <PID_init+0x8>

	//Init values
	pid->P = 0 ;
 80065b8:	2300      	movs	r3, #0
 80065ba:	6043      	str	r3, [r0, #4]
	pid->I = 0 ;
 80065bc:	6083      	str	r3, [r0, #8]
	pid->D = 0 ;
 80065be:	60c3      	str	r3, [r0, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 80065c0:	302c      	adds	r0, #44	; 0x2c
 80065c2:	f7ff ff0d 	bl	80063e0 <FILTER_init>
}
 80065c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065c8 <arm_mat_trans_f32>:
 80065c8:	f8b0 c000 	ldrh.w	ip, [r0]
 80065cc:	884a      	ldrh	r2, [r1, #2]
 80065ce:	8843      	ldrh	r3, [r0, #2]
 80065d0:	4562      	cmp	r2, ip
 80065d2:	d164      	bne.n	800669e <arm_mat_trans_f32+0xd6>
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	f8b1 e000 	ldrh.w	lr, [r1]
 80065dc:	459e      	cmp	lr, r3
 80065de:	b083      	sub	sp, #12
 80065e0:	d160      	bne.n	80066a4 <arm_mat_trans_f32+0xdc>
 80065e2:	ea4f 089e 	mov.w	r8, lr, lsr #2
 80065e6:	f00e 0303 	and.w	r3, lr, #3
 80065ea:	461a      	mov	r2, r3
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	f108 33ff 	add.w	r3, r8, #4294967295
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3a01      	subs	r2, #1
 80065f6:	f103 0902 	add.w	r9, r3, #2
 80065fa:	b292      	uxth	r2, r2
 80065fc:	3301      	adds	r3, #1
 80065fe:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8006602:	fb03 f707 	mul.w	r7, r3, r7
 8006606:	3201      	adds	r2, #1
 8006608:	ea4f 1b03 	mov.w	fp, r3, lsl #4
 800660c:	6844      	ldr	r4, [r0, #4]
 800660e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8006612:	4643      	mov	r3, r8
 8006614:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8006618:	46b8      	mov	r8, r7
 800661a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800661e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8006622:	2600      	movs	r6, #0
 8006624:	461f      	mov	r7, r3
 8006626:	eb0a 0086 	add.w	r0, sl, r6, lsl #2
 800662a:	b3b7      	cbz	r7, 800669a <arm_mat_trans_f32+0xd2>
 800662c:	f104 0210 	add.w	r2, r4, #16
 8006630:	eb04 0509 	add.w	r5, r4, r9
 8006634:	4603      	mov	r3, r0
 8006636:	ed52 7a04 	vldr	s15, [r2, #-16]
 800663a:	edc3 7a00 	vstr	s15, [r3]
 800663e:	ed52 7a03 	vldr	s15, [r2, #-12]
 8006642:	440b      	add	r3, r1
 8006644:	edc3 7a00 	vstr	s15, [r3]
 8006648:	ed52 7a02 	vldr	s15, [r2, #-8]
 800664c:	440b      	add	r3, r1
 800664e:	edc3 7a00 	vstr	s15, [r3]
 8006652:	ed52 7a01 	vldr	s15, [r2, #-4]
 8006656:	3210      	adds	r2, #16
 8006658:	440b      	add	r3, r1
 800665a:	42aa      	cmp	r2, r5
 800665c:	edc3 7a00 	vstr	s15, [r3]
 8006660:	440b      	add	r3, r1
 8006662:	d1e8      	bne.n	8006636 <arm_mat_trans_f32+0x6e>
 8006664:	eb04 030b 	add.w	r3, r4, fp
 8006668:	4440      	add	r0, r8
 800666a:	9a01      	ldr	r2, [sp, #4]
 800666c:	b17a      	cbz	r2, 800668e <arm_mat_trans_f32+0xc6>
 800666e:	eb03 040e 	add.w	r4, r3, lr
 8006672:	f853 2b04 	ldr.w	r2, [r3], #4
 8006676:	6002      	str	r2, [r0, #0]
 8006678:	42a3      	cmp	r3, r4
 800667a:	4408      	add	r0, r1
 800667c:	d1f9      	bne.n	8006672 <arm_mat_trans_f32+0xaa>
 800667e:	3601      	adds	r6, #1
 8006680:	b2b6      	uxth	r6, r6
 8006682:	45b4      	cmp	ip, r6
 8006684:	d1cf      	bne.n	8006626 <arm_mat_trans_f32+0x5e>
 8006686:	2000      	movs	r0, #0
 8006688:	b003      	add	sp, #12
 800668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668e:	3601      	adds	r6, #1
 8006690:	b2b6      	uxth	r6, r6
 8006692:	45b4      	cmp	ip, r6
 8006694:	461c      	mov	r4, r3
 8006696:	d1c6      	bne.n	8006626 <arm_mat_trans_f32+0x5e>
 8006698:	e7f5      	b.n	8006686 <arm_mat_trans_f32+0xbe>
 800669a:	4623      	mov	r3, r4
 800669c:	e7e5      	b.n	800666a <arm_mat_trans_f32+0xa2>
 800669e:	f06f 0002 	mvn.w	r0, #2
 80066a2:	4770      	bx	lr
 80066a4:	f06f 0002 	mvn.w	r0, #2
 80066a8:	b003      	add	sp, #12
 80066aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ae:	bf00      	nop

080066b0 <arm_mat_sub_f32>:
 80066b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066b2:	6803      	ldr	r3, [r0, #0]
 80066b4:	680c      	ldr	r4, [r1, #0]
 80066b6:	42a3      	cmp	r3, r4
 80066b8:	d151      	bne.n	800675e <arm_mat_sub_f32+0xae>
 80066ba:	6814      	ldr	r4, [r2, #0]
 80066bc:	42a3      	cmp	r3, r4
 80066be:	d14e      	bne.n	800675e <arm_mat_sub_f32+0xae>
 80066c0:	8804      	ldrh	r4, [r0, #0]
 80066c2:	8843      	ldrh	r3, [r0, #2]
 80066c4:	6846      	ldr	r6, [r0, #4]
 80066c6:	684f      	ldr	r7, [r1, #4]
 80066c8:	6855      	ldr	r5, [r2, #4]
 80066ca:	fb03 f004 	mul.w	r0, r3, r4
 80066ce:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 80066d2:	d033      	beq.n	800673c <arm_mat_sub_f32+0x8c>
 80066d4:	f106 0110 	add.w	r1, r6, #16
 80066d8:	f107 0210 	add.w	r2, r7, #16
 80066dc:	f105 0310 	add.w	r3, r5, #16
 80066e0:	4674      	mov	r4, lr
 80066e2:	ed51 6a03 	vldr	s13, [r1, #-12]
 80066e6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80066ea:	ed51 7a04 	vldr	s15, [r1, #-16]
 80066ee:	ed52 5a04 	vldr	s11, [r2, #-16]
 80066f2:	ed11 7a02 	vldr	s14, [r1, #-8]
 80066f6:	ed12 6a02 	vldr	s12, [r2, #-8]
 80066fa:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80066fe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006702:	ed43 6a03 	vstr	s13, [r3, #-12]
 8006706:	ed43 7a04 	vstr	s15, [r3, #-16]
 800670a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800670e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006712:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006716:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800671a:	3c01      	subs	r4, #1
 800671c:	ed03 7a02 	vstr	s14, [r3, #-8]
 8006720:	ed43 7a01 	vstr	s15, [r3, #-4]
 8006724:	f101 0110 	add.w	r1, r1, #16
 8006728:	f102 0210 	add.w	r2, r2, #16
 800672c:	f103 0310 	add.w	r3, r3, #16
 8006730:	d1d7      	bne.n	80066e2 <arm_mat_sub_f32+0x32>
 8006732:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8006736:	441e      	add	r6, r3
 8006738:	441f      	add	r7, r3
 800673a:	441d      	add	r5, r3
 800673c:	f010 0303 	ands.w	r3, r0, #3
 8006740:	bf18      	it	ne
 8006742:	462a      	movne	r2, r5
 8006744:	d009      	beq.n	800675a <arm_mat_sub_f32+0xaa>
 8006746:	ecf6 7a01 	vldmia	r6!, {s15}
 800674a:	ecb7 7a01 	vldmia	r7!, {s14}
 800674e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006752:	3b01      	subs	r3, #1
 8006754:	ece2 7a01 	vstmia	r2!, {s15}
 8006758:	d1f5      	bne.n	8006746 <arm_mat_sub_f32+0x96>
 800675a:	2000      	movs	r0, #0
 800675c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800675e:	f06f 0002 	mvn.w	r0, #2
 8006762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006764 <arm_mat_mult_f32>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	8843      	ldrh	r3, [r0, #2]
 800676a:	880d      	ldrh	r5, [r1, #0]
 800676c:	8804      	ldrh	r4, [r0, #0]
 800676e:	b087      	sub	sp, #28
 8006770:	429d      	cmp	r5, r3
 8006772:	9403      	str	r4, [sp, #12]
 8006774:	f040 8094 	bne.w	80068a0 <arm_mat_mult_f32+0x13c>
 8006778:	8813      	ldrh	r3, [r2, #0]
 800677a:	4626      	mov	r6, r4
 800677c:	42b3      	cmp	r3, r6
 800677e:	4614      	mov	r4, r2
 8006780:	f040 808e 	bne.w	80068a0 <arm_mat_mult_f32+0x13c>
 8006784:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8006788:	8863      	ldrh	r3, [r4, #2]
 800678a:	4543      	cmp	r3, r8
 800678c:	f040 8088 	bne.w	80068a0 <arm_mat_mult_f32+0x13c>
 8006790:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 8006794:	f005 0303 	and.w	r3, r5, #3
 8006798:	461a      	mov	r2, r3
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	f10a 33ff 	add.w	r3, sl, #4294967295
 80067a0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80067a4:	6860      	ldr	r0, [r4, #4]
 80067a6:	9004      	str	r0, [sp, #16]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3301      	adds	r3, #1
 80067ac:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 80067b0:	3a01      	subs	r2, #1
 80067b2:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 80067b6:	fb03 fb0b 	mul.w	fp, r3, fp
 80067ba:	00ab      	lsls	r3, r5, #2
 80067bc:	b292      	uxth	r2, r2
 80067be:	9305      	str	r3, [sp, #20]
 80067c0:	2300      	movs	r3, #0
 80067c2:	3201      	adds	r2, #1
 80067c4:	9302      	str	r3, [sp, #8]
 80067c6:	460b      	mov	r3, r1
 80067c8:	684c      	ldr	r4, [r1, #4]
 80067ca:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80067ce:	4651      	mov	r1, sl
 80067d0:	ea4f 0088 	mov.w	r0, r8, lsl #2
 80067d4:	469a      	mov	sl, r3
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	9a02      	ldr	r2, [sp, #8]
 80067da:	2600      	movs	r6, #0
 80067dc:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 80067e0:	f10c 0510 	add.w	r5, ip, #16
 80067e4:	eddf 7a31 	vldr	s15, [pc, #196]	; 80068ac <arm_mat_mult_f32+0x148>
 80067e8:	2900      	cmp	r1, #0
 80067ea:	d057      	beq.n	800689c <arm_mat_mult_f32+0x138>
 80067ec:	f10e 0210 	add.w	r2, lr, #16
 80067f0:	4623      	mov	r3, r4
 80067f2:	ed93 5a00 	vldr	s10, [r3]
 80067f6:	ed52 5a04 	vldr	s11, [r2, #-16]
 80067fa:	ed12 7a03 	vldr	s14, [r2, #-12]
 80067fe:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006802:	ed12 6a01 	vldr	s12, [r2, #-4]
 8006806:	4403      	add	r3, r0
 8006808:	ee65 5a25 	vmul.f32	s11, s10, s11
 800680c:	ed93 5a00 	vldr	s10, [r3]
 8006810:	4403      	add	r3, r0
 8006812:	ee27 7a05 	vmul.f32	s14, s14, s10
 8006816:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800681a:	ed93 5a00 	vldr	s10, [r3]
 800681e:	4403      	add	r3, r0
 8006820:	ee77 5a27 	vadd.f32	s11, s14, s15
 8006824:	ee65 7a26 	vmul.f32	s15, s10, s13
 8006828:	edd3 6a00 	vldr	s13, [r3]
 800682c:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8006830:	3210      	adds	r2, #16
 8006832:	ee66 7a26 	vmul.f32	s15, s12, s13
 8006836:	42aa      	cmp	r2, r5
 8006838:	4403      	add	r3, r0
 800683a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800683e:	d1d8      	bne.n	80067f2 <arm_mat_mult_f32+0x8e>
 8006840:	445c      	add	r4, fp
 8006842:	4663      	mov	r3, ip
 8006844:	9a01      	ldr	r2, [sp, #4]
 8006846:	b162      	cbz	r2, 8006862 <arm_mat_mult_f32+0xfe>
 8006848:	eb03 0209 	add.w	r2, r3, r9
 800684c:	ecf3 6a01 	vldmia	r3!, {s13}
 8006850:	ed94 7a00 	vldr	s14, [r4]
 8006854:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006858:	4293      	cmp	r3, r2
 800685a:	4404      	add	r4, r0
 800685c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006860:	d1f4      	bne.n	800684c <arm_mat_mult_f32+0xe8>
 8006862:	ece7 7a01 	vstmia	r7!, {s15}
 8006866:	3601      	adds	r6, #1
 8006868:	b2b6      	uxth	r6, r6
 800686a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800686e:	45b0      	cmp	r8, r6
 8006870:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8006874:	d1b6      	bne.n	80067e4 <arm_mat_mult_f32+0x80>
 8006876:	9a03      	ldr	r2, [sp, #12]
 8006878:	9c05      	ldr	r4, [sp, #20]
 800687a:	3a01      	subs	r2, #1
 800687c:	b292      	uxth	r2, r2
 800687e:	4615      	mov	r5, r2
 8006880:	9203      	str	r2, [sp, #12]
 8006882:	9a02      	ldr	r2, [sp, #8]
 8006884:	4442      	add	r2, r8
 8006886:	b292      	uxth	r2, r2
 8006888:	44a6      	add	lr, r4
 800688a:	44a4      	add	ip, r4
 800688c:	9202      	str	r2, [sp, #8]
 800688e:	461c      	mov	r4, r3
 8006890:	2d00      	cmp	r5, #0
 8006892:	d1a0      	bne.n	80067d6 <arm_mat_mult_f32+0x72>
 8006894:	4628      	mov	r0, r5
 8006896:	b007      	add	sp, #28
 8006898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	4673      	mov	r3, lr
 800689e:	e7d1      	b.n	8006844 <arm_mat_mult_f32+0xe0>
 80068a0:	f06f 0002 	mvn.w	r0, #2
 80068a4:	b007      	add	sp, #28
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	bf00      	nop
 80068ac:	00000000 	.word	0x00000000

080068b0 <arm_mat_inverse_f32>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	8804      	ldrh	r4, [r0, #0]
 80068b6:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 80068ba:	454c      	cmp	r4, r9
 80068bc:	b08b      	sub	sp, #44	; 0x2c
 80068be:	f040 8118 	bne.w	8006af2 <arm_mat_inverse_f32+0x242>
 80068c2:	880a      	ldrh	r2, [r1, #0]
 80068c4:	884b      	ldrh	r3, [r1, #2]
 80068c6:	4293      	cmp	r3, r2
 80068c8:	f040 8113 	bne.w	8006af2 <arm_mat_inverse_f32+0x242>
 80068cc:	429c      	cmp	r4, r3
 80068ce:	f040 8110 	bne.w	8006af2 <arm_mat_inverse_f32+0x242>
 80068d2:	684b      	ldr	r3, [r1, #4]
 80068d4:	9307      	str	r3, [sp, #28]
 80068d6:	6843      	ldr	r3, [r0, #4]
 80068d8:	9009      	str	r0, [sp, #36]	; 0x24
 80068da:	9302      	str	r3, [sp, #8]
 80068dc:	b32c      	cbz	r4, 800692a <arm_mat_inverse_f32+0x7a>
 80068de:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
 80068e2:	3e01      	subs	r6, #1
 80068e4:	2700      	movs	r7, #0
 80068e6:	f104 38ff 	add.w	r8, r4, #4294967295
 80068ea:	46a3      	mov	fp, r4
 80068ec:	00b6      	lsls	r6, r6, #2
 80068ee:	9d07      	ldr	r5, [sp, #28]
 80068f0:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 80068f4:	463c      	mov	r4, r7
 80068f6:	e004      	b.n	8006902 <arm_mat_inverse_f32+0x52>
 80068f8:	f000 f9da 	bl	8006cb0 <memset>
 80068fc:	4435      	add	r5, r6
 80068fe:	3401      	adds	r4, #1
 8006900:	3e04      	subs	r6, #4
 8006902:	463a      	mov	r2, r7
 8006904:	2100      	movs	r1, #0
 8006906:	4628      	mov	r0, r5
 8006908:	b114      	cbz	r4, 8006910 <arm_mat_inverse_f32+0x60>
 800690a:	f000 f9d1 	bl	8006cb0 <memset>
 800690e:	443d      	add	r5, r7
 8006910:	f8c5 a000 	str.w	sl, [r5]
 8006914:	45a0      	cmp	r8, r4
 8006916:	f105 0504 	add.w	r5, r5, #4
 800691a:	f107 0704 	add.w	r7, r7, #4
 800691e:	4632      	mov	r2, r6
 8006920:	f04f 0100 	mov.w	r1, #0
 8006924:	4628      	mov	r0, r5
 8006926:	d1e7      	bne.n	80068f8 <arm_mat_inverse_f32+0x48>
 8006928:	465c      	mov	r4, fp
 800692a:	f1b9 0f00 	cmp.w	r9, #0
 800692e:	f000 80d7 	beq.w	8006ae0 <arm_mat_inverse_f32+0x230>
 8006932:	00a3      	lsls	r3, r4, #2
 8006934:	ea4f 0889 	mov.w	r8, r9, lsl #2
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	2700      	movs	r7, #0
 800693c:	f108 0204 	add.w	r2, r8, #4
 8006940:	469c      	mov	ip, r3
 8006942:	9e02      	ldr	r6, [sp, #8]
 8006944:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8006948:	9208      	str	r2, [sp, #32]
 800694a:	1e63      	subs	r3, r4, #1
 800694c:	9706      	str	r7, [sp, #24]
 800694e:	9303      	str	r3, [sp, #12]
 8006950:	464d      	mov	r5, r9
 8006952:	42bc      	cmp	r4, r7
 8006954:	edd6 6a00 	vldr	s13, [r6]
 8006958:	f000 80c2 	beq.w	8006ae0 <arm_mat_inverse_f32+0x230>
 800695c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8006b4c <arm_mat_inverse_f32+0x29c>
 8006960:	463a      	mov	r2, r7
 8006962:	4633      	mov	r3, r6
 8006964:	edd3 7a00 	vldr	s15, [r3]
 8006968:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800696c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006970:	bfd8      	it	le
 8006972:	eef1 7a67 	vnegle.f32	s15, s15
 8006976:	eef4 7a47 	vcmp.f32	s15, s14
 800697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697e:	f102 0201 	add.w	r2, r2, #1
 8006982:	bfc8      	it	gt
 8006984:	eeb0 7a67 	vmovgt.f32	s14, s15
 8006988:	4294      	cmp	r4, r2
 800698a:	4443      	add	r3, r8
 800698c:	d1ea      	bne.n	8006964 <arm_mat_inverse_f32+0xb4>
 800698e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006996:	f000 80a3 	beq.w	8006ae0 <arm_mat_inverse_f32+0x230>
 800699a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800699e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a2:	bfd4      	ite	le
 80069a4:	eef1 7a66 	vnegle.f32	s15, s13
 80069a8:	eef0 7a66 	vmovgt.f32	s15, s13
 80069ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80069b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b4:	d010      	beq.n	80069d8 <arm_mat_inverse_f32+0x128>
 80069b6:	9b03      	ldr	r3, [sp, #12]
 80069b8:	b173      	cbz	r3, 80069d8 <arm_mat_inverse_f32+0x128>
 80069ba:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80069be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c2:	eef1 7a66 	vneg.f32	s15, s13
 80069c6:	bfc8      	it	gt
 80069c8:	eef0 7a66 	vmovgt.f32	s15, s13
 80069cc:	eeb4 7a67 	vcmp.f32	s14, s15
 80069d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d4:	f000 8092 	beq.w	8006afc <arm_mat_inverse_f32+0x24c>
 80069d8:	9b06      	ldr	r3, [sp, #24]
 80069da:	b933      	cbnz	r3, 80069ea <arm_mat_inverse_f32+0x13a>
 80069dc:	eef5 6a40 	vcmp.f32	s13, #0.0
 80069e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e4:	d07c      	beq.n	8006ae0 <arm_mat_inverse_f32+0x230>
 80069e6:	2300      	movs	r3, #0
 80069e8:	9306      	str	r3, [sp, #24]
 80069ea:	eb0e 0308 	add.w	r3, lr, r8
 80069ee:	9304      	str	r3, [sp, #16]
 80069f0:	462a      	mov	r2, r5
 80069f2:	4633      	mov	r3, r6
 80069f4:	ed93 7a00 	vldr	s14, [r3]
 80069f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069fc:	3a01      	subs	r2, #1
 80069fe:	ece3 7a01 	vstmia	r3!, {s15}
 8006a02:	d1f7      	bne.n	80069f4 <arm_mat_inverse_f32+0x144>
 8006a04:	4649      	mov	r1, r9
 8006a06:	4673      	mov	r3, lr
 8006a08:	ed93 7a00 	vldr	s14, [r3]
 8006a0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a10:	3901      	subs	r1, #1
 8006a12:	ece3 7a01 	vstmia	r3!, {s15}
 8006a16:	d1f7      	bne.n	8006a08 <arm_mat_inverse_f32+0x158>
 8006a18:	00bb      	lsls	r3, r7, #2
 8006a1a:	9807      	ldr	r0, [sp, #28]
 8006a1c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006a20:	f8cd 8014 	str.w	r8, [sp, #20]
 8006a24:	4698      	mov	r8, r3
 8006a26:	42b9      	cmp	r1, r7
 8006a28:	f000 808c 	beq.w	8006b44 <arm_mat_inverse_f32+0x294>
 8006a2c:	eddb 6a00 	vldr	s13, [fp]
 8006a30:	462a      	mov	r2, r5
 8006a32:	46b2      	mov	sl, r6
 8006a34:	465b      	mov	r3, fp
 8006a36:	ecfa 7a01 	vldmia	sl!, {s15}
 8006a3a:	ed93 7a00 	vldr	s14, [r3]
 8006a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a42:	3a01      	subs	r2, #1
 8006a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a48:	ece3 7a01 	vstmia	r3!, {s15}
 8006a4c:	d1f3      	bne.n	8006a36 <arm_mat_inverse_f32+0x186>
 8006a4e:	44e3      	add	fp, ip
 8006a50:	464a      	mov	r2, r9
 8006a52:	46f2      	mov	sl, lr
 8006a54:	4603      	mov	r3, r0
 8006a56:	ecfa 7a01 	vldmia	sl!, {s15}
 8006a5a:	ed93 7a00 	vldr	s14, [r3]
 8006a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a62:	3a01      	subs	r2, #1
 8006a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a68:	ece3 7a01 	vstmia	r3!, {s15}
 8006a6c:	d1f3      	bne.n	8006a56 <arm_mat_inverse_f32+0x1a6>
 8006a6e:	9b01      	ldr	r3, [sp, #4]
 8006a70:	4418      	add	r0, r3
 8006a72:	3101      	adds	r1, #1
 8006a74:	428c      	cmp	r4, r1
 8006a76:	44c3      	add	fp, r8
 8006a78:	d1d5      	bne.n	8006a26 <arm_mat_inverse_f32+0x176>
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006a80:	f8dd e010 	ldr.w	lr, [sp, #16]
 8006a84:	3304      	adds	r3, #4
 8006a86:	9302      	str	r3, [sp, #8]
 8006a88:	9b08      	ldr	r3, [sp, #32]
 8006a8a:	441e      	add	r6, r3
 8006a8c:	9b03      	ldr	r3, [sp, #12]
 8006a8e:	3d01      	subs	r5, #1
 8006a90:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a94:	f107 0701 	add.w	r7, r7, #1
 8006a98:	9303      	str	r3, [sp, #12]
 8006a9a:	f1ac 0c04 	sub.w	ip, ip, #4
 8006a9e:	f47f af58 	bne.w	8006952 <arm_mat_inverse_f32+0xa2>
 8006aa2:	9b06      	ldr	r3, [sp, #24]
 8006aa4:	bb0b      	cbnz	r3, 8006aea <arm_mat_inverse_f32+0x23a>
 8006aa6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aae:	d11c      	bne.n	8006aea <arm_mat_inverse_f32+0x23a>
 8006ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	edd3 7a00 	vldr	s15, [r3]
 8006ab8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac0:	fb09 f404 	mul.w	r4, r9, r4
 8006ac4:	bf08      	it	eq
 8006ac6:	3304      	addeq	r3, #4
 8006ac8:	d007      	beq.n	8006ada <arm_mat_inverse_f32+0x22a>
 8006aca:	e00e      	b.n	8006aea <arm_mat_inverse_f32+0x23a>
 8006acc:	ecf3 7a01 	vldmia	r3!, {s15}
 8006ad0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad8:	d130      	bne.n	8006b3c <arm_mat_inverse_f32+0x28c>
 8006ada:	3501      	adds	r5, #1
 8006adc:	42a5      	cmp	r5, r4
 8006ade:	d1f5      	bne.n	8006acc <arm_mat_inverse_f32+0x21c>
 8006ae0:	f06f 0004 	mvn.w	r0, #4
 8006ae4:	b00b      	add	sp, #44	; 0x2c
 8006ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aea:	4628      	mov	r0, r5
 8006aec:	b00b      	add	sp, #44	; 0x2c
 8006aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af2:	f06f 0002 	mvn.w	r0, #2
 8006af6:	b00b      	add	sp, #44	; 0x2c
 8006af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afc:	9b02      	ldr	r3, [sp, #8]
 8006afe:	4629      	mov	r1, r5
 8006b00:	4632      	mov	r2, r6
 8006b02:	6810      	ldr	r0, [r2, #0]
 8006b04:	f8d3 a000 	ldr.w	sl, [r3]
 8006b08:	f842 ab04 	str.w	sl, [r2], #4
 8006b0c:	3901      	subs	r1, #1
 8006b0e:	f843 0b04 	str.w	r0, [r3], #4
 8006b12:	d1f6      	bne.n	8006b02 <arm_mat_inverse_f32+0x252>
 8006b14:	eb08 030e 	add.w	r3, r8, lr
 8006b18:	9304      	str	r3, [sp, #16]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	464a      	mov	r2, r9
 8006b1e:	4673      	mov	r3, lr
 8006b20:	6808      	ldr	r0, [r1, #0]
 8006b22:	f8d3 a000 	ldr.w	sl, [r3]
 8006b26:	f841 ab04 	str.w	sl, [r1], #4
 8006b2a:	3a01      	subs	r2, #1
 8006b2c:	f843 0b04 	str.w	r0, [r3], #4
 8006b30:	d1f6      	bne.n	8006b20 <arm_mat_inverse_f32+0x270>
 8006b32:	2301      	movs	r3, #1
 8006b34:	edd6 6a00 	vldr	s13, [r6]
 8006b38:	9306      	str	r3, [sp, #24]
 8006b3a:	e759      	b.n	80069f0 <arm_mat_inverse_f32+0x140>
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	b00b      	add	sp, #44	; 0x2c
 8006b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b44:	9b05      	ldr	r3, [sp, #20]
 8006b46:	44e3      	add	fp, ip
 8006b48:	4418      	add	r0, r3
 8006b4a:	e792      	b.n	8006a72 <arm_mat_inverse_f32+0x1c2>
 8006b4c:	00000000 	.word	0x00000000

08006b50 <arm_mat_init_f32>:
 8006b50:	8001      	strh	r1, [r0, #0]
 8006b52:	8042      	strh	r2, [r0, #2]
 8006b54:	6043      	str	r3, [r0, #4]
 8006b56:	4770      	bx	lr

08006b58 <arm_mat_add_f32>:
 8006b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b5a:	6803      	ldr	r3, [r0, #0]
 8006b5c:	680c      	ldr	r4, [r1, #0]
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	d151      	bne.n	8006c06 <arm_mat_add_f32+0xae>
 8006b62:	6814      	ldr	r4, [r2, #0]
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	d14e      	bne.n	8006c06 <arm_mat_add_f32+0xae>
 8006b68:	8804      	ldrh	r4, [r0, #0]
 8006b6a:	8843      	ldrh	r3, [r0, #2]
 8006b6c:	6846      	ldr	r6, [r0, #4]
 8006b6e:	684f      	ldr	r7, [r1, #4]
 8006b70:	6855      	ldr	r5, [r2, #4]
 8006b72:	fb03 f004 	mul.w	r0, r3, r4
 8006b76:	ea5f 0e90 	movs.w	lr, r0, lsr #2
 8006b7a:	d033      	beq.n	8006be4 <arm_mat_add_f32+0x8c>
 8006b7c:	f106 0110 	add.w	r1, r6, #16
 8006b80:	f107 0210 	add.w	r2, r7, #16
 8006b84:	f105 0310 	add.w	r3, r5, #16
 8006b88:	4674      	mov	r4, lr
 8006b8a:	ed51 6a03 	vldr	s13, [r1, #-12]
 8006b8e:	ed12 5a03 	vldr	s10, [r2, #-12]
 8006b92:	ed51 7a04 	vldr	s15, [r1, #-16]
 8006b96:	ed52 5a04 	vldr	s11, [r2, #-16]
 8006b9a:	ed11 7a02 	vldr	s14, [r1, #-8]
 8006b9e:	ed12 6a02 	vldr	s12, [r2, #-8]
 8006ba2:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006ba6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006baa:	ed43 6a03 	vstr	s13, [r3, #-12]
 8006bae:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006bb2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006bb6:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006bba:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	3c01      	subs	r4, #1
 8006bc4:	ed03 7a02 	vstr	s14, [r3, #-8]
 8006bc8:	ed43 7a01 	vstr	s15, [r3, #-4]
 8006bcc:	f101 0110 	add.w	r1, r1, #16
 8006bd0:	f102 0210 	add.w	r2, r2, #16
 8006bd4:	f103 0310 	add.w	r3, r3, #16
 8006bd8:	d1d7      	bne.n	8006b8a <arm_mat_add_f32+0x32>
 8006bda:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8006bde:	441e      	add	r6, r3
 8006be0:	441f      	add	r7, r3
 8006be2:	441d      	add	r5, r3
 8006be4:	f010 0303 	ands.w	r3, r0, #3
 8006be8:	bf18      	it	ne
 8006bea:	462a      	movne	r2, r5
 8006bec:	d009      	beq.n	8006c02 <arm_mat_add_f32+0xaa>
 8006bee:	ecf6 7a01 	vldmia	r6!, {s15}
 8006bf2:	ecb7 7a01 	vldmia	r7!, {s14}
 8006bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	ece2 7a01 	vstmia	r2!, {s15}
 8006c00:	d1f5      	bne.n	8006bee <arm_mat_add_f32+0x96>
 8006c02:	2000      	movs	r0, #0
 8006c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c06:	f06f 0002 	mvn.w	r0, #2
 8006c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c0c <__errno>:
 8006c0c:	4b01      	ldr	r3, [pc, #4]	; (8006c14 <__errno+0x8>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	2000173c 	.word	0x2000173c

08006c18 <__libc_init_array>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	4d0d      	ldr	r5, [pc, #52]	; (8006c50 <__libc_init_array+0x38>)
 8006c1c:	4c0d      	ldr	r4, [pc, #52]	; (8006c54 <__libc_init_array+0x3c>)
 8006c1e:	1b64      	subs	r4, r4, r5
 8006c20:	10a4      	asrs	r4, r4, #2
 8006c22:	2600      	movs	r6, #0
 8006c24:	42a6      	cmp	r6, r4
 8006c26:	d109      	bne.n	8006c3c <__libc_init_array+0x24>
 8006c28:	4d0b      	ldr	r5, [pc, #44]	; (8006c58 <__libc_init_array+0x40>)
 8006c2a:	4c0c      	ldr	r4, [pc, #48]	; (8006c5c <__libc_init_array+0x44>)
 8006c2c:	f002 ffb6 	bl	8009b9c <_init>
 8006c30:	1b64      	subs	r4, r4, r5
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	2600      	movs	r6, #0
 8006c36:	42a6      	cmp	r6, r4
 8006c38:	d105      	bne.n	8006c46 <__libc_init_array+0x2e>
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c40:	4798      	blx	r3
 8006c42:	3601      	adds	r6, #1
 8006c44:	e7ee      	b.n	8006c24 <__libc_init_array+0xc>
 8006c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4a:	4798      	blx	r3
 8006c4c:	3601      	adds	r6, #1
 8006c4e:	e7f2      	b.n	8006c36 <__libc_init_array+0x1e>
 8006c50:	08009ff4 	.word	0x08009ff4
 8006c54:	08009ff4 	.word	0x08009ff4
 8006c58:	08009ff4 	.word	0x08009ff4
 8006c5c:	08009ff8 	.word	0x08009ff8

08006c60 <memcpy>:
 8006c60:	440a      	add	r2, r1
 8006c62:	4291      	cmp	r1, r2
 8006c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c68:	d100      	bne.n	8006c6c <memcpy+0xc>
 8006c6a:	4770      	bx	lr
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c76:	4291      	cmp	r1, r2
 8006c78:	d1f9      	bne.n	8006c6e <memcpy+0xe>
 8006c7a:	bd10      	pop	{r4, pc}

08006c7c <memmove>:
 8006c7c:	4288      	cmp	r0, r1
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	eb01 0402 	add.w	r4, r1, r2
 8006c84:	d902      	bls.n	8006c8c <memmove+0x10>
 8006c86:	4284      	cmp	r4, r0
 8006c88:	4623      	mov	r3, r4
 8006c8a:	d807      	bhi.n	8006c9c <memmove+0x20>
 8006c8c:	1e43      	subs	r3, r0, #1
 8006c8e:	42a1      	cmp	r1, r4
 8006c90:	d008      	beq.n	8006ca4 <memmove+0x28>
 8006c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c9a:	e7f8      	b.n	8006c8e <memmove+0x12>
 8006c9c:	4402      	add	r2, r0
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	428a      	cmp	r2, r1
 8006ca2:	d100      	bne.n	8006ca6 <memmove+0x2a>
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cae:	e7f7      	b.n	8006ca0 <memmove+0x24>

08006cb0 <memset>:
 8006cb0:	4402      	add	r2, r0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d100      	bne.n	8006cba <memset+0xa>
 8006cb8:	4770      	bx	lr
 8006cba:	f803 1b01 	strb.w	r1, [r3], #1
 8006cbe:	e7f9      	b.n	8006cb4 <memset+0x4>

08006cc0 <__cvt>:
 8006cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	ec55 4b10 	vmov	r4, r5, d0
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	460e      	mov	r6, r1
 8006ccc:	4619      	mov	r1, r3
 8006cce:	462b      	mov	r3, r5
 8006cd0:	bfbb      	ittet	lt
 8006cd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cd6:	461d      	movlt	r5, r3
 8006cd8:	2300      	movge	r3, #0
 8006cda:	232d      	movlt	r3, #45	; 0x2d
 8006cdc:	700b      	strb	r3, [r1, #0]
 8006cde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ce0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ce4:	4691      	mov	r9, r2
 8006ce6:	f023 0820 	bic.w	r8, r3, #32
 8006cea:	bfbc      	itt	lt
 8006cec:	4622      	movlt	r2, r4
 8006cee:	4614      	movlt	r4, r2
 8006cf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cf4:	d005      	beq.n	8006d02 <__cvt+0x42>
 8006cf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cfa:	d100      	bne.n	8006cfe <__cvt+0x3e>
 8006cfc:	3601      	adds	r6, #1
 8006cfe:	2102      	movs	r1, #2
 8006d00:	e000      	b.n	8006d04 <__cvt+0x44>
 8006d02:	2103      	movs	r1, #3
 8006d04:	ab03      	add	r3, sp, #12
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	ab02      	add	r3, sp, #8
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	ec45 4b10 	vmov	d0, r4, r5
 8006d10:	4653      	mov	r3, sl
 8006d12:	4632      	mov	r2, r6
 8006d14:	f000 fec8 	bl	8007aa8 <_dtoa_r>
 8006d18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	d102      	bne.n	8006d26 <__cvt+0x66>
 8006d20:	f019 0f01 	tst.w	r9, #1
 8006d24:	d022      	beq.n	8006d6c <__cvt+0xac>
 8006d26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d2a:	eb07 0906 	add.w	r9, r7, r6
 8006d2e:	d110      	bne.n	8006d52 <__cvt+0x92>
 8006d30:	783b      	ldrb	r3, [r7, #0]
 8006d32:	2b30      	cmp	r3, #48	; 0x30
 8006d34:	d10a      	bne.n	8006d4c <__cvt+0x8c>
 8006d36:	2200      	movs	r2, #0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d42:	b918      	cbnz	r0, 8006d4c <__cvt+0x8c>
 8006d44:	f1c6 0601 	rsb	r6, r6, #1
 8006d48:	f8ca 6000 	str.w	r6, [sl]
 8006d4c:	f8da 3000 	ldr.w	r3, [sl]
 8006d50:	4499      	add	r9, r3
 8006d52:	2200      	movs	r2, #0
 8006d54:	2300      	movs	r3, #0
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d5e:	b108      	cbz	r0, 8006d64 <__cvt+0xa4>
 8006d60:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d64:	2230      	movs	r2, #48	; 0x30
 8006d66:	9b03      	ldr	r3, [sp, #12]
 8006d68:	454b      	cmp	r3, r9
 8006d6a:	d307      	bcc.n	8006d7c <__cvt+0xbc>
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d70:	1bdb      	subs	r3, r3, r7
 8006d72:	4638      	mov	r0, r7
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	b004      	add	sp, #16
 8006d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7c:	1c59      	adds	r1, r3, #1
 8006d7e:	9103      	str	r1, [sp, #12]
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	e7f0      	b.n	8006d66 <__cvt+0xa6>

08006d84 <__exponent>:
 8006d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d86:	4603      	mov	r3, r0
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	bfb8      	it	lt
 8006d8c:	4249      	neglt	r1, r1
 8006d8e:	f803 2b02 	strb.w	r2, [r3], #2
 8006d92:	bfb4      	ite	lt
 8006d94:	222d      	movlt	r2, #45	; 0x2d
 8006d96:	222b      	movge	r2, #43	; 0x2b
 8006d98:	2909      	cmp	r1, #9
 8006d9a:	7042      	strb	r2, [r0, #1]
 8006d9c:	dd2a      	ble.n	8006df4 <__exponent+0x70>
 8006d9e:	f10d 0407 	add.w	r4, sp, #7
 8006da2:	46a4      	mov	ip, r4
 8006da4:	270a      	movs	r7, #10
 8006da6:	46a6      	mov	lr, r4
 8006da8:	460a      	mov	r2, r1
 8006daa:	fb91 f6f7 	sdiv	r6, r1, r7
 8006dae:	fb07 1516 	mls	r5, r7, r6, r1
 8006db2:	3530      	adds	r5, #48	; 0x30
 8006db4:	2a63      	cmp	r2, #99	; 0x63
 8006db6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006dba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	dcf1      	bgt.n	8006da6 <__exponent+0x22>
 8006dc2:	3130      	adds	r1, #48	; 0x30
 8006dc4:	f1ae 0502 	sub.w	r5, lr, #2
 8006dc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006dcc:	1c44      	adds	r4, r0, #1
 8006dce:	4629      	mov	r1, r5
 8006dd0:	4561      	cmp	r1, ip
 8006dd2:	d30a      	bcc.n	8006dea <__exponent+0x66>
 8006dd4:	f10d 0209 	add.w	r2, sp, #9
 8006dd8:	eba2 020e 	sub.w	r2, r2, lr
 8006ddc:	4565      	cmp	r5, ip
 8006dde:	bf88      	it	hi
 8006de0:	2200      	movhi	r2, #0
 8006de2:	4413      	add	r3, r2
 8006de4:	1a18      	subs	r0, r3, r0
 8006de6:	b003      	add	sp, #12
 8006de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006df2:	e7ed      	b.n	8006dd0 <__exponent+0x4c>
 8006df4:	2330      	movs	r3, #48	; 0x30
 8006df6:	3130      	adds	r1, #48	; 0x30
 8006df8:	7083      	strb	r3, [r0, #2]
 8006dfa:	70c1      	strb	r1, [r0, #3]
 8006dfc:	1d03      	adds	r3, r0, #4
 8006dfe:	e7f1      	b.n	8006de4 <__exponent+0x60>

08006e00 <_printf_float>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	ed2d 8b02 	vpush	{d8}
 8006e08:	b08d      	sub	sp, #52	; 0x34
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e10:	4616      	mov	r6, r2
 8006e12:	461f      	mov	r7, r3
 8006e14:	4605      	mov	r5, r0
 8006e16:	f001 fdeb 	bl	80089f0 <_localeconv_r>
 8006e1a:	f8d0 a000 	ldr.w	sl, [r0]
 8006e1e:	4650      	mov	r0, sl
 8006e20:	f7f9 f9d6 	bl	80001d0 <strlen>
 8006e24:	2300      	movs	r3, #0
 8006e26:	930a      	str	r3, [sp, #40]	; 0x28
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	9305      	str	r3, [sp, #20]
 8006e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e34:	3307      	adds	r3, #7
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	f103 0208 	add.w	r2, r3, #8
 8006e3e:	f8c8 2000 	str.w	r2, [r8]
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e52:	9307      	str	r3, [sp, #28]
 8006e54:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e58:	ee08 0a10 	vmov	s16, r0
 8006e5c:	4b9f      	ldr	r3, [pc, #636]	; (80070dc <_printf_float+0x2dc>)
 8006e5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e62:	f04f 32ff 	mov.w	r2, #4294967295
 8006e66:	f7f9 fe61 	bl	8000b2c <__aeabi_dcmpun>
 8006e6a:	bb88      	cbnz	r0, 8006ed0 <_printf_float+0xd0>
 8006e6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e70:	4b9a      	ldr	r3, [pc, #616]	; (80070dc <_printf_float+0x2dc>)
 8006e72:	f04f 32ff 	mov.w	r2, #4294967295
 8006e76:	f7f9 fe3b 	bl	8000af0 <__aeabi_dcmple>
 8006e7a:	bb48      	cbnz	r0, 8006ed0 <_printf_float+0xd0>
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4640      	mov	r0, r8
 8006e82:	4649      	mov	r1, r9
 8006e84:	f7f9 fe2a 	bl	8000adc <__aeabi_dcmplt>
 8006e88:	b110      	cbz	r0, 8006e90 <_printf_float+0x90>
 8006e8a:	232d      	movs	r3, #45	; 0x2d
 8006e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e90:	4b93      	ldr	r3, [pc, #588]	; (80070e0 <_printf_float+0x2e0>)
 8006e92:	4894      	ldr	r0, [pc, #592]	; (80070e4 <_printf_float+0x2e4>)
 8006e94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e98:	bf94      	ite	ls
 8006e9a:	4698      	movls	r8, r3
 8006e9c:	4680      	movhi	r8, r0
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	6123      	str	r3, [r4, #16]
 8006ea2:	9b05      	ldr	r3, [sp, #20]
 8006ea4:	f023 0204 	bic.w	r2, r3, #4
 8006ea8:	6022      	str	r2, [r4, #0]
 8006eaa:	f04f 0900 	mov.w	r9, #0
 8006eae:	9700      	str	r7, [sp, #0]
 8006eb0:	4633      	mov	r3, r6
 8006eb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 f9d8 	bl	800726c <_printf_common>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f040 8090 	bne.w	8006fe2 <_printf_float+0x1e2>
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	b00d      	add	sp, #52	; 0x34
 8006ec8:	ecbd 8b02 	vpop	{d8}
 8006ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed0:	4642      	mov	r2, r8
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	f7f9 fe28 	bl	8000b2c <__aeabi_dcmpun>
 8006edc:	b140      	cbz	r0, 8006ef0 <_printf_float+0xf0>
 8006ede:	464b      	mov	r3, r9
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bfbc      	itt	lt
 8006ee4:	232d      	movlt	r3, #45	; 0x2d
 8006ee6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006eea:	487f      	ldr	r0, [pc, #508]	; (80070e8 <_printf_float+0x2e8>)
 8006eec:	4b7f      	ldr	r3, [pc, #508]	; (80070ec <_printf_float+0x2ec>)
 8006eee:	e7d1      	b.n	8006e94 <_printf_float+0x94>
 8006ef0:	6863      	ldr	r3, [r4, #4]
 8006ef2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ef6:	9206      	str	r2, [sp, #24]
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	d13f      	bne.n	8006f7c <_printf_float+0x17c>
 8006efc:	2306      	movs	r3, #6
 8006efe:	6063      	str	r3, [r4, #4]
 8006f00:	9b05      	ldr	r3, [sp, #20]
 8006f02:	6861      	ldr	r1, [r4, #4]
 8006f04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9303      	str	r3, [sp, #12]
 8006f0c:	ab0a      	add	r3, sp, #40	; 0x28
 8006f0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f12:	ab09      	add	r3, sp, #36	; 0x24
 8006f14:	ec49 8b10 	vmov	d0, r8, r9
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	6022      	str	r2, [r4, #0]
 8006f1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f20:	4628      	mov	r0, r5
 8006f22:	f7ff fecd 	bl	8006cc0 <__cvt>
 8006f26:	9b06      	ldr	r3, [sp, #24]
 8006f28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f2a:	2b47      	cmp	r3, #71	; 0x47
 8006f2c:	4680      	mov	r8, r0
 8006f2e:	d108      	bne.n	8006f42 <_printf_float+0x142>
 8006f30:	1cc8      	adds	r0, r1, #3
 8006f32:	db02      	blt.n	8006f3a <_printf_float+0x13a>
 8006f34:	6863      	ldr	r3, [r4, #4]
 8006f36:	4299      	cmp	r1, r3
 8006f38:	dd41      	ble.n	8006fbe <_printf_float+0x1be>
 8006f3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f3e:	fa5f fb8b 	uxtb.w	fp, fp
 8006f42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f46:	d820      	bhi.n	8006f8a <_printf_float+0x18a>
 8006f48:	3901      	subs	r1, #1
 8006f4a:	465a      	mov	r2, fp
 8006f4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f50:	9109      	str	r1, [sp, #36]	; 0x24
 8006f52:	f7ff ff17 	bl	8006d84 <__exponent>
 8006f56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f58:	1813      	adds	r3, r2, r0
 8006f5a:	2a01      	cmp	r2, #1
 8006f5c:	4681      	mov	r9, r0
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	dc02      	bgt.n	8006f68 <_printf_float+0x168>
 8006f62:	6822      	ldr	r2, [r4, #0]
 8006f64:	07d2      	lsls	r2, r2, #31
 8006f66:	d501      	bpl.n	8006f6c <_printf_float+0x16c>
 8006f68:	3301      	adds	r3, #1
 8006f6a:	6123      	str	r3, [r4, #16]
 8006f6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d09c      	beq.n	8006eae <_printf_float+0xae>
 8006f74:	232d      	movs	r3, #45	; 0x2d
 8006f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7a:	e798      	b.n	8006eae <_printf_float+0xae>
 8006f7c:	9a06      	ldr	r2, [sp, #24]
 8006f7e:	2a47      	cmp	r2, #71	; 0x47
 8006f80:	d1be      	bne.n	8006f00 <_printf_float+0x100>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1bc      	bne.n	8006f00 <_printf_float+0x100>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e7b9      	b.n	8006efe <_printf_float+0xfe>
 8006f8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f8e:	d118      	bne.n	8006fc2 <_printf_float+0x1c2>
 8006f90:	2900      	cmp	r1, #0
 8006f92:	6863      	ldr	r3, [r4, #4]
 8006f94:	dd0b      	ble.n	8006fae <_printf_float+0x1ae>
 8006f96:	6121      	str	r1, [r4, #16]
 8006f98:	b913      	cbnz	r3, 8006fa0 <_printf_float+0x1a0>
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	07d0      	lsls	r0, r2, #31
 8006f9e:	d502      	bpl.n	8006fa6 <_printf_float+0x1a6>
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	440b      	add	r3, r1
 8006fa4:	6123      	str	r3, [r4, #16]
 8006fa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fa8:	f04f 0900 	mov.w	r9, #0
 8006fac:	e7de      	b.n	8006f6c <_printf_float+0x16c>
 8006fae:	b913      	cbnz	r3, 8006fb6 <_printf_float+0x1b6>
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	07d2      	lsls	r2, r2, #31
 8006fb4:	d501      	bpl.n	8006fba <_printf_float+0x1ba>
 8006fb6:	3302      	adds	r3, #2
 8006fb8:	e7f4      	b.n	8006fa4 <_printf_float+0x1a4>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e7f2      	b.n	8006fa4 <_printf_float+0x1a4>
 8006fbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc4:	4299      	cmp	r1, r3
 8006fc6:	db05      	blt.n	8006fd4 <_printf_float+0x1d4>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	6121      	str	r1, [r4, #16]
 8006fcc:	07d8      	lsls	r0, r3, #31
 8006fce:	d5ea      	bpl.n	8006fa6 <_printf_float+0x1a6>
 8006fd0:	1c4b      	adds	r3, r1, #1
 8006fd2:	e7e7      	b.n	8006fa4 <_printf_float+0x1a4>
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	bfd4      	ite	le
 8006fd8:	f1c1 0202 	rsble	r2, r1, #2
 8006fdc:	2201      	movgt	r2, #1
 8006fde:	4413      	add	r3, r2
 8006fe0:	e7e0      	b.n	8006fa4 <_printf_float+0x1a4>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	055a      	lsls	r2, r3, #21
 8006fe6:	d407      	bmi.n	8006ff8 <_printf_float+0x1f8>
 8006fe8:	6923      	ldr	r3, [r4, #16]
 8006fea:	4642      	mov	r2, r8
 8006fec:	4631      	mov	r1, r6
 8006fee:	4628      	mov	r0, r5
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d12c      	bne.n	8007050 <_printf_float+0x250>
 8006ff6:	e764      	b.n	8006ec2 <_printf_float+0xc2>
 8006ff8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ffc:	f240 80e0 	bls.w	80071c0 <_printf_float+0x3c0>
 8007000:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007004:	2200      	movs	r2, #0
 8007006:	2300      	movs	r3, #0
 8007008:	f7f9 fd5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800700c:	2800      	cmp	r0, #0
 800700e:	d034      	beq.n	800707a <_printf_float+0x27a>
 8007010:	4a37      	ldr	r2, [pc, #220]	; (80070f0 <_printf_float+0x2f0>)
 8007012:	2301      	movs	r3, #1
 8007014:	4631      	mov	r1, r6
 8007016:	4628      	mov	r0, r5
 8007018:	47b8      	blx	r7
 800701a:	3001      	adds	r0, #1
 800701c:	f43f af51 	beq.w	8006ec2 <_printf_float+0xc2>
 8007020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007024:	429a      	cmp	r2, r3
 8007026:	db02      	blt.n	800702e <_printf_float+0x22e>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	07d8      	lsls	r0, r3, #31
 800702c:	d510      	bpl.n	8007050 <_printf_float+0x250>
 800702e:	ee18 3a10 	vmov	r3, s16
 8007032:	4652      	mov	r2, sl
 8007034:	4631      	mov	r1, r6
 8007036:	4628      	mov	r0, r5
 8007038:	47b8      	blx	r7
 800703a:	3001      	adds	r0, #1
 800703c:	f43f af41 	beq.w	8006ec2 <_printf_float+0xc2>
 8007040:	f04f 0800 	mov.w	r8, #0
 8007044:	f104 091a 	add.w	r9, r4, #26
 8007048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704a:	3b01      	subs	r3, #1
 800704c:	4543      	cmp	r3, r8
 800704e:	dc09      	bgt.n	8007064 <_printf_float+0x264>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	079b      	lsls	r3, r3, #30
 8007054:	f100 8105 	bmi.w	8007262 <_printf_float+0x462>
 8007058:	68e0      	ldr	r0, [r4, #12]
 800705a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800705c:	4298      	cmp	r0, r3
 800705e:	bfb8      	it	lt
 8007060:	4618      	movlt	r0, r3
 8007062:	e730      	b.n	8006ec6 <_printf_float+0xc6>
 8007064:	2301      	movs	r3, #1
 8007066:	464a      	mov	r2, r9
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f af27 	beq.w	8006ec2 <_printf_float+0xc2>
 8007074:	f108 0801 	add.w	r8, r8, #1
 8007078:	e7e6      	b.n	8007048 <_printf_float+0x248>
 800707a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707c:	2b00      	cmp	r3, #0
 800707e:	dc39      	bgt.n	80070f4 <_printf_float+0x2f4>
 8007080:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <_printf_float+0x2f0>)
 8007082:	2301      	movs	r3, #1
 8007084:	4631      	mov	r1, r6
 8007086:	4628      	mov	r0, r5
 8007088:	47b8      	blx	r7
 800708a:	3001      	adds	r0, #1
 800708c:	f43f af19 	beq.w	8006ec2 <_printf_float+0xc2>
 8007090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007094:	4313      	orrs	r3, r2
 8007096:	d102      	bne.n	800709e <_printf_float+0x29e>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	07d9      	lsls	r1, r3, #31
 800709c:	d5d8      	bpl.n	8007050 <_printf_float+0x250>
 800709e:	ee18 3a10 	vmov	r3, s16
 80070a2:	4652      	mov	r2, sl
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	f43f af09 	beq.w	8006ec2 <_printf_float+0xc2>
 80070b0:	f04f 0900 	mov.w	r9, #0
 80070b4:	f104 0a1a 	add.w	sl, r4, #26
 80070b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ba:	425b      	negs	r3, r3
 80070bc:	454b      	cmp	r3, r9
 80070be:	dc01      	bgt.n	80070c4 <_printf_float+0x2c4>
 80070c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c2:	e792      	b.n	8006fea <_printf_float+0x1ea>
 80070c4:	2301      	movs	r3, #1
 80070c6:	4652      	mov	r2, sl
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f aef7 	beq.w	8006ec2 <_printf_float+0xc2>
 80070d4:	f109 0901 	add.w	r9, r9, #1
 80070d8:	e7ee      	b.n	80070b8 <_printf_float+0x2b8>
 80070da:	bf00      	nop
 80070dc:	7fefffff 	.word	0x7fefffff
 80070e0:	08009c0c 	.word	0x08009c0c
 80070e4:	08009c10 	.word	0x08009c10
 80070e8:	08009c18 	.word	0x08009c18
 80070ec:	08009c14 	.word	0x08009c14
 80070f0:	08009c1c 	.word	0x08009c1c
 80070f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070f8:	429a      	cmp	r2, r3
 80070fa:	bfa8      	it	ge
 80070fc:	461a      	movge	r2, r3
 80070fe:	2a00      	cmp	r2, #0
 8007100:	4691      	mov	r9, r2
 8007102:	dc37      	bgt.n	8007174 <_printf_float+0x374>
 8007104:	f04f 0b00 	mov.w	fp, #0
 8007108:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800710c:	f104 021a 	add.w	r2, r4, #26
 8007110:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007112:	9305      	str	r3, [sp, #20]
 8007114:	eba3 0309 	sub.w	r3, r3, r9
 8007118:	455b      	cmp	r3, fp
 800711a:	dc33      	bgt.n	8007184 <_printf_float+0x384>
 800711c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007120:	429a      	cmp	r2, r3
 8007122:	db3b      	blt.n	800719c <_printf_float+0x39c>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	07da      	lsls	r2, r3, #31
 8007128:	d438      	bmi.n	800719c <_printf_float+0x39c>
 800712a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800712c:	9b05      	ldr	r3, [sp, #20]
 800712e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	eba2 0901 	sub.w	r9, r2, r1
 8007136:	4599      	cmp	r9, r3
 8007138:	bfa8      	it	ge
 800713a:	4699      	movge	r9, r3
 800713c:	f1b9 0f00 	cmp.w	r9, #0
 8007140:	dc35      	bgt.n	80071ae <_printf_float+0x3ae>
 8007142:	f04f 0800 	mov.w	r8, #0
 8007146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800714a:	f104 0a1a 	add.w	sl, r4, #26
 800714e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	eba3 0309 	sub.w	r3, r3, r9
 8007158:	4543      	cmp	r3, r8
 800715a:	f77f af79 	ble.w	8007050 <_printf_float+0x250>
 800715e:	2301      	movs	r3, #1
 8007160:	4652      	mov	r2, sl
 8007162:	4631      	mov	r1, r6
 8007164:	4628      	mov	r0, r5
 8007166:	47b8      	blx	r7
 8007168:	3001      	adds	r0, #1
 800716a:	f43f aeaa 	beq.w	8006ec2 <_printf_float+0xc2>
 800716e:	f108 0801 	add.w	r8, r8, #1
 8007172:	e7ec      	b.n	800714e <_printf_float+0x34e>
 8007174:	4613      	mov	r3, r2
 8007176:	4631      	mov	r1, r6
 8007178:	4642      	mov	r2, r8
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	d1c0      	bne.n	8007104 <_printf_float+0x304>
 8007182:	e69e      	b.n	8006ec2 <_printf_float+0xc2>
 8007184:	2301      	movs	r3, #1
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	9205      	str	r2, [sp, #20]
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	f43f ae97 	beq.w	8006ec2 <_printf_float+0xc2>
 8007194:	9a05      	ldr	r2, [sp, #20]
 8007196:	f10b 0b01 	add.w	fp, fp, #1
 800719a:	e7b9      	b.n	8007110 <_printf_float+0x310>
 800719c:	ee18 3a10 	vmov	r3, s16
 80071a0:	4652      	mov	r2, sl
 80071a2:	4631      	mov	r1, r6
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b8      	blx	r7
 80071a8:	3001      	adds	r0, #1
 80071aa:	d1be      	bne.n	800712a <_printf_float+0x32a>
 80071ac:	e689      	b.n	8006ec2 <_printf_float+0xc2>
 80071ae:	9a05      	ldr	r2, [sp, #20]
 80071b0:	464b      	mov	r3, r9
 80071b2:	4442      	add	r2, r8
 80071b4:	4631      	mov	r1, r6
 80071b6:	4628      	mov	r0, r5
 80071b8:	47b8      	blx	r7
 80071ba:	3001      	adds	r0, #1
 80071bc:	d1c1      	bne.n	8007142 <_printf_float+0x342>
 80071be:	e680      	b.n	8006ec2 <_printf_float+0xc2>
 80071c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071c2:	2a01      	cmp	r2, #1
 80071c4:	dc01      	bgt.n	80071ca <_printf_float+0x3ca>
 80071c6:	07db      	lsls	r3, r3, #31
 80071c8:	d538      	bpl.n	800723c <_printf_float+0x43c>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4642      	mov	r2, r8
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	f43f ae74 	beq.w	8006ec2 <_printf_float+0xc2>
 80071da:	ee18 3a10 	vmov	r3, s16
 80071de:	4652      	mov	r2, sl
 80071e0:	4631      	mov	r1, r6
 80071e2:	4628      	mov	r0, r5
 80071e4:	47b8      	blx	r7
 80071e6:	3001      	adds	r0, #1
 80071e8:	f43f ae6b 	beq.w	8006ec2 <_printf_float+0xc2>
 80071ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071f0:	2200      	movs	r2, #0
 80071f2:	2300      	movs	r3, #0
 80071f4:	f7f9 fc68 	bl	8000ac8 <__aeabi_dcmpeq>
 80071f8:	b9d8      	cbnz	r0, 8007232 <_printf_float+0x432>
 80071fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fc:	f108 0201 	add.w	r2, r8, #1
 8007200:	3b01      	subs	r3, #1
 8007202:	4631      	mov	r1, r6
 8007204:	4628      	mov	r0, r5
 8007206:	47b8      	blx	r7
 8007208:	3001      	adds	r0, #1
 800720a:	d10e      	bne.n	800722a <_printf_float+0x42a>
 800720c:	e659      	b.n	8006ec2 <_printf_float+0xc2>
 800720e:	2301      	movs	r3, #1
 8007210:	4652      	mov	r2, sl
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	f43f ae52 	beq.w	8006ec2 <_printf_float+0xc2>
 800721e:	f108 0801 	add.w	r8, r8, #1
 8007222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007224:	3b01      	subs	r3, #1
 8007226:	4543      	cmp	r3, r8
 8007228:	dcf1      	bgt.n	800720e <_printf_float+0x40e>
 800722a:	464b      	mov	r3, r9
 800722c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007230:	e6dc      	b.n	8006fec <_printf_float+0x1ec>
 8007232:	f04f 0800 	mov.w	r8, #0
 8007236:	f104 0a1a 	add.w	sl, r4, #26
 800723a:	e7f2      	b.n	8007222 <_printf_float+0x422>
 800723c:	2301      	movs	r3, #1
 800723e:	4642      	mov	r2, r8
 8007240:	e7df      	b.n	8007202 <_printf_float+0x402>
 8007242:	2301      	movs	r3, #1
 8007244:	464a      	mov	r2, r9
 8007246:	4631      	mov	r1, r6
 8007248:	4628      	mov	r0, r5
 800724a:	47b8      	blx	r7
 800724c:	3001      	adds	r0, #1
 800724e:	f43f ae38 	beq.w	8006ec2 <_printf_float+0xc2>
 8007252:	f108 0801 	add.w	r8, r8, #1
 8007256:	68e3      	ldr	r3, [r4, #12]
 8007258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800725a:	1a5b      	subs	r3, r3, r1
 800725c:	4543      	cmp	r3, r8
 800725e:	dcf0      	bgt.n	8007242 <_printf_float+0x442>
 8007260:	e6fa      	b.n	8007058 <_printf_float+0x258>
 8007262:	f04f 0800 	mov.w	r8, #0
 8007266:	f104 0919 	add.w	r9, r4, #25
 800726a:	e7f4      	b.n	8007256 <_printf_float+0x456>

0800726c <_printf_common>:
 800726c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007270:	4616      	mov	r6, r2
 8007272:	4699      	mov	r9, r3
 8007274:	688a      	ldr	r2, [r1, #8]
 8007276:	690b      	ldr	r3, [r1, #16]
 8007278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800727c:	4293      	cmp	r3, r2
 800727e:	bfb8      	it	lt
 8007280:	4613      	movlt	r3, r2
 8007282:	6033      	str	r3, [r6, #0]
 8007284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007288:	4607      	mov	r7, r0
 800728a:	460c      	mov	r4, r1
 800728c:	b10a      	cbz	r2, 8007292 <_printf_common+0x26>
 800728e:	3301      	adds	r3, #1
 8007290:	6033      	str	r3, [r6, #0]
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	0699      	lsls	r1, r3, #26
 8007296:	bf42      	ittt	mi
 8007298:	6833      	ldrmi	r3, [r6, #0]
 800729a:	3302      	addmi	r3, #2
 800729c:	6033      	strmi	r3, [r6, #0]
 800729e:	6825      	ldr	r5, [r4, #0]
 80072a0:	f015 0506 	ands.w	r5, r5, #6
 80072a4:	d106      	bne.n	80072b4 <_printf_common+0x48>
 80072a6:	f104 0a19 	add.w	sl, r4, #25
 80072aa:	68e3      	ldr	r3, [r4, #12]
 80072ac:	6832      	ldr	r2, [r6, #0]
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	42ab      	cmp	r3, r5
 80072b2:	dc26      	bgt.n	8007302 <_printf_common+0x96>
 80072b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072b8:	1e13      	subs	r3, r2, #0
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	bf18      	it	ne
 80072be:	2301      	movne	r3, #1
 80072c0:	0692      	lsls	r2, r2, #26
 80072c2:	d42b      	bmi.n	800731c <_printf_common+0xb0>
 80072c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072c8:	4649      	mov	r1, r9
 80072ca:	4638      	mov	r0, r7
 80072cc:	47c0      	blx	r8
 80072ce:	3001      	adds	r0, #1
 80072d0:	d01e      	beq.n	8007310 <_printf_common+0xa4>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	68e5      	ldr	r5, [r4, #12]
 80072d6:	6832      	ldr	r2, [r6, #0]
 80072d8:	f003 0306 	and.w	r3, r3, #6
 80072dc:	2b04      	cmp	r3, #4
 80072de:	bf08      	it	eq
 80072e0:	1aad      	subeq	r5, r5, r2
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	6922      	ldr	r2, [r4, #16]
 80072e6:	bf0c      	ite	eq
 80072e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072ec:	2500      	movne	r5, #0
 80072ee:	4293      	cmp	r3, r2
 80072f0:	bfc4      	itt	gt
 80072f2:	1a9b      	subgt	r3, r3, r2
 80072f4:	18ed      	addgt	r5, r5, r3
 80072f6:	2600      	movs	r6, #0
 80072f8:	341a      	adds	r4, #26
 80072fa:	42b5      	cmp	r5, r6
 80072fc:	d11a      	bne.n	8007334 <_printf_common+0xc8>
 80072fe:	2000      	movs	r0, #0
 8007300:	e008      	b.n	8007314 <_printf_common+0xa8>
 8007302:	2301      	movs	r3, #1
 8007304:	4652      	mov	r2, sl
 8007306:	4649      	mov	r1, r9
 8007308:	4638      	mov	r0, r7
 800730a:	47c0      	blx	r8
 800730c:	3001      	adds	r0, #1
 800730e:	d103      	bne.n	8007318 <_printf_common+0xac>
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007318:	3501      	adds	r5, #1
 800731a:	e7c6      	b.n	80072aa <_printf_common+0x3e>
 800731c:	18e1      	adds	r1, r4, r3
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	2030      	movs	r0, #48	; 0x30
 8007322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007326:	4422      	add	r2, r4
 8007328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800732c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007330:	3302      	adds	r3, #2
 8007332:	e7c7      	b.n	80072c4 <_printf_common+0x58>
 8007334:	2301      	movs	r3, #1
 8007336:	4622      	mov	r2, r4
 8007338:	4649      	mov	r1, r9
 800733a:	4638      	mov	r0, r7
 800733c:	47c0      	blx	r8
 800733e:	3001      	adds	r0, #1
 8007340:	d0e6      	beq.n	8007310 <_printf_common+0xa4>
 8007342:	3601      	adds	r6, #1
 8007344:	e7d9      	b.n	80072fa <_printf_common+0x8e>
	...

08007348 <_printf_i>:
 8007348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	460c      	mov	r4, r1
 800734e:	4691      	mov	r9, r2
 8007350:	7e27      	ldrb	r7, [r4, #24]
 8007352:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007354:	2f78      	cmp	r7, #120	; 0x78
 8007356:	4680      	mov	r8, r0
 8007358:	469a      	mov	sl, r3
 800735a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800735e:	d807      	bhi.n	8007370 <_printf_i+0x28>
 8007360:	2f62      	cmp	r7, #98	; 0x62
 8007362:	d80a      	bhi.n	800737a <_printf_i+0x32>
 8007364:	2f00      	cmp	r7, #0
 8007366:	f000 80d8 	beq.w	800751a <_printf_i+0x1d2>
 800736a:	2f58      	cmp	r7, #88	; 0x58
 800736c:	f000 80a3 	beq.w	80074b6 <_printf_i+0x16e>
 8007370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007378:	e03a      	b.n	80073f0 <_printf_i+0xa8>
 800737a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800737e:	2b15      	cmp	r3, #21
 8007380:	d8f6      	bhi.n	8007370 <_printf_i+0x28>
 8007382:	a001      	add	r0, pc, #4	; (adr r0, 8007388 <_printf_i+0x40>)
 8007384:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007388:	080073e1 	.word	0x080073e1
 800738c:	080073f5 	.word	0x080073f5
 8007390:	08007371 	.word	0x08007371
 8007394:	08007371 	.word	0x08007371
 8007398:	08007371 	.word	0x08007371
 800739c:	08007371 	.word	0x08007371
 80073a0:	080073f5 	.word	0x080073f5
 80073a4:	08007371 	.word	0x08007371
 80073a8:	08007371 	.word	0x08007371
 80073ac:	08007371 	.word	0x08007371
 80073b0:	08007371 	.word	0x08007371
 80073b4:	08007501 	.word	0x08007501
 80073b8:	08007425 	.word	0x08007425
 80073bc:	080074e3 	.word	0x080074e3
 80073c0:	08007371 	.word	0x08007371
 80073c4:	08007371 	.word	0x08007371
 80073c8:	08007523 	.word	0x08007523
 80073cc:	08007371 	.word	0x08007371
 80073d0:	08007425 	.word	0x08007425
 80073d4:	08007371 	.word	0x08007371
 80073d8:	08007371 	.word	0x08007371
 80073dc:	080074eb 	.word	0x080074eb
 80073e0:	680b      	ldr	r3, [r1, #0]
 80073e2:	1d1a      	adds	r2, r3, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	600a      	str	r2, [r1, #0]
 80073e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0a3      	b.n	800753c <_printf_i+0x1f4>
 80073f4:	6825      	ldr	r5, [r4, #0]
 80073f6:	6808      	ldr	r0, [r1, #0]
 80073f8:	062e      	lsls	r6, r5, #24
 80073fa:	f100 0304 	add.w	r3, r0, #4
 80073fe:	d50a      	bpl.n	8007416 <_printf_i+0xce>
 8007400:	6805      	ldr	r5, [r0, #0]
 8007402:	600b      	str	r3, [r1, #0]
 8007404:	2d00      	cmp	r5, #0
 8007406:	da03      	bge.n	8007410 <_printf_i+0xc8>
 8007408:	232d      	movs	r3, #45	; 0x2d
 800740a:	426d      	negs	r5, r5
 800740c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007410:	485e      	ldr	r0, [pc, #376]	; (800758c <_printf_i+0x244>)
 8007412:	230a      	movs	r3, #10
 8007414:	e019      	b.n	800744a <_printf_i+0x102>
 8007416:	f015 0f40 	tst.w	r5, #64	; 0x40
 800741a:	6805      	ldr	r5, [r0, #0]
 800741c:	600b      	str	r3, [r1, #0]
 800741e:	bf18      	it	ne
 8007420:	b22d      	sxthne	r5, r5
 8007422:	e7ef      	b.n	8007404 <_printf_i+0xbc>
 8007424:	680b      	ldr	r3, [r1, #0]
 8007426:	6825      	ldr	r5, [r4, #0]
 8007428:	1d18      	adds	r0, r3, #4
 800742a:	6008      	str	r0, [r1, #0]
 800742c:	0628      	lsls	r0, r5, #24
 800742e:	d501      	bpl.n	8007434 <_printf_i+0xec>
 8007430:	681d      	ldr	r5, [r3, #0]
 8007432:	e002      	b.n	800743a <_printf_i+0xf2>
 8007434:	0669      	lsls	r1, r5, #25
 8007436:	d5fb      	bpl.n	8007430 <_printf_i+0xe8>
 8007438:	881d      	ldrh	r5, [r3, #0]
 800743a:	4854      	ldr	r0, [pc, #336]	; (800758c <_printf_i+0x244>)
 800743c:	2f6f      	cmp	r7, #111	; 0x6f
 800743e:	bf0c      	ite	eq
 8007440:	2308      	moveq	r3, #8
 8007442:	230a      	movne	r3, #10
 8007444:	2100      	movs	r1, #0
 8007446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800744a:	6866      	ldr	r6, [r4, #4]
 800744c:	60a6      	str	r6, [r4, #8]
 800744e:	2e00      	cmp	r6, #0
 8007450:	bfa2      	ittt	ge
 8007452:	6821      	ldrge	r1, [r4, #0]
 8007454:	f021 0104 	bicge.w	r1, r1, #4
 8007458:	6021      	strge	r1, [r4, #0]
 800745a:	b90d      	cbnz	r5, 8007460 <_printf_i+0x118>
 800745c:	2e00      	cmp	r6, #0
 800745e:	d04d      	beq.n	80074fc <_printf_i+0x1b4>
 8007460:	4616      	mov	r6, r2
 8007462:	fbb5 f1f3 	udiv	r1, r5, r3
 8007466:	fb03 5711 	mls	r7, r3, r1, r5
 800746a:	5dc7      	ldrb	r7, [r0, r7]
 800746c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007470:	462f      	mov	r7, r5
 8007472:	42bb      	cmp	r3, r7
 8007474:	460d      	mov	r5, r1
 8007476:	d9f4      	bls.n	8007462 <_printf_i+0x11a>
 8007478:	2b08      	cmp	r3, #8
 800747a:	d10b      	bne.n	8007494 <_printf_i+0x14c>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	07df      	lsls	r7, r3, #31
 8007480:	d508      	bpl.n	8007494 <_printf_i+0x14c>
 8007482:	6923      	ldr	r3, [r4, #16]
 8007484:	6861      	ldr	r1, [r4, #4]
 8007486:	4299      	cmp	r1, r3
 8007488:	bfde      	ittt	le
 800748a:	2330      	movle	r3, #48	; 0x30
 800748c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007490:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007494:	1b92      	subs	r2, r2, r6
 8007496:	6122      	str	r2, [r4, #16]
 8007498:	f8cd a000 	str.w	sl, [sp]
 800749c:	464b      	mov	r3, r9
 800749e:	aa03      	add	r2, sp, #12
 80074a0:	4621      	mov	r1, r4
 80074a2:	4640      	mov	r0, r8
 80074a4:	f7ff fee2 	bl	800726c <_printf_common>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d14c      	bne.n	8007546 <_printf_i+0x1fe>
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295
 80074b0:	b004      	add	sp, #16
 80074b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b6:	4835      	ldr	r0, [pc, #212]	; (800758c <_printf_i+0x244>)
 80074b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	680e      	ldr	r6, [r1, #0]
 80074c0:	061f      	lsls	r7, r3, #24
 80074c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80074c6:	600e      	str	r6, [r1, #0]
 80074c8:	d514      	bpl.n	80074f4 <_printf_i+0x1ac>
 80074ca:	07d9      	lsls	r1, r3, #31
 80074cc:	bf44      	itt	mi
 80074ce:	f043 0320 	orrmi.w	r3, r3, #32
 80074d2:	6023      	strmi	r3, [r4, #0]
 80074d4:	b91d      	cbnz	r5, 80074de <_printf_i+0x196>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	f023 0320 	bic.w	r3, r3, #32
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	2310      	movs	r3, #16
 80074e0:	e7b0      	b.n	8007444 <_printf_i+0xfc>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	f043 0320 	orr.w	r3, r3, #32
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	2378      	movs	r3, #120	; 0x78
 80074ec:	4828      	ldr	r0, [pc, #160]	; (8007590 <_printf_i+0x248>)
 80074ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074f2:	e7e3      	b.n	80074bc <_printf_i+0x174>
 80074f4:	065e      	lsls	r6, r3, #25
 80074f6:	bf48      	it	mi
 80074f8:	b2ad      	uxthmi	r5, r5
 80074fa:	e7e6      	b.n	80074ca <_printf_i+0x182>
 80074fc:	4616      	mov	r6, r2
 80074fe:	e7bb      	b.n	8007478 <_printf_i+0x130>
 8007500:	680b      	ldr	r3, [r1, #0]
 8007502:	6826      	ldr	r6, [r4, #0]
 8007504:	6960      	ldr	r0, [r4, #20]
 8007506:	1d1d      	adds	r5, r3, #4
 8007508:	600d      	str	r5, [r1, #0]
 800750a:	0635      	lsls	r5, r6, #24
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	d501      	bpl.n	8007514 <_printf_i+0x1cc>
 8007510:	6018      	str	r0, [r3, #0]
 8007512:	e002      	b.n	800751a <_printf_i+0x1d2>
 8007514:	0671      	lsls	r1, r6, #25
 8007516:	d5fb      	bpl.n	8007510 <_printf_i+0x1c8>
 8007518:	8018      	strh	r0, [r3, #0]
 800751a:	2300      	movs	r3, #0
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	4616      	mov	r6, r2
 8007520:	e7ba      	b.n	8007498 <_printf_i+0x150>
 8007522:	680b      	ldr	r3, [r1, #0]
 8007524:	1d1a      	adds	r2, r3, #4
 8007526:	600a      	str	r2, [r1, #0]
 8007528:	681e      	ldr	r6, [r3, #0]
 800752a:	6862      	ldr	r2, [r4, #4]
 800752c:	2100      	movs	r1, #0
 800752e:	4630      	mov	r0, r6
 8007530:	f7f8 fe56 	bl	80001e0 <memchr>
 8007534:	b108      	cbz	r0, 800753a <_printf_i+0x1f2>
 8007536:	1b80      	subs	r0, r0, r6
 8007538:	6060      	str	r0, [r4, #4]
 800753a:	6863      	ldr	r3, [r4, #4]
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	2300      	movs	r3, #0
 8007540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007544:	e7a8      	b.n	8007498 <_printf_i+0x150>
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	4632      	mov	r2, r6
 800754a:	4649      	mov	r1, r9
 800754c:	4640      	mov	r0, r8
 800754e:	47d0      	blx	sl
 8007550:	3001      	adds	r0, #1
 8007552:	d0ab      	beq.n	80074ac <_printf_i+0x164>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	079b      	lsls	r3, r3, #30
 8007558:	d413      	bmi.n	8007582 <_printf_i+0x23a>
 800755a:	68e0      	ldr	r0, [r4, #12]
 800755c:	9b03      	ldr	r3, [sp, #12]
 800755e:	4298      	cmp	r0, r3
 8007560:	bfb8      	it	lt
 8007562:	4618      	movlt	r0, r3
 8007564:	e7a4      	b.n	80074b0 <_printf_i+0x168>
 8007566:	2301      	movs	r3, #1
 8007568:	4632      	mov	r2, r6
 800756a:	4649      	mov	r1, r9
 800756c:	4640      	mov	r0, r8
 800756e:	47d0      	blx	sl
 8007570:	3001      	adds	r0, #1
 8007572:	d09b      	beq.n	80074ac <_printf_i+0x164>
 8007574:	3501      	adds	r5, #1
 8007576:	68e3      	ldr	r3, [r4, #12]
 8007578:	9903      	ldr	r1, [sp, #12]
 800757a:	1a5b      	subs	r3, r3, r1
 800757c:	42ab      	cmp	r3, r5
 800757e:	dcf2      	bgt.n	8007566 <_printf_i+0x21e>
 8007580:	e7eb      	b.n	800755a <_printf_i+0x212>
 8007582:	2500      	movs	r5, #0
 8007584:	f104 0619 	add.w	r6, r4, #25
 8007588:	e7f5      	b.n	8007576 <_printf_i+0x22e>
 800758a:	bf00      	nop
 800758c:	08009c1e 	.word	0x08009c1e
 8007590:	08009c2f 	.word	0x08009c2f

08007594 <_puts_r>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	460e      	mov	r6, r1
 8007598:	4605      	mov	r5, r0
 800759a:	b118      	cbz	r0, 80075a4 <_puts_r+0x10>
 800759c:	6983      	ldr	r3, [r0, #24]
 800759e:	b90b      	cbnz	r3, 80075a4 <_puts_r+0x10>
 80075a0:	f001 f988 	bl	80088b4 <__sinit>
 80075a4:	69ab      	ldr	r3, [r5, #24]
 80075a6:	68ac      	ldr	r4, [r5, #8]
 80075a8:	b913      	cbnz	r3, 80075b0 <_puts_r+0x1c>
 80075aa:	4628      	mov	r0, r5
 80075ac:	f001 f982 	bl	80088b4 <__sinit>
 80075b0:	4b2c      	ldr	r3, [pc, #176]	; (8007664 <_puts_r+0xd0>)
 80075b2:	429c      	cmp	r4, r3
 80075b4:	d120      	bne.n	80075f8 <_puts_r+0x64>
 80075b6:	686c      	ldr	r4, [r5, #4]
 80075b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075ba:	07db      	lsls	r3, r3, #31
 80075bc:	d405      	bmi.n	80075ca <_puts_r+0x36>
 80075be:	89a3      	ldrh	r3, [r4, #12]
 80075c0:	0598      	lsls	r0, r3, #22
 80075c2:	d402      	bmi.n	80075ca <_puts_r+0x36>
 80075c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075c6:	f001 fa18 	bl	80089fa <__retarget_lock_acquire_recursive>
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	0719      	lsls	r1, r3, #28
 80075ce:	d51d      	bpl.n	800760c <_puts_r+0x78>
 80075d0:	6923      	ldr	r3, [r4, #16]
 80075d2:	b1db      	cbz	r3, 800760c <_puts_r+0x78>
 80075d4:	3e01      	subs	r6, #1
 80075d6:	68a3      	ldr	r3, [r4, #8]
 80075d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075dc:	3b01      	subs	r3, #1
 80075de:	60a3      	str	r3, [r4, #8]
 80075e0:	bb39      	cbnz	r1, 8007632 <_puts_r+0x9e>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	da38      	bge.n	8007658 <_puts_r+0xc4>
 80075e6:	4622      	mov	r2, r4
 80075e8:	210a      	movs	r1, #10
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 f90e 	bl	800780c <__swbuf_r>
 80075f0:	3001      	adds	r0, #1
 80075f2:	d011      	beq.n	8007618 <_puts_r+0x84>
 80075f4:	250a      	movs	r5, #10
 80075f6:	e011      	b.n	800761c <_puts_r+0x88>
 80075f8:	4b1b      	ldr	r3, [pc, #108]	; (8007668 <_puts_r+0xd4>)
 80075fa:	429c      	cmp	r4, r3
 80075fc:	d101      	bne.n	8007602 <_puts_r+0x6e>
 80075fe:	68ac      	ldr	r4, [r5, #8]
 8007600:	e7da      	b.n	80075b8 <_puts_r+0x24>
 8007602:	4b1a      	ldr	r3, [pc, #104]	; (800766c <_puts_r+0xd8>)
 8007604:	429c      	cmp	r4, r3
 8007606:	bf08      	it	eq
 8007608:	68ec      	ldreq	r4, [r5, #12]
 800760a:	e7d5      	b.n	80075b8 <_puts_r+0x24>
 800760c:	4621      	mov	r1, r4
 800760e:	4628      	mov	r0, r5
 8007610:	f000 f94e 	bl	80078b0 <__swsetup_r>
 8007614:	2800      	cmp	r0, #0
 8007616:	d0dd      	beq.n	80075d4 <_puts_r+0x40>
 8007618:	f04f 35ff 	mov.w	r5, #4294967295
 800761c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800761e:	07da      	lsls	r2, r3, #31
 8007620:	d405      	bmi.n	800762e <_puts_r+0x9a>
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	059b      	lsls	r3, r3, #22
 8007626:	d402      	bmi.n	800762e <_puts_r+0x9a>
 8007628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800762a:	f001 f9e7 	bl	80089fc <__retarget_lock_release_recursive>
 800762e:	4628      	mov	r0, r5
 8007630:	bd70      	pop	{r4, r5, r6, pc}
 8007632:	2b00      	cmp	r3, #0
 8007634:	da04      	bge.n	8007640 <_puts_r+0xac>
 8007636:	69a2      	ldr	r2, [r4, #24]
 8007638:	429a      	cmp	r2, r3
 800763a:	dc06      	bgt.n	800764a <_puts_r+0xb6>
 800763c:	290a      	cmp	r1, #10
 800763e:	d004      	beq.n	800764a <_puts_r+0xb6>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	6022      	str	r2, [r4, #0]
 8007646:	7019      	strb	r1, [r3, #0]
 8007648:	e7c5      	b.n	80075d6 <_puts_r+0x42>
 800764a:	4622      	mov	r2, r4
 800764c:	4628      	mov	r0, r5
 800764e:	f000 f8dd 	bl	800780c <__swbuf_r>
 8007652:	3001      	adds	r0, #1
 8007654:	d1bf      	bne.n	80075d6 <_puts_r+0x42>
 8007656:	e7df      	b.n	8007618 <_puts_r+0x84>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	250a      	movs	r5, #10
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	6022      	str	r2, [r4, #0]
 8007660:	701d      	strb	r5, [r3, #0]
 8007662:	e7db      	b.n	800761c <_puts_r+0x88>
 8007664:	08009cf4 	.word	0x08009cf4
 8007668:	08009d14 	.word	0x08009d14
 800766c:	08009cd4 	.word	0x08009cd4

08007670 <puts>:
 8007670:	4b02      	ldr	r3, [pc, #8]	; (800767c <puts+0xc>)
 8007672:	4601      	mov	r1, r0
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	f7ff bf8d 	b.w	8007594 <_puts_r>
 800767a:	bf00      	nop
 800767c:	2000173c 	.word	0x2000173c

08007680 <setvbuf>:
 8007680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007684:	461d      	mov	r5, r3
 8007686:	4b5d      	ldr	r3, [pc, #372]	; (80077fc <setvbuf+0x17c>)
 8007688:	681f      	ldr	r7, [r3, #0]
 800768a:	4604      	mov	r4, r0
 800768c:	460e      	mov	r6, r1
 800768e:	4690      	mov	r8, r2
 8007690:	b127      	cbz	r7, 800769c <setvbuf+0x1c>
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	b913      	cbnz	r3, 800769c <setvbuf+0x1c>
 8007696:	4638      	mov	r0, r7
 8007698:	f001 f90c 	bl	80088b4 <__sinit>
 800769c:	4b58      	ldr	r3, [pc, #352]	; (8007800 <setvbuf+0x180>)
 800769e:	429c      	cmp	r4, r3
 80076a0:	d167      	bne.n	8007772 <setvbuf+0xf2>
 80076a2:	687c      	ldr	r4, [r7, #4]
 80076a4:	f1b8 0f02 	cmp.w	r8, #2
 80076a8:	d006      	beq.n	80076b8 <setvbuf+0x38>
 80076aa:	f1b8 0f01 	cmp.w	r8, #1
 80076ae:	f200 809f 	bhi.w	80077f0 <setvbuf+0x170>
 80076b2:	2d00      	cmp	r5, #0
 80076b4:	f2c0 809c 	blt.w	80077f0 <setvbuf+0x170>
 80076b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076ba:	07db      	lsls	r3, r3, #31
 80076bc:	d405      	bmi.n	80076ca <setvbuf+0x4a>
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	0598      	lsls	r0, r3, #22
 80076c2:	d402      	bmi.n	80076ca <setvbuf+0x4a>
 80076c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076c6:	f001 f998 	bl	80089fa <__retarget_lock_acquire_recursive>
 80076ca:	4621      	mov	r1, r4
 80076cc:	4638      	mov	r0, r7
 80076ce:	f001 f85d 	bl	800878c <_fflush_r>
 80076d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076d4:	b141      	cbz	r1, 80076e8 <setvbuf+0x68>
 80076d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076da:	4299      	cmp	r1, r3
 80076dc:	d002      	beq.n	80076e4 <setvbuf+0x64>
 80076de:	4638      	mov	r0, r7
 80076e0:	f001 fd88 	bl	80091f4 <_free_r>
 80076e4:	2300      	movs	r3, #0
 80076e6:	6363      	str	r3, [r4, #52]	; 0x34
 80076e8:	2300      	movs	r3, #0
 80076ea:	61a3      	str	r3, [r4, #24]
 80076ec:	6063      	str	r3, [r4, #4]
 80076ee:	89a3      	ldrh	r3, [r4, #12]
 80076f0:	0619      	lsls	r1, r3, #24
 80076f2:	d503      	bpl.n	80076fc <setvbuf+0x7c>
 80076f4:	6921      	ldr	r1, [r4, #16]
 80076f6:	4638      	mov	r0, r7
 80076f8:	f001 fd7c 	bl	80091f4 <_free_r>
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007702:	f023 0303 	bic.w	r3, r3, #3
 8007706:	f1b8 0f02 	cmp.w	r8, #2
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	d06c      	beq.n	80077e8 <setvbuf+0x168>
 800770e:	ab01      	add	r3, sp, #4
 8007710:	466a      	mov	r2, sp
 8007712:	4621      	mov	r1, r4
 8007714:	4638      	mov	r0, r7
 8007716:	f001 f972 	bl	80089fe <__swhatbuf_r>
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	4318      	orrs	r0, r3
 800771e:	81a0      	strh	r0, [r4, #12]
 8007720:	2d00      	cmp	r5, #0
 8007722:	d130      	bne.n	8007786 <setvbuf+0x106>
 8007724:	9d00      	ldr	r5, [sp, #0]
 8007726:	4628      	mov	r0, r5
 8007728:	f001 f9ce 	bl	8008ac8 <malloc>
 800772c:	4606      	mov	r6, r0
 800772e:	2800      	cmp	r0, #0
 8007730:	d155      	bne.n	80077de <setvbuf+0x15e>
 8007732:	f8dd 9000 	ldr.w	r9, [sp]
 8007736:	45a9      	cmp	r9, r5
 8007738:	d14a      	bne.n	80077d0 <setvbuf+0x150>
 800773a:	f04f 35ff 	mov.w	r5, #4294967295
 800773e:	2200      	movs	r2, #0
 8007740:	60a2      	str	r2, [r4, #8]
 8007742:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007746:	6022      	str	r2, [r4, #0]
 8007748:	6122      	str	r2, [r4, #16]
 800774a:	2201      	movs	r2, #1
 800774c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007750:	6162      	str	r2, [r4, #20]
 8007752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007754:	f043 0302 	orr.w	r3, r3, #2
 8007758:	07d2      	lsls	r2, r2, #31
 800775a:	81a3      	strh	r3, [r4, #12]
 800775c:	d405      	bmi.n	800776a <setvbuf+0xea>
 800775e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007762:	d102      	bne.n	800776a <setvbuf+0xea>
 8007764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007766:	f001 f949 	bl	80089fc <__retarget_lock_release_recursive>
 800776a:	4628      	mov	r0, r5
 800776c:	b003      	add	sp, #12
 800776e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007772:	4b24      	ldr	r3, [pc, #144]	; (8007804 <setvbuf+0x184>)
 8007774:	429c      	cmp	r4, r3
 8007776:	d101      	bne.n	800777c <setvbuf+0xfc>
 8007778:	68bc      	ldr	r4, [r7, #8]
 800777a:	e793      	b.n	80076a4 <setvbuf+0x24>
 800777c:	4b22      	ldr	r3, [pc, #136]	; (8007808 <setvbuf+0x188>)
 800777e:	429c      	cmp	r4, r3
 8007780:	bf08      	it	eq
 8007782:	68fc      	ldreq	r4, [r7, #12]
 8007784:	e78e      	b.n	80076a4 <setvbuf+0x24>
 8007786:	2e00      	cmp	r6, #0
 8007788:	d0cd      	beq.n	8007726 <setvbuf+0xa6>
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	b913      	cbnz	r3, 8007794 <setvbuf+0x114>
 800778e:	4638      	mov	r0, r7
 8007790:	f001 f890 	bl	80088b4 <__sinit>
 8007794:	f1b8 0f01 	cmp.w	r8, #1
 8007798:	bf08      	it	eq
 800779a:	89a3      	ldrheq	r3, [r4, #12]
 800779c:	6026      	str	r6, [r4, #0]
 800779e:	bf04      	itt	eq
 80077a0:	f043 0301 	orreq.w	r3, r3, #1
 80077a4:	81a3      	strheq	r3, [r4, #12]
 80077a6:	89a2      	ldrh	r2, [r4, #12]
 80077a8:	f012 0308 	ands.w	r3, r2, #8
 80077ac:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80077b0:	d01c      	beq.n	80077ec <setvbuf+0x16c>
 80077b2:	07d3      	lsls	r3, r2, #31
 80077b4:	bf41      	itttt	mi
 80077b6:	2300      	movmi	r3, #0
 80077b8:	426d      	negmi	r5, r5
 80077ba:	60a3      	strmi	r3, [r4, #8]
 80077bc:	61a5      	strmi	r5, [r4, #24]
 80077be:	bf58      	it	pl
 80077c0:	60a5      	strpl	r5, [r4, #8]
 80077c2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80077c4:	f015 0501 	ands.w	r5, r5, #1
 80077c8:	d115      	bne.n	80077f6 <setvbuf+0x176>
 80077ca:	f412 7f00 	tst.w	r2, #512	; 0x200
 80077ce:	e7c8      	b.n	8007762 <setvbuf+0xe2>
 80077d0:	4648      	mov	r0, r9
 80077d2:	f001 f979 	bl	8008ac8 <malloc>
 80077d6:	4606      	mov	r6, r0
 80077d8:	2800      	cmp	r0, #0
 80077da:	d0ae      	beq.n	800773a <setvbuf+0xba>
 80077dc:	464d      	mov	r5, r9
 80077de:	89a3      	ldrh	r3, [r4, #12]
 80077e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e4:	81a3      	strh	r3, [r4, #12]
 80077e6:	e7d0      	b.n	800778a <setvbuf+0x10a>
 80077e8:	2500      	movs	r5, #0
 80077ea:	e7a8      	b.n	800773e <setvbuf+0xbe>
 80077ec:	60a3      	str	r3, [r4, #8]
 80077ee:	e7e8      	b.n	80077c2 <setvbuf+0x142>
 80077f0:	f04f 35ff 	mov.w	r5, #4294967295
 80077f4:	e7b9      	b.n	800776a <setvbuf+0xea>
 80077f6:	2500      	movs	r5, #0
 80077f8:	e7b7      	b.n	800776a <setvbuf+0xea>
 80077fa:	bf00      	nop
 80077fc:	2000173c 	.word	0x2000173c
 8007800:	08009cf4 	.word	0x08009cf4
 8007804:	08009d14 	.word	0x08009d14
 8007808:	08009cd4 	.word	0x08009cd4

0800780c <__swbuf_r>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	460e      	mov	r6, r1
 8007810:	4614      	mov	r4, r2
 8007812:	4605      	mov	r5, r0
 8007814:	b118      	cbz	r0, 800781e <__swbuf_r+0x12>
 8007816:	6983      	ldr	r3, [r0, #24]
 8007818:	b90b      	cbnz	r3, 800781e <__swbuf_r+0x12>
 800781a:	f001 f84b 	bl	80088b4 <__sinit>
 800781e:	4b21      	ldr	r3, [pc, #132]	; (80078a4 <__swbuf_r+0x98>)
 8007820:	429c      	cmp	r4, r3
 8007822:	d12b      	bne.n	800787c <__swbuf_r+0x70>
 8007824:	686c      	ldr	r4, [r5, #4]
 8007826:	69a3      	ldr	r3, [r4, #24]
 8007828:	60a3      	str	r3, [r4, #8]
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	071a      	lsls	r2, r3, #28
 800782e:	d52f      	bpl.n	8007890 <__swbuf_r+0x84>
 8007830:	6923      	ldr	r3, [r4, #16]
 8007832:	b36b      	cbz	r3, 8007890 <__swbuf_r+0x84>
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	6820      	ldr	r0, [r4, #0]
 8007838:	1ac0      	subs	r0, r0, r3
 800783a:	6963      	ldr	r3, [r4, #20]
 800783c:	b2f6      	uxtb	r6, r6
 800783e:	4283      	cmp	r3, r0
 8007840:	4637      	mov	r7, r6
 8007842:	dc04      	bgt.n	800784e <__swbuf_r+0x42>
 8007844:	4621      	mov	r1, r4
 8007846:	4628      	mov	r0, r5
 8007848:	f000 ffa0 	bl	800878c <_fflush_r>
 800784c:	bb30      	cbnz	r0, 800789c <__swbuf_r+0x90>
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	3b01      	subs	r3, #1
 8007852:	60a3      	str	r3, [r4, #8]
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	6022      	str	r2, [r4, #0]
 800785a:	701e      	strb	r6, [r3, #0]
 800785c:	6963      	ldr	r3, [r4, #20]
 800785e:	3001      	adds	r0, #1
 8007860:	4283      	cmp	r3, r0
 8007862:	d004      	beq.n	800786e <__swbuf_r+0x62>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	07db      	lsls	r3, r3, #31
 8007868:	d506      	bpl.n	8007878 <__swbuf_r+0x6c>
 800786a:	2e0a      	cmp	r6, #10
 800786c:	d104      	bne.n	8007878 <__swbuf_r+0x6c>
 800786e:	4621      	mov	r1, r4
 8007870:	4628      	mov	r0, r5
 8007872:	f000 ff8b 	bl	800878c <_fflush_r>
 8007876:	b988      	cbnz	r0, 800789c <__swbuf_r+0x90>
 8007878:	4638      	mov	r0, r7
 800787a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <__swbuf_r+0x9c>)
 800787e:	429c      	cmp	r4, r3
 8007880:	d101      	bne.n	8007886 <__swbuf_r+0x7a>
 8007882:	68ac      	ldr	r4, [r5, #8]
 8007884:	e7cf      	b.n	8007826 <__swbuf_r+0x1a>
 8007886:	4b09      	ldr	r3, [pc, #36]	; (80078ac <__swbuf_r+0xa0>)
 8007888:	429c      	cmp	r4, r3
 800788a:	bf08      	it	eq
 800788c:	68ec      	ldreq	r4, [r5, #12]
 800788e:	e7ca      	b.n	8007826 <__swbuf_r+0x1a>
 8007890:	4621      	mov	r1, r4
 8007892:	4628      	mov	r0, r5
 8007894:	f000 f80c 	bl	80078b0 <__swsetup_r>
 8007898:	2800      	cmp	r0, #0
 800789a:	d0cb      	beq.n	8007834 <__swbuf_r+0x28>
 800789c:	f04f 37ff 	mov.w	r7, #4294967295
 80078a0:	e7ea      	b.n	8007878 <__swbuf_r+0x6c>
 80078a2:	bf00      	nop
 80078a4:	08009cf4 	.word	0x08009cf4
 80078a8:	08009d14 	.word	0x08009d14
 80078ac:	08009cd4 	.word	0x08009cd4

080078b0 <__swsetup_r>:
 80078b0:	4b32      	ldr	r3, [pc, #200]	; (800797c <__swsetup_r+0xcc>)
 80078b2:	b570      	push	{r4, r5, r6, lr}
 80078b4:	681d      	ldr	r5, [r3, #0]
 80078b6:	4606      	mov	r6, r0
 80078b8:	460c      	mov	r4, r1
 80078ba:	b125      	cbz	r5, 80078c6 <__swsetup_r+0x16>
 80078bc:	69ab      	ldr	r3, [r5, #24]
 80078be:	b913      	cbnz	r3, 80078c6 <__swsetup_r+0x16>
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 fff7 	bl	80088b4 <__sinit>
 80078c6:	4b2e      	ldr	r3, [pc, #184]	; (8007980 <__swsetup_r+0xd0>)
 80078c8:	429c      	cmp	r4, r3
 80078ca:	d10f      	bne.n	80078ec <__swsetup_r+0x3c>
 80078cc:	686c      	ldr	r4, [r5, #4]
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078d4:	0719      	lsls	r1, r3, #28
 80078d6:	d42c      	bmi.n	8007932 <__swsetup_r+0x82>
 80078d8:	06dd      	lsls	r5, r3, #27
 80078da:	d411      	bmi.n	8007900 <__swsetup_r+0x50>
 80078dc:	2309      	movs	r3, #9
 80078de:	6033      	str	r3, [r6, #0]
 80078e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ea:	e03e      	b.n	800796a <__swsetup_r+0xba>
 80078ec:	4b25      	ldr	r3, [pc, #148]	; (8007984 <__swsetup_r+0xd4>)
 80078ee:	429c      	cmp	r4, r3
 80078f0:	d101      	bne.n	80078f6 <__swsetup_r+0x46>
 80078f2:	68ac      	ldr	r4, [r5, #8]
 80078f4:	e7eb      	b.n	80078ce <__swsetup_r+0x1e>
 80078f6:	4b24      	ldr	r3, [pc, #144]	; (8007988 <__swsetup_r+0xd8>)
 80078f8:	429c      	cmp	r4, r3
 80078fa:	bf08      	it	eq
 80078fc:	68ec      	ldreq	r4, [r5, #12]
 80078fe:	e7e6      	b.n	80078ce <__swsetup_r+0x1e>
 8007900:	0758      	lsls	r0, r3, #29
 8007902:	d512      	bpl.n	800792a <__swsetup_r+0x7a>
 8007904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007906:	b141      	cbz	r1, 800791a <__swsetup_r+0x6a>
 8007908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800790c:	4299      	cmp	r1, r3
 800790e:	d002      	beq.n	8007916 <__swsetup_r+0x66>
 8007910:	4630      	mov	r0, r6
 8007912:	f001 fc6f 	bl	80091f4 <_free_r>
 8007916:	2300      	movs	r3, #0
 8007918:	6363      	str	r3, [r4, #52]	; 0x34
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	2300      	movs	r3, #0
 8007924:	6063      	str	r3, [r4, #4]
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	f043 0308 	orr.w	r3, r3, #8
 8007930:	81a3      	strh	r3, [r4, #12]
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	b94b      	cbnz	r3, 800794a <__swsetup_r+0x9a>
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800793c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007940:	d003      	beq.n	800794a <__swsetup_r+0x9a>
 8007942:	4621      	mov	r1, r4
 8007944:	4630      	mov	r0, r6
 8007946:	f001 f87f 	bl	8008a48 <__smakebuf_r>
 800794a:	89a0      	ldrh	r0, [r4, #12]
 800794c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007950:	f010 0301 	ands.w	r3, r0, #1
 8007954:	d00a      	beq.n	800796c <__swsetup_r+0xbc>
 8007956:	2300      	movs	r3, #0
 8007958:	60a3      	str	r3, [r4, #8]
 800795a:	6963      	ldr	r3, [r4, #20]
 800795c:	425b      	negs	r3, r3
 800795e:	61a3      	str	r3, [r4, #24]
 8007960:	6923      	ldr	r3, [r4, #16]
 8007962:	b943      	cbnz	r3, 8007976 <__swsetup_r+0xc6>
 8007964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007968:	d1ba      	bne.n	80078e0 <__swsetup_r+0x30>
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	0781      	lsls	r1, r0, #30
 800796e:	bf58      	it	pl
 8007970:	6963      	ldrpl	r3, [r4, #20]
 8007972:	60a3      	str	r3, [r4, #8]
 8007974:	e7f4      	b.n	8007960 <__swsetup_r+0xb0>
 8007976:	2000      	movs	r0, #0
 8007978:	e7f7      	b.n	800796a <__swsetup_r+0xba>
 800797a:	bf00      	nop
 800797c:	2000173c 	.word	0x2000173c
 8007980:	08009cf4 	.word	0x08009cf4
 8007984:	08009d14 	.word	0x08009d14
 8007988:	08009cd4 	.word	0x08009cd4

0800798c <quorem>:
 800798c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	6903      	ldr	r3, [r0, #16]
 8007992:	690c      	ldr	r4, [r1, #16]
 8007994:	42a3      	cmp	r3, r4
 8007996:	4607      	mov	r7, r0
 8007998:	f2c0 8081 	blt.w	8007a9e <quorem+0x112>
 800799c:	3c01      	subs	r4, #1
 800799e:	f101 0814 	add.w	r8, r1, #20
 80079a2:	f100 0514 	add.w	r5, r0, #20
 80079a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079b4:	3301      	adds	r3, #1
 80079b6:	429a      	cmp	r2, r3
 80079b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80079c4:	d331      	bcc.n	8007a2a <quorem+0x9e>
 80079c6:	f04f 0e00 	mov.w	lr, #0
 80079ca:	4640      	mov	r0, r8
 80079cc:	46ac      	mov	ip, r5
 80079ce:	46f2      	mov	sl, lr
 80079d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80079d4:	b293      	uxth	r3, r2
 80079d6:	fb06 e303 	mla	r3, r6, r3, lr
 80079da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079de:	b29b      	uxth	r3, r3
 80079e0:	ebaa 0303 	sub.w	r3, sl, r3
 80079e4:	0c12      	lsrs	r2, r2, #16
 80079e6:	f8dc a000 	ldr.w	sl, [ip]
 80079ea:	fb06 e202 	mla	r2, r6, r2, lr
 80079ee:	fa13 f38a 	uxtah	r3, r3, sl
 80079f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079f6:	fa1f fa82 	uxth.w	sl, r2
 80079fa:	f8dc 2000 	ldr.w	r2, [ip]
 80079fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007a02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a0c:	4581      	cmp	r9, r0
 8007a0e:	f84c 3b04 	str.w	r3, [ip], #4
 8007a12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a16:	d2db      	bcs.n	80079d0 <quorem+0x44>
 8007a18:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a1c:	b92b      	cbnz	r3, 8007a2a <quorem+0x9e>
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	3b04      	subs	r3, #4
 8007a22:	429d      	cmp	r5, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	d32e      	bcc.n	8007a86 <quorem+0xfa>
 8007a28:	613c      	str	r4, [r7, #16]
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	f001 fad2 	bl	8008fd4 <__mcmp>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	db24      	blt.n	8007a7e <quorem+0xf2>
 8007a34:	3601      	adds	r6, #1
 8007a36:	4628      	mov	r0, r5
 8007a38:	f04f 0c00 	mov.w	ip, #0
 8007a3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a40:	f8d0 e000 	ldr.w	lr, [r0]
 8007a44:	b293      	uxth	r3, r2
 8007a46:	ebac 0303 	sub.w	r3, ip, r3
 8007a4a:	0c12      	lsrs	r2, r2, #16
 8007a4c:	fa13 f38e 	uxtah	r3, r3, lr
 8007a50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a5e:	45c1      	cmp	r9, r8
 8007a60:	f840 3b04 	str.w	r3, [r0], #4
 8007a64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a68:	d2e8      	bcs.n	8007a3c <quorem+0xb0>
 8007a6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a72:	b922      	cbnz	r2, 8007a7e <quorem+0xf2>
 8007a74:	3b04      	subs	r3, #4
 8007a76:	429d      	cmp	r5, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	d30a      	bcc.n	8007a92 <quorem+0x106>
 8007a7c:	613c      	str	r4, [r7, #16]
 8007a7e:	4630      	mov	r0, r6
 8007a80:	b003      	add	sp, #12
 8007a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a86:	6812      	ldr	r2, [r2, #0]
 8007a88:	3b04      	subs	r3, #4
 8007a8a:	2a00      	cmp	r2, #0
 8007a8c:	d1cc      	bne.n	8007a28 <quorem+0x9c>
 8007a8e:	3c01      	subs	r4, #1
 8007a90:	e7c7      	b.n	8007a22 <quorem+0x96>
 8007a92:	6812      	ldr	r2, [r2, #0]
 8007a94:	3b04      	subs	r3, #4
 8007a96:	2a00      	cmp	r2, #0
 8007a98:	d1f0      	bne.n	8007a7c <quorem+0xf0>
 8007a9a:	3c01      	subs	r4, #1
 8007a9c:	e7eb      	b.n	8007a76 <quorem+0xea>
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	e7ee      	b.n	8007a80 <quorem+0xf4>
 8007aa2:	0000      	movs	r0, r0
 8007aa4:	0000      	movs	r0, r0
	...

08007aa8 <_dtoa_r>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	ed2d 8b02 	vpush	{d8}
 8007ab0:	ec57 6b10 	vmov	r6, r7, d0
 8007ab4:	b095      	sub	sp, #84	; 0x54
 8007ab6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ab8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007abc:	9105      	str	r1, [sp, #20]
 8007abe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ac8:	b975      	cbnz	r5, 8007ae8 <_dtoa_r+0x40>
 8007aca:	2010      	movs	r0, #16
 8007acc:	f000 fffc 	bl	8008ac8 <malloc>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ad4:	b920      	cbnz	r0, 8007ae0 <_dtoa_r+0x38>
 8007ad6:	4bb2      	ldr	r3, [pc, #712]	; (8007da0 <_dtoa_r+0x2f8>)
 8007ad8:	21ea      	movs	r1, #234	; 0xea
 8007ada:	48b2      	ldr	r0, [pc, #712]	; (8007da4 <_dtoa_r+0x2fc>)
 8007adc:	f001 fc9a 	bl	8009414 <__assert_func>
 8007ae0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ae4:	6005      	str	r5, [r0, #0]
 8007ae6:	60c5      	str	r5, [r0, #12]
 8007ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aea:	6819      	ldr	r1, [r3, #0]
 8007aec:	b151      	cbz	r1, 8007b04 <_dtoa_r+0x5c>
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	604a      	str	r2, [r1, #4]
 8007af2:	2301      	movs	r3, #1
 8007af4:	4093      	lsls	r3, r2
 8007af6:	608b      	str	r3, [r1, #8]
 8007af8:	4620      	mov	r0, r4
 8007afa:	f001 f82d 	bl	8008b58 <_Bfree>
 8007afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	1e3b      	subs	r3, r7, #0
 8007b06:	bfb9      	ittee	lt
 8007b08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b0c:	9303      	strlt	r3, [sp, #12]
 8007b0e:	2300      	movge	r3, #0
 8007b10:	f8c8 3000 	strge.w	r3, [r8]
 8007b14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007b18:	4ba3      	ldr	r3, [pc, #652]	; (8007da8 <_dtoa_r+0x300>)
 8007b1a:	bfbc      	itt	lt
 8007b1c:	2201      	movlt	r2, #1
 8007b1e:	f8c8 2000 	strlt.w	r2, [r8]
 8007b22:	ea33 0309 	bics.w	r3, r3, r9
 8007b26:	d11b      	bne.n	8007b60 <_dtoa_r+0xb8>
 8007b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b34:	4333      	orrs	r3, r6
 8007b36:	f000 857a 	beq.w	800862e <_dtoa_r+0xb86>
 8007b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b3c:	b963      	cbnz	r3, 8007b58 <_dtoa_r+0xb0>
 8007b3e:	4b9b      	ldr	r3, [pc, #620]	; (8007dac <_dtoa_r+0x304>)
 8007b40:	e024      	b.n	8007b8c <_dtoa_r+0xe4>
 8007b42:	4b9b      	ldr	r3, [pc, #620]	; (8007db0 <_dtoa_r+0x308>)
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	3308      	adds	r3, #8
 8007b48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	9800      	ldr	r0, [sp, #0]
 8007b4e:	b015      	add	sp, #84	; 0x54
 8007b50:	ecbd 8b02 	vpop	{d8}
 8007b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b58:	4b94      	ldr	r3, [pc, #592]	; (8007dac <_dtoa_r+0x304>)
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	3303      	adds	r3, #3
 8007b5e:	e7f3      	b.n	8007b48 <_dtoa_r+0xa0>
 8007b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b64:	2200      	movs	r2, #0
 8007b66:	ec51 0b17 	vmov	r0, r1, d7
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007b70:	f7f8 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b74:	4680      	mov	r8, r0
 8007b76:	b158      	cbz	r0, 8007b90 <_dtoa_r+0xe8>
 8007b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 8551 	beq.w	8008628 <_dtoa_r+0xb80>
 8007b86:	488b      	ldr	r0, [pc, #556]	; (8007db4 <_dtoa_r+0x30c>)
 8007b88:	6018      	str	r0, [r3, #0]
 8007b8a:	1e43      	subs	r3, r0, #1
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	e7dd      	b.n	8007b4c <_dtoa_r+0xa4>
 8007b90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007b94:	aa12      	add	r2, sp, #72	; 0x48
 8007b96:	a913      	add	r1, sp, #76	; 0x4c
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f001 fabf 	bl	800911c <__d2b>
 8007b9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ba2:	4683      	mov	fp, r0
 8007ba4:	2d00      	cmp	r5, #0
 8007ba6:	d07c      	beq.n	8007ca2 <_dtoa_r+0x1fa>
 8007ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007baa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007bb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007bba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007bbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bc2:	4b7d      	ldr	r3, [pc, #500]	; (8007db8 <_dtoa_r+0x310>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	4639      	mov	r1, r7
 8007bca:	f7f8 fb5d 	bl	8000288 <__aeabi_dsub>
 8007bce:	a36e      	add	r3, pc, #440	; (adr r3, 8007d88 <_dtoa_r+0x2e0>)
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f7f8 fd10 	bl	80005f8 <__aeabi_dmul>
 8007bd8:	a36d      	add	r3, pc, #436	; (adr r3, 8007d90 <_dtoa_r+0x2e8>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fb55 	bl	800028c <__adddf3>
 8007be2:	4606      	mov	r6, r0
 8007be4:	4628      	mov	r0, r5
 8007be6:	460f      	mov	r7, r1
 8007be8:	f7f8 fc9c 	bl	8000524 <__aeabi_i2d>
 8007bec:	a36a      	add	r3, pc, #424	; (adr r3, 8007d98 <_dtoa_r+0x2f0>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 fd01 	bl	80005f8 <__aeabi_dmul>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	f7f8 fb45 	bl	800028c <__adddf3>
 8007c02:	4606      	mov	r6, r0
 8007c04:	460f      	mov	r7, r1
 8007c06:	f7f8 ffa7 	bl	8000b58 <__aeabi_d2iz>
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4682      	mov	sl, r0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 ff62 	bl	8000adc <__aeabi_dcmplt>
 8007c18:	b148      	cbz	r0, 8007c2e <_dtoa_r+0x186>
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	f7f8 fc82 	bl	8000524 <__aeabi_i2d>
 8007c20:	4632      	mov	r2, r6
 8007c22:	463b      	mov	r3, r7
 8007c24:	f7f8 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c28:	b908      	cbnz	r0, 8007c2e <_dtoa_r+0x186>
 8007c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c2e:	f1ba 0f16 	cmp.w	sl, #22
 8007c32:	d854      	bhi.n	8007cde <_dtoa_r+0x236>
 8007c34:	4b61      	ldr	r3, [pc, #388]	; (8007dbc <_dtoa_r+0x314>)
 8007c36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c42:	f7f8 ff4b 	bl	8000adc <__aeabi_dcmplt>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d04b      	beq.n	8007ce2 <_dtoa_r+0x23a>
 8007c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c4e:	2300      	movs	r3, #0
 8007c50:	930e      	str	r3, [sp, #56]	; 0x38
 8007c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c54:	1b5d      	subs	r5, r3, r5
 8007c56:	1e6b      	subs	r3, r5, #1
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	bf43      	ittte	mi
 8007c5c:	2300      	movmi	r3, #0
 8007c5e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007c62:	9304      	strmi	r3, [sp, #16]
 8007c64:	f04f 0800 	movpl.w	r8, #0
 8007c68:	f1ba 0f00 	cmp.w	sl, #0
 8007c6c:	db3b      	blt.n	8007ce6 <_dtoa_r+0x23e>
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007c74:	4453      	add	r3, sl
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9306      	str	r3, [sp, #24]
 8007c7c:	9b05      	ldr	r3, [sp, #20]
 8007c7e:	2b09      	cmp	r3, #9
 8007c80:	d869      	bhi.n	8007d56 <_dtoa_r+0x2ae>
 8007c82:	2b05      	cmp	r3, #5
 8007c84:	bfc4      	itt	gt
 8007c86:	3b04      	subgt	r3, #4
 8007c88:	9305      	strgt	r3, [sp, #20]
 8007c8a:	9b05      	ldr	r3, [sp, #20]
 8007c8c:	f1a3 0302 	sub.w	r3, r3, #2
 8007c90:	bfcc      	ite	gt
 8007c92:	2500      	movgt	r5, #0
 8007c94:	2501      	movle	r5, #1
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d869      	bhi.n	8007d6e <_dtoa_r+0x2c6>
 8007c9a:	e8df f003 	tbb	[pc, r3]
 8007c9e:	4e2c      	.short	0x4e2c
 8007ca0:	5a4c      	.short	0x5a4c
 8007ca2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007ca6:	441d      	add	r5, r3
 8007ca8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	bfc1      	itttt	gt
 8007cb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007cb8:	fa09 f303 	lslgt.w	r3, r9, r3
 8007cbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cc0:	bfda      	itte	le
 8007cc2:	f1c3 0320 	rsble	r3, r3, #32
 8007cc6:	fa06 f003 	lslle.w	r0, r6, r3
 8007cca:	4318      	orrgt	r0, r3
 8007ccc:	f7f8 fc1a 	bl	8000504 <__aeabi_ui2d>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007cd8:	3d01      	subs	r5, #1
 8007cda:	9310      	str	r3, [sp, #64]	; 0x40
 8007cdc:	e771      	b.n	8007bc2 <_dtoa_r+0x11a>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e7b6      	b.n	8007c50 <_dtoa_r+0x1a8>
 8007ce2:	900e      	str	r0, [sp, #56]	; 0x38
 8007ce4:	e7b5      	b.n	8007c52 <_dtoa_r+0x1aa>
 8007ce6:	f1ca 0300 	rsb	r3, sl, #0
 8007cea:	9306      	str	r3, [sp, #24]
 8007cec:	2300      	movs	r3, #0
 8007cee:	eba8 080a 	sub.w	r8, r8, sl
 8007cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8007cf4:	e7c2      	b.n	8007c7c <_dtoa_r+0x1d4>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9308      	str	r3, [sp, #32]
 8007cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	dc39      	bgt.n	8007d74 <_dtoa_r+0x2cc>
 8007d00:	f04f 0901 	mov.w	r9, #1
 8007d04:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d08:	464b      	mov	r3, r9
 8007d0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007d0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d10:	2200      	movs	r2, #0
 8007d12:	6042      	str	r2, [r0, #4]
 8007d14:	2204      	movs	r2, #4
 8007d16:	f102 0614 	add.w	r6, r2, #20
 8007d1a:	429e      	cmp	r6, r3
 8007d1c:	6841      	ldr	r1, [r0, #4]
 8007d1e:	d92f      	bls.n	8007d80 <_dtoa_r+0x2d8>
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fed9 	bl	8008ad8 <_Balloc>
 8007d26:	9000      	str	r0, [sp, #0]
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d14b      	bne.n	8007dc4 <_dtoa_r+0x31c>
 8007d2c:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <_dtoa_r+0x318>)
 8007d2e:	4602      	mov	r2, r0
 8007d30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d34:	e6d1      	b.n	8007ada <_dtoa_r+0x32>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e7de      	b.n	8007cf8 <_dtoa_r+0x250>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9308      	str	r3, [sp, #32]
 8007d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d40:	eb0a 0903 	add.w	r9, sl, r3
 8007d44:	f109 0301 	add.w	r3, r9, #1
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	9301      	str	r3, [sp, #4]
 8007d4c:	bfb8      	it	lt
 8007d4e:	2301      	movlt	r3, #1
 8007d50:	e7dd      	b.n	8007d0e <_dtoa_r+0x266>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e7f2      	b.n	8007d3c <_dtoa_r+0x294>
 8007d56:	2501      	movs	r5, #1
 8007d58:	2300      	movs	r3, #0
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	9508      	str	r5, [sp, #32]
 8007d5e:	f04f 39ff 	mov.w	r9, #4294967295
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d68:	2312      	movs	r3, #18
 8007d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d6c:	e7cf      	b.n	8007d0e <_dtoa_r+0x266>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	9308      	str	r3, [sp, #32]
 8007d72:	e7f4      	b.n	8007d5e <_dtoa_r+0x2b6>
 8007d74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007d78:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d7c:	464b      	mov	r3, r9
 8007d7e:	e7c6      	b.n	8007d0e <_dtoa_r+0x266>
 8007d80:	3101      	adds	r1, #1
 8007d82:	6041      	str	r1, [r0, #4]
 8007d84:	0052      	lsls	r2, r2, #1
 8007d86:	e7c6      	b.n	8007d16 <_dtoa_r+0x26e>
 8007d88:	636f4361 	.word	0x636f4361
 8007d8c:	3fd287a7 	.word	0x3fd287a7
 8007d90:	8b60c8b3 	.word	0x8b60c8b3
 8007d94:	3fc68a28 	.word	0x3fc68a28
 8007d98:	509f79fb 	.word	0x509f79fb
 8007d9c:	3fd34413 	.word	0x3fd34413
 8007da0:	08009c4d 	.word	0x08009c4d
 8007da4:	08009c64 	.word	0x08009c64
 8007da8:	7ff00000 	.word	0x7ff00000
 8007dac:	08009c49 	.word	0x08009c49
 8007db0:	08009c40 	.word	0x08009c40
 8007db4:	08009c1d 	.word	0x08009c1d
 8007db8:	3ff80000 	.word	0x3ff80000
 8007dbc:	08009dc0 	.word	0x08009dc0
 8007dc0:	08009cc3 	.word	0x08009cc3
 8007dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dc6:	9a00      	ldr	r2, [sp, #0]
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	9b01      	ldr	r3, [sp, #4]
 8007dcc:	2b0e      	cmp	r3, #14
 8007dce:	f200 80ad 	bhi.w	8007f2c <_dtoa_r+0x484>
 8007dd2:	2d00      	cmp	r5, #0
 8007dd4:	f000 80aa 	beq.w	8007f2c <_dtoa_r+0x484>
 8007dd8:	f1ba 0f00 	cmp.w	sl, #0
 8007ddc:	dd36      	ble.n	8007e4c <_dtoa_r+0x3a4>
 8007dde:	4ac3      	ldr	r2, [pc, #780]	; (80080ec <_dtoa_r+0x644>)
 8007de0:	f00a 030f 	and.w	r3, sl, #15
 8007de4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007de8:	ed93 7b00 	vldr	d7, [r3]
 8007dec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007df0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007df4:	eeb0 8a47 	vmov.f32	s16, s14
 8007df8:	eef0 8a67 	vmov.f32	s17, s15
 8007dfc:	d016      	beq.n	8007e2c <_dtoa_r+0x384>
 8007dfe:	4bbc      	ldr	r3, [pc, #752]	; (80080f0 <_dtoa_r+0x648>)
 8007e00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e08:	f7f8 fd20 	bl	800084c <__aeabi_ddiv>
 8007e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e10:	f007 070f 	and.w	r7, r7, #15
 8007e14:	2503      	movs	r5, #3
 8007e16:	4eb6      	ldr	r6, [pc, #728]	; (80080f0 <_dtoa_r+0x648>)
 8007e18:	b957      	cbnz	r7, 8007e30 <_dtoa_r+0x388>
 8007e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e1e:	ec53 2b18 	vmov	r2, r3, d8
 8007e22:	f7f8 fd13 	bl	800084c <__aeabi_ddiv>
 8007e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e2a:	e029      	b.n	8007e80 <_dtoa_r+0x3d8>
 8007e2c:	2502      	movs	r5, #2
 8007e2e:	e7f2      	b.n	8007e16 <_dtoa_r+0x36e>
 8007e30:	07f9      	lsls	r1, r7, #31
 8007e32:	d508      	bpl.n	8007e46 <_dtoa_r+0x39e>
 8007e34:	ec51 0b18 	vmov	r0, r1, d8
 8007e38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e3c:	f7f8 fbdc 	bl	80005f8 <__aeabi_dmul>
 8007e40:	ec41 0b18 	vmov	d8, r0, r1
 8007e44:	3501      	adds	r5, #1
 8007e46:	107f      	asrs	r7, r7, #1
 8007e48:	3608      	adds	r6, #8
 8007e4a:	e7e5      	b.n	8007e18 <_dtoa_r+0x370>
 8007e4c:	f000 80a6 	beq.w	8007f9c <_dtoa_r+0x4f4>
 8007e50:	f1ca 0600 	rsb	r6, sl, #0
 8007e54:	4ba5      	ldr	r3, [pc, #660]	; (80080ec <_dtoa_r+0x644>)
 8007e56:	4fa6      	ldr	r7, [pc, #664]	; (80080f0 <_dtoa_r+0x648>)
 8007e58:	f006 020f 	and.w	r2, r6, #15
 8007e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e68:	f7f8 fbc6 	bl	80005f8 <__aeabi_dmul>
 8007e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e70:	1136      	asrs	r6, r6, #4
 8007e72:	2300      	movs	r3, #0
 8007e74:	2502      	movs	r5, #2
 8007e76:	2e00      	cmp	r6, #0
 8007e78:	f040 8085 	bne.w	8007f86 <_dtoa_r+0x4de>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1d2      	bne.n	8007e26 <_dtoa_r+0x37e>
 8007e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 808c 	beq.w	8007fa0 <_dtoa_r+0x4f8>
 8007e88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e8c:	4b99      	ldr	r3, [pc, #612]	; (80080f4 <_dtoa_r+0x64c>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4630      	mov	r0, r6
 8007e92:	4639      	mov	r1, r7
 8007e94:	f7f8 fe22 	bl	8000adc <__aeabi_dcmplt>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	f000 8081 	beq.w	8007fa0 <_dtoa_r+0x4f8>
 8007e9e:	9b01      	ldr	r3, [sp, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d07d      	beq.n	8007fa0 <_dtoa_r+0x4f8>
 8007ea4:	f1b9 0f00 	cmp.w	r9, #0
 8007ea8:	dd3c      	ble.n	8007f24 <_dtoa_r+0x47c>
 8007eaa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007eae:	9307      	str	r3, [sp, #28]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4b91      	ldr	r3, [pc, #580]	; (80080f8 <_dtoa_r+0x650>)
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	f7f8 fb9e 	bl	80005f8 <__aeabi_dmul>
 8007ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ec0:	3501      	adds	r5, #1
 8007ec2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007ec6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f7f8 fb2a 	bl	8000524 <__aeabi_i2d>
 8007ed0:	4632      	mov	r2, r6
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	f7f8 fb90 	bl	80005f8 <__aeabi_dmul>
 8007ed8:	4b88      	ldr	r3, [pc, #544]	; (80080fc <_dtoa_r+0x654>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	f7f8 f9d6 	bl	800028c <__adddf3>
 8007ee0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee8:	9303      	str	r3, [sp, #12]
 8007eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d15c      	bne.n	8007faa <_dtoa_r+0x502>
 8007ef0:	4b83      	ldr	r3, [pc, #524]	; (8008100 <_dtoa_r+0x658>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 f9c6 	bl	8000288 <__aeabi_dsub>
 8007efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f00:	4606      	mov	r6, r0
 8007f02:	460f      	mov	r7, r1
 8007f04:	f7f8 fe08 	bl	8000b18 <__aeabi_dcmpgt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f040 8296 	bne.w	800843a <_dtoa_r+0x992>
 8007f0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007f12:	4630      	mov	r0, r6
 8007f14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f18:	4639      	mov	r1, r7
 8007f1a:	f7f8 fddf 	bl	8000adc <__aeabi_dcmplt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f040 8288 	bne.w	8008434 <_dtoa_r+0x98c>
 8007f24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f2c0 8158 	blt.w	80081e4 <_dtoa_r+0x73c>
 8007f34:	f1ba 0f0e 	cmp.w	sl, #14
 8007f38:	f300 8154 	bgt.w	80081e4 <_dtoa_r+0x73c>
 8007f3c:	4b6b      	ldr	r3, [pc, #428]	; (80080ec <_dtoa_r+0x644>)
 8007f3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f280 80e3 	bge.w	8008114 <_dtoa_r+0x66c>
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f300 80df 	bgt.w	8008114 <_dtoa_r+0x66c>
 8007f56:	f040 826d 	bne.w	8008434 <_dtoa_r+0x98c>
 8007f5a:	4b69      	ldr	r3, [pc, #420]	; (8008100 <_dtoa_r+0x658>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4640      	mov	r0, r8
 8007f60:	4649      	mov	r1, r9
 8007f62:	f7f8 fb49 	bl	80005f8 <__aeabi_dmul>
 8007f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f6a:	f7f8 fdcb 	bl	8000b04 <__aeabi_dcmpge>
 8007f6e:	9e01      	ldr	r6, [sp, #4]
 8007f70:	4637      	mov	r7, r6
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f040 8243 	bne.w	80083fe <_dtoa_r+0x956>
 8007f78:	9d00      	ldr	r5, [sp, #0]
 8007f7a:	2331      	movs	r3, #49	; 0x31
 8007f7c:	f805 3b01 	strb.w	r3, [r5], #1
 8007f80:	f10a 0a01 	add.w	sl, sl, #1
 8007f84:	e23f      	b.n	8008406 <_dtoa_r+0x95e>
 8007f86:	07f2      	lsls	r2, r6, #31
 8007f88:	d505      	bpl.n	8007f96 <_dtoa_r+0x4ee>
 8007f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f8e:	f7f8 fb33 	bl	80005f8 <__aeabi_dmul>
 8007f92:	3501      	adds	r5, #1
 8007f94:	2301      	movs	r3, #1
 8007f96:	1076      	asrs	r6, r6, #1
 8007f98:	3708      	adds	r7, #8
 8007f9a:	e76c      	b.n	8007e76 <_dtoa_r+0x3ce>
 8007f9c:	2502      	movs	r5, #2
 8007f9e:	e76f      	b.n	8007e80 <_dtoa_r+0x3d8>
 8007fa0:	9b01      	ldr	r3, [sp, #4]
 8007fa2:	f8cd a01c 	str.w	sl, [sp, #28]
 8007fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8007fa8:	e78d      	b.n	8007ec6 <_dtoa_r+0x41e>
 8007faa:	9900      	ldr	r1, [sp, #0]
 8007fac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fb0:	4b4e      	ldr	r3, [pc, #312]	; (80080ec <_dtoa_r+0x644>)
 8007fb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fb6:	4401      	add	r1, r0
 8007fb8:	9102      	str	r1, [sp, #8]
 8007fba:	9908      	ldr	r1, [sp, #32]
 8007fbc:	eeb0 8a47 	vmov.f32	s16, s14
 8007fc0:	eef0 8a67 	vmov.f32	s17, s15
 8007fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fcc:	2900      	cmp	r1, #0
 8007fce:	d045      	beq.n	800805c <_dtoa_r+0x5b4>
 8007fd0:	494c      	ldr	r1, [pc, #304]	; (8008104 <_dtoa_r+0x65c>)
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	f7f8 fc3a 	bl	800084c <__aeabi_ddiv>
 8007fd8:	ec53 2b18 	vmov	r2, r3, d8
 8007fdc:	f7f8 f954 	bl	8000288 <__aeabi_dsub>
 8007fe0:	9d00      	ldr	r5, [sp, #0]
 8007fe2:	ec41 0b18 	vmov	d8, r0, r1
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7f8 fdb5 	bl	8000b58 <__aeabi_d2iz>
 8007fee:	900c      	str	r0, [sp, #48]	; 0x30
 8007ff0:	f7f8 fa98 	bl	8000524 <__aeabi_i2d>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f7f8 f944 	bl	8000288 <__aeabi_dsub>
 8008000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008002:	3330      	adds	r3, #48	; 0x30
 8008004:	f805 3b01 	strb.w	r3, [r5], #1
 8008008:	ec53 2b18 	vmov	r2, r3, d8
 800800c:	4606      	mov	r6, r0
 800800e:	460f      	mov	r7, r1
 8008010:	f7f8 fd64 	bl	8000adc <__aeabi_dcmplt>
 8008014:	2800      	cmp	r0, #0
 8008016:	d165      	bne.n	80080e4 <_dtoa_r+0x63c>
 8008018:	4632      	mov	r2, r6
 800801a:	463b      	mov	r3, r7
 800801c:	4935      	ldr	r1, [pc, #212]	; (80080f4 <_dtoa_r+0x64c>)
 800801e:	2000      	movs	r0, #0
 8008020:	f7f8 f932 	bl	8000288 <__aeabi_dsub>
 8008024:	ec53 2b18 	vmov	r2, r3, d8
 8008028:	f7f8 fd58 	bl	8000adc <__aeabi_dcmplt>
 800802c:	2800      	cmp	r0, #0
 800802e:	f040 80b9 	bne.w	80081a4 <_dtoa_r+0x6fc>
 8008032:	9b02      	ldr	r3, [sp, #8]
 8008034:	429d      	cmp	r5, r3
 8008036:	f43f af75 	beq.w	8007f24 <_dtoa_r+0x47c>
 800803a:	4b2f      	ldr	r3, [pc, #188]	; (80080f8 <_dtoa_r+0x650>)
 800803c:	ec51 0b18 	vmov	r0, r1, d8
 8008040:	2200      	movs	r2, #0
 8008042:	f7f8 fad9 	bl	80005f8 <__aeabi_dmul>
 8008046:	4b2c      	ldr	r3, [pc, #176]	; (80080f8 <_dtoa_r+0x650>)
 8008048:	ec41 0b18 	vmov	d8, r0, r1
 800804c:	2200      	movs	r2, #0
 800804e:	4630      	mov	r0, r6
 8008050:	4639      	mov	r1, r7
 8008052:	f7f8 fad1 	bl	80005f8 <__aeabi_dmul>
 8008056:	4606      	mov	r6, r0
 8008058:	460f      	mov	r7, r1
 800805a:	e7c4      	b.n	8007fe6 <_dtoa_r+0x53e>
 800805c:	ec51 0b17 	vmov	r0, r1, d7
 8008060:	f7f8 faca 	bl	80005f8 <__aeabi_dmul>
 8008064:	9b02      	ldr	r3, [sp, #8]
 8008066:	9d00      	ldr	r5, [sp, #0]
 8008068:	930c      	str	r3, [sp, #48]	; 0x30
 800806a:	ec41 0b18 	vmov	d8, r0, r1
 800806e:	4639      	mov	r1, r7
 8008070:	4630      	mov	r0, r6
 8008072:	f7f8 fd71 	bl	8000b58 <__aeabi_d2iz>
 8008076:	9011      	str	r0, [sp, #68]	; 0x44
 8008078:	f7f8 fa54 	bl	8000524 <__aeabi_i2d>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 f900 	bl	8000288 <__aeabi_dsub>
 8008088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800808a:	3330      	adds	r3, #48	; 0x30
 800808c:	f805 3b01 	strb.w	r3, [r5], #1
 8008090:	9b02      	ldr	r3, [sp, #8]
 8008092:	429d      	cmp	r5, r3
 8008094:	4606      	mov	r6, r0
 8008096:	460f      	mov	r7, r1
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	d134      	bne.n	8008108 <_dtoa_r+0x660>
 800809e:	4b19      	ldr	r3, [pc, #100]	; (8008104 <_dtoa_r+0x65c>)
 80080a0:	ec51 0b18 	vmov	r0, r1, d8
 80080a4:	f7f8 f8f2 	bl	800028c <__adddf3>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4630      	mov	r0, r6
 80080ae:	4639      	mov	r1, r7
 80080b0:	f7f8 fd32 	bl	8000b18 <__aeabi_dcmpgt>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d175      	bne.n	80081a4 <_dtoa_r+0x6fc>
 80080b8:	ec53 2b18 	vmov	r2, r3, d8
 80080bc:	4911      	ldr	r1, [pc, #68]	; (8008104 <_dtoa_r+0x65c>)
 80080be:	2000      	movs	r0, #0
 80080c0:	f7f8 f8e2 	bl	8000288 <__aeabi_dsub>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4630      	mov	r0, r6
 80080ca:	4639      	mov	r1, r7
 80080cc:	f7f8 fd06 	bl	8000adc <__aeabi_dcmplt>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	f43f af27 	beq.w	8007f24 <_dtoa_r+0x47c>
 80080d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080d8:	1e6b      	subs	r3, r5, #1
 80080da:	930c      	str	r3, [sp, #48]	; 0x30
 80080dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080e0:	2b30      	cmp	r3, #48	; 0x30
 80080e2:	d0f8      	beq.n	80080d6 <_dtoa_r+0x62e>
 80080e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80080e8:	e04a      	b.n	8008180 <_dtoa_r+0x6d8>
 80080ea:	bf00      	nop
 80080ec:	08009dc0 	.word	0x08009dc0
 80080f0:	08009d98 	.word	0x08009d98
 80080f4:	3ff00000 	.word	0x3ff00000
 80080f8:	40240000 	.word	0x40240000
 80080fc:	401c0000 	.word	0x401c0000
 8008100:	40140000 	.word	0x40140000
 8008104:	3fe00000 	.word	0x3fe00000
 8008108:	4baf      	ldr	r3, [pc, #700]	; (80083c8 <_dtoa_r+0x920>)
 800810a:	f7f8 fa75 	bl	80005f8 <__aeabi_dmul>
 800810e:	4606      	mov	r6, r0
 8008110:	460f      	mov	r7, r1
 8008112:	e7ac      	b.n	800806e <_dtoa_r+0x5c6>
 8008114:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008118:	9d00      	ldr	r5, [sp, #0]
 800811a:	4642      	mov	r2, r8
 800811c:	464b      	mov	r3, r9
 800811e:	4630      	mov	r0, r6
 8008120:	4639      	mov	r1, r7
 8008122:	f7f8 fb93 	bl	800084c <__aeabi_ddiv>
 8008126:	f7f8 fd17 	bl	8000b58 <__aeabi_d2iz>
 800812a:	9002      	str	r0, [sp, #8]
 800812c:	f7f8 f9fa 	bl	8000524 <__aeabi_i2d>
 8008130:	4642      	mov	r2, r8
 8008132:	464b      	mov	r3, r9
 8008134:	f7f8 fa60 	bl	80005f8 <__aeabi_dmul>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4630      	mov	r0, r6
 800813e:	4639      	mov	r1, r7
 8008140:	f7f8 f8a2 	bl	8000288 <__aeabi_dsub>
 8008144:	9e02      	ldr	r6, [sp, #8]
 8008146:	9f01      	ldr	r7, [sp, #4]
 8008148:	3630      	adds	r6, #48	; 0x30
 800814a:	f805 6b01 	strb.w	r6, [r5], #1
 800814e:	9e00      	ldr	r6, [sp, #0]
 8008150:	1bae      	subs	r6, r5, r6
 8008152:	42b7      	cmp	r7, r6
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	d137      	bne.n	80081ca <_dtoa_r+0x722>
 800815a:	f7f8 f897 	bl	800028c <__adddf3>
 800815e:	4642      	mov	r2, r8
 8008160:	464b      	mov	r3, r9
 8008162:	4606      	mov	r6, r0
 8008164:	460f      	mov	r7, r1
 8008166:	f7f8 fcd7 	bl	8000b18 <__aeabi_dcmpgt>
 800816a:	b9c8      	cbnz	r0, 80081a0 <_dtoa_r+0x6f8>
 800816c:	4642      	mov	r2, r8
 800816e:	464b      	mov	r3, r9
 8008170:	4630      	mov	r0, r6
 8008172:	4639      	mov	r1, r7
 8008174:	f7f8 fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008178:	b110      	cbz	r0, 8008180 <_dtoa_r+0x6d8>
 800817a:	9b02      	ldr	r3, [sp, #8]
 800817c:	07d9      	lsls	r1, r3, #31
 800817e:	d40f      	bmi.n	80081a0 <_dtoa_r+0x6f8>
 8008180:	4620      	mov	r0, r4
 8008182:	4659      	mov	r1, fp
 8008184:	f000 fce8 	bl	8008b58 <_Bfree>
 8008188:	2300      	movs	r3, #0
 800818a:	702b      	strb	r3, [r5, #0]
 800818c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800818e:	f10a 0001 	add.w	r0, sl, #1
 8008192:	6018      	str	r0, [r3, #0]
 8008194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008196:	2b00      	cmp	r3, #0
 8008198:	f43f acd8 	beq.w	8007b4c <_dtoa_r+0xa4>
 800819c:	601d      	str	r5, [r3, #0]
 800819e:	e4d5      	b.n	8007b4c <_dtoa_r+0xa4>
 80081a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80081a4:	462b      	mov	r3, r5
 80081a6:	461d      	mov	r5, r3
 80081a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081ac:	2a39      	cmp	r2, #57	; 0x39
 80081ae:	d108      	bne.n	80081c2 <_dtoa_r+0x71a>
 80081b0:	9a00      	ldr	r2, [sp, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d1f7      	bne.n	80081a6 <_dtoa_r+0x6fe>
 80081b6:	9a07      	ldr	r2, [sp, #28]
 80081b8:	9900      	ldr	r1, [sp, #0]
 80081ba:	3201      	adds	r2, #1
 80081bc:	9207      	str	r2, [sp, #28]
 80081be:	2230      	movs	r2, #48	; 0x30
 80081c0:	700a      	strb	r2, [r1, #0]
 80081c2:	781a      	ldrb	r2, [r3, #0]
 80081c4:	3201      	adds	r2, #1
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	e78c      	b.n	80080e4 <_dtoa_r+0x63c>
 80081ca:	4b7f      	ldr	r3, [pc, #508]	; (80083c8 <_dtoa_r+0x920>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	f7f8 fa13 	bl	80005f8 <__aeabi_dmul>
 80081d2:	2200      	movs	r2, #0
 80081d4:	2300      	movs	r3, #0
 80081d6:	4606      	mov	r6, r0
 80081d8:	460f      	mov	r7, r1
 80081da:	f7f8 fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d09b      	beq.n	800811a <_dtoa_r+0x672>
 80081e2:	e7cd      	b.n	8008180 <_dtoa_r+0x6d8>
 80081e4:	9a08      	ldr	r2, [sp, #32]
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	f000 80c4 	beq.w	8008374 <_dtoa_r+0x8cc>
 80081ec:	9a05      	ldr	r2, [sp, #20]
 80081ee:	2a01      	cmp	r2, #1
 80081f0:	f300 80a8 	bgt.w	8008344 <_dtoa_r+0x89c>
 80081f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	f000 80a0 	beq.w	800833c <_dtoa_r+0x894>
 80081fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008200:	9e06      	ldr	r6, [sp, #24]
 8008202:	4645      	mov	r5, r8
 8008204:	9a04      	ldr	r2, [sp, #16]
 8008206:	2101      	movs	r1, #1
 8008208:	441a      	add	r2, r3
 800820a:	4620      	mov	r0, r4
 800820c:	4498      	add	r8, r3
 800820e:	9204      	str	r2, [sp, #16]
 8008210:	f000 fd5e 	bl	8008cd0 <__i2b>
 8008214:	4607      	mov	r7, r0
 8008216:	2d00      	cmp	r5, #0
 8008218:	dd0b      	ble.n	8008232 <_dtoa_r+0x78a>
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	dd08      	ble.n	8008232 <_dtoa_r+0x78a>
 8008220:	42ab      	cmp	r3, r5
 8008222:	9a04      	ldr	r2, [sp, #16]
 8008224:	bfa8      	it	ge
 8008226:	462b      	movge	r3, r5
 8008228:	eba8 0803 	sub.w	r8, r8, r3
 800822c:	1aed      	subs	r5, r5, r3
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	9b06      	ldr	r3, [sp, #24]
 8008234:	b1fb      	cbz	r3, 8008276 <_dtoa_r+0x7ce>
 8008236:	9b08      	ldr	r3, [sp, #32]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 809f 	beq.w	800837c <_dtoa_r+0x8d4>
 800823e:	2e00      	cmp	r6, #0
 8008240:	dd11      	ble.n	8008266 <_dtoa_r+0x7be>
 8008242:	4639      	mov	r1, r7
 8008244:	4632      	mov	r2, r6
 8008246:	4620      	mov	r0, r4
 8008248:	f000 fdfe 	bl	8008e48 <__pow5mult>
 800824c:	465a      	mov	r2, fp
 800824e:	4601      	mov	r1, r0
 8008250:	4607      	mov	r7, r0
 8008252:	4620      	mov	r0, r4
 8008254:	f000 fd52 	bl	8008cfc <__multiply>
 8008258:	4659      	mov	r1, fp
 800825a:	9007      	str	r0, [sp, #28]
 800825c:	4620      	mov	r0, r4
 800825e:	f000 fc7b 	bl	8008b58 <_Bfree>
 8008262:	9b07      	ldr	r3, [sp, #28]
 8008264:	469b      	mov	fp, r3
 8008266:	9b06      	ldr	r3, [sp, #24]
 8008268:	1b9a      	subs	r2, r3, r6
 800826a:	d004      	beq.n	8008276 <_dtoa_r+0x7ce>
 800826c:	4659      	mov	r1, fp
 800826e:	4620      	mov	r0, r4
 8008270:	f000 fdea 	bl	8008e48 <__pow5mult>
 8008274:	4683      	mov	fp, r0
 8008276:	2101      	movs	r1, #1
 8008278:	4620      	mov	r0, r4
 800827a:	f000 fd29 	bl	8008cd0 <__i2b>
 800827e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008280:	2b00      	cmp	r3, #0
 8008282:	4606      	mov	r6, r0
 8008284:	dd7c      	ble.n	8008380 <_dtoa_r+0x8d8>
 8008286:	461a      	mov	r2, r3
 8008288:	4601      	mov	r1, r0
 800828a:	4620      	mov	r0, r4
 800828c:	f000 fddc 	bl	8008e48 <__pow5mult>
 8008290:	9b05      	ldr	r3, [sp, #20]
 8008292:	2b01      	cmp	r3, #1
 8008294:	4606      	mov	r6, r0
 8008296:	dd76      	ble.n	8008386 <_dtoa_r+0x8de>
 8008298:	2300      	movs	r3, #0
 800829a:	9306      	str	r3, [sp, #24]
 800829c:	6933      	ldr	r3, [r6, #16]
 800829e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082a2:	6918      	ldr	r0, [r3, #16]
 80082a4:	f000 fcc4 	bl	8008c30 <__hi0bits>
 80082a8:	f1c0 0020 	rsb	r0, r0, #32
 80082ac:	9b04      	ldr	r3, [sp, #16]
 80082ae:	4418      	add	r0, r3
 80082b0:	f010 001f 	ands.w	r0, r0, #31
 80082b4:	f000 8086 	beq.w	80083c4 <_dtoa_r+0x91c>
 80082b8:	f1c0 0320 	rsb	r3, r0, #32
 80082bc:	2b04      	cmp	r3, #4
 80082be:	dd7f      	ble.n	80083c0 <_dtoa_r+0x918>
 80082c0:	f1c0 001c 	rsb	r0, r0, #28
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	4403      	add	r3, r0
 80082c8:	4480      	add	r8, r0
 80082ca:	4405      	add	r5, r0
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	f1b8 0f00 	cmp.w	r8, #0
 80082d2:	dd05      	ble.n	80082e0 <_dtoa_r+0x838>
 80082d4:	4659      	mov	r1, fp
 80082d6:	4642      	mov	r2, r8
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 fe0f 	bl	8008efc <__lshift>
 80082de:	4683      	mov	fp, r0
 80082e0:	9b04      	ldr	r3, [sp, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dd05      	ble.n	80082f2 <_dtoa_r+0x84a>
 80082e6:	4631      	mov	r1, r6
 80082e8:	461a      	mov	r2, r3
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fe06 	bl	8008efc <__lshift>
 80082f0:	4606      	mov	r6, r0
 80082f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d069      	beq.n	80083cc <_dtoa_r+0x924>
 80082f8:	4631      	mov	r1, r6
 80082fa:	4658      	mov	r0, fp
 80082fc:	f000 fe6a 	bl	8008fd4 <__mcmp>
 8008300:	2800      	cmp	r0, #0
 8008302:	da63      	bge.n	80083cc <_dtoa_r+0x924>
 8008304:	2300      	movs	r3, #0
 8008306:	4659      	mov	r1, fp
 8008308:	220a      	movs	r2, #10
 800830a:	4620      	mov	r0, r4
 800830c:	f000 fc46 	bl	8008b9c <__multadd>
 8008310:	9b08      	ldr	r3, [sp, #32]
 8008312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008316:	4683      	mov	fp, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 818f 	beq.w	800863c <_dtoa_r+0xb94>
 800831e:	4639      	mov	r1, r7
 8008320:	2300      	movs	r3, #0
 8008322:	220a      	movs	r2, #10
 8008324:	4620      	mov	r0, r4
 8008326:	f000 fc39 	bl	8008b9c <__multadd>
 800832a:	f1b9 0f00 	cmp.w	r9, #0
 800832e:	4607      	mov	r7, r0
 8008330:	f300 808e 	bgt.w	8008450 <_dtoa_r+0x9a8>
 8008334:	9b05      	ldr	r3, [sp, #20]
 8008336:	2b02      	cmp	r3, #2
 8008338:	dc50      	bgt.n	80083dc <_dtoa_r+0x934>
 800833a:	e089      	b.n	8008450 <_dtoa_r+0x9a8>
 800833c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800833e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008342:	e75d      	b.n	8008200 <_dtoa_r+0x758>
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	1e5e      	subs	r6, r3, #1
 8008348:	9b06      	ldr	r3, [sp, #24]
 800834a:	42b3      	cmp	r3, r6
 800834c:	bfbf      	itttt	lt
 800834e:	9b06      	ldrlt	r3, [sp, #24]
 8008350:	9606      	strlt	r6, [sp, #24]
 8008352:	1af2      	sublt	r2, r6, r3
 8008354:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008356:	bfb6      	itet	lt
 8008358:	189b      	addlt	r3, r3, r2
 800835a:	1b9e      	subge	r6, r3, r6
 800835c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	bfb8      	it	lt
 8008362:	2600      	movlt	r6, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	bfb5      	itete	lt
 8008368:	eba8 0503 	sublt.w	r5, r8, r3
 800836c:	9b01      	ldrge	r3, [sp, #4]
 800836e:	2300      	movlt	r3, #0
 8008370:	4645      	movge	r5, r8
 8008372:	e747      	b.n	8008204 <_dtoa_r+0x75c>
 8008374:	9e06      	ldr	r6, [sp, #24]
 8008376:	9f08      	ldr	r7, [sp, #32]
 8008378:	4645      	mov	r5, r8
 800837a:	e74c      	b.n	8008216 <_dtoa_r+0x76e>
 800837c:	9a06      	ldr	r2, [sp, #24]
 800837e:	e775      	b.n	800826c <_dtoa_r+0x7c4>
 8008380:	9b05      	ldr	r3, [sp, #20]
 8008382:	2b01      	cmp	r3, #1
 8008384:	dc18      	bgt.n	80083b8 <_dtoa_r+0x910>
 8008386:	9b02      	ldr	r3, [sp, #8]
 8008388:	b9b3      	cbnz	r3, 80083b8 <_dtoa_r+0x910>
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008390:	b9a3      	cbnz	r3, 80083bc <_dtoa_r+0x914>
 8008392:	9b03      	ldr	r3, [sp, #12]
 8008394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008398:	0d1b      	lsrs	r3, r3, #20
 800839a:	051b      	lsls	r3, r3, #20
 800839c:	b12b      	cbz	r3, 80083aa <_dtoa_r+0x902>
 800839e:	9b04      	ldr	r3, [sp, #16]
 80083a0:	3301      	adds	r3, #1
 80083a2:	9304      	str	r3, [sp, #16]
 80083a4:	f108 0801 	add.w	r8, r8, #1
 80083a8:	2301      	movs	r3, #1
 80083aa:	9306      	str	r3, [sp, #24]
 80083ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f47f af74 	bne.w	800829c <_dtoa_r+0x7f4>
 80083b4:	2001      	movs	r0, #1
 80083b6:	e779      	b.n	80082ac <_dtoa_r+0x804>
 80083b8:	2300      	movs	r3, #0
 80083ba:	e7f6      	b.n	80083aa <_dtoa_r+0x902>
 80083bc:	9b02      	ldr	r3, [sp, #8]
 80083be:	e7f4      	b.n	80083aa <_dtoa_r+0x902>
 80083c0:	d085      	beq.n	80082ce <_dtoa_r+0x826>
 80083c2:	4618      	mov	r0, r3
 80083c4:	301c      	adds	r0, #28
 80083c6:	e77d      	b.n	80082c4 <_dtoa_r+0x81c>
 80083c8:	40240000 	.word	0x40240000
 80083cc:	9b01      	ldr	r3, [sp, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	dc38      	bgt.n	8008444 <_dtoa_r+0x99c>
 80083d2:	9b05      	ldr	r3, [sp, #20]
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	dd35      	ble.n	8008444 <_dtoa_r+0x99c>
 80083d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80083dc:	f1b9 0f00 	cmp.w	r9, #0
 80083e0:	d10d      	bne.n	80083fe <_dtoa_r+0x956>
 80083e2:	4631      	mov	r1, r6
 80083e4:	464b      	mov	r3, r9
 80083e6:	2205      	movs	r2, #5
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 fbd7 	bl	8008b9c <__multadd>
 80083ee:	4601      	mov	r1, r0
 80083f0:	4606      	mov	r6, r0
 80083f2:	4658      	mov	r0, fp
 80083f4:	f000 fdee 	bl	8008fd4 <__mcmp>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	f73f adbd 	bgt.w	8007f78 <_dtoa_r+0x4d0>
 80083fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008400:	9d00      	ldr	r5, [sp, #0]
 8008402:	ea6f 0a03 	mvn.w	sl, r3
 8008406:	f04f 0800 	mov.w	r8, #0
 800840a:	4631      	mov	r1, r6
 800840c:	4620      	mov	r0, r4
 800840e:	f000 fba3 	bl	8008b58 <_Bfree>
 8008412:	2f00      	cmp	r7, #0
 8008414:	f43f aeb4 	beq.w	8008180 <_dtoa_r+0x6d8>
 8008418:	f1b8 0f00 	cmp.w	r8, #0
 800841c:	d005      	beq.n	800842a <_dtoa_r+0x982>
 800841e:	45b8      	cmp	r8, r7
 8008420:	d003      	beq.n	800842a <_dtoa_r+0x982>
 8008422:	4641      	mov	r1, r8
 8008424:	4620      	mov	r0, r4
 8008426:	f000 fb97 	bl	8008b58 <_Bfree>
 800842a:	4639      	mov	r1, r7
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fb93 	bl	8008b58 <_Bfree>
 8008432:	e6a5      	b.n	8008180 <_dtoa_r+0x6d8>
 8008434:	2600      	movs	r6, #0
 8008436:	4637      	mov	r7, r6
 8008438:	e7e1      	b.n	80083fe <_dtoa_r+0x956>
 800843a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800843c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008440:	4637      	mov	r7, r6
 8008442:	e599      	b.n	8007f78 <_dtoa_r+0x4d0>
 8008444:	9b08      	ldr	r3, [sp, #32]
 8008446:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 80fd 	beq.w	800864a <_dtoa_r+0xba2>
 8008450:	2d00      	cmp	r5, #0
 8008452:	dd05      	ble.n	8008460 <_dtoa_r+0x9b8>
 8008454:	4639      	mov	r1, r7
 8008456:	462a      	mov	r2, r5
 8008458:	4620      	mov	r0, r4
 800845a:	f000 fd4f 	bl	8008efc <__lshift>
 800845e:	4607      	mov	r7, r0
 8008460:	9b06      	ldr	r3, [sp, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d05c      	beq.n	8008520 <_dtoa_r+0xa78>
 8008466:	6879      	ldr	r1, [r7, #4]
 8008468:	4620      	mov	r0, r4
 800846a:	f000 fb35 	bl	8008ad8 <_Balloc>
 800846e:	4605      	mov	r5, r0
 8008470:	b928      	cbnz	r0, 800847e <_dtoa_r+0x9d6>
 8008472:	4b80      	ldr	r3, [pc, #512]	; (8008674 <_dtoa_r+0xbcc>)
 8008474:	4602      	mov	r2, r0
 8008476:	f240 21ea 	movw	r1, #746	; 0x2ea
 800847a:	f7ff bb2e 	b.w	8007ada <_dtoa_r+0x32>
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	3202      	adds	r2, #2
 8008482:	0092      	lsls	r2, r2, #2
 8008484:	f107 010c 	add.w	r1, r7, #12
 8008488:	300c      	adds	r0, #12
 800848a:	f7fe fbe9 	bl	8006c60 <memcpy>
 800848e:	2201      	movs	r2, #1
 8008490:	4629      	mov	r1, r5
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fd32 	bl	8008efc <__lshift>
 8008498:	9b00      	ldr	r3, [sp, #0]
 800849a:	3301      	adds	r3, #1
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	9b00      	ldr	r3, [sp, #0]
 80084a0:	444b      	add	r3, r9
 80084a2:	9307      	str	r3, [sp, #28]
 80084a4:	9b02      	ldr	r3, [sp, #8]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	46b8      	mov	r8, r7
 80084ac:	9306      	str	r3, [sp, #24]
 80084ae:	4607      	mov	r7, r0
 80084b0:	9b01      	ldr	r3, [sp, #4]
 80084b2:	4631      	mov	r1, r6
 80084b4:	3b01      	subs	r3, #1
 80084b6:	4658      	mov	r0, fp
 80084b8:	9302      	str	r3, [sp, #8]
 80084ba:	f7ff fa67 	bl	800798c <quorem>
 80084be:	4603      	mov	r3, r0
 80084c0:	3330      	adds	r3, #48	; 0x30
 80084c2:	9004      	str	r0, [sp, #16]
 80084c4:	4641      	mov	r1, r8
 80084c6:	4658      	mov	r0, fp
 80084c8:	9308      	str	r3, [sp, #32]
 80084ca:	f000 fd83 	bl	8008fd4 <__mcmp>
 80084ce:	463a      	mov	r2, r7
 80084d0:	4681      	mov	r9, r0
 80084d2:	4631      	mov	r1, r6
 80084d4:	4620      	mov	r0, r4
 80084d6:	f000 fd99 	bl	800900c <__mdiff>
 80084da:	68c2      	ldr	r2, [r0, #12]
 80084dc:	9b08      	ldr	r3, [sp, #32]
 80084de:	4605      	mov	r5, r0
 80084e0:	bb02      	cbnz	r2, 8008524 <_dtoa_r+0xa7c>
 80084e2:	4601      	mov	r1, r0
 80084e4:	4658      	mov	r0, fp
 80084e6:	f000 fd75 	bl	8008fd4 <__mcmp>
 80084ea:	9b08      	ldr	r3, [sp, #32]
 80084ec:	4602      	mov	r2, r0
 80084ee:	4629      	mov	r1, r5
 80084f0:	4620      	mov	r0, r4
 80084f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80084f6:	f000 fb2f 	bl	8008b58 <_Bfree>
 80084fa:	9b05      	ldr	r3, [sp, #20]
 80084fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084fe:	9d01      	ldr	r5, [sp, #4]
 8008500:	ea43 0102 	orr.w	r1, r3, r2
 8008504:	9b06      	ldr	r3, [sp, #24]
 8008506:	430b      	orrs	r3, r1
 8008508:	9b08      	ldr	r3, [sp, #32]
 800850a:	d10d      	bne.n	8008528 <_dtoa_r+0xa80>
 800850c:	2b39      	cmp	r3, #57	; 0x39
 800850e:	d029      	beq.n	8008564 <_dtoa_r+0xabc>
 8008510:	f1b9 0f00 	cmp.w	r9, #0
 8008514:	dd01      	ble.n	800851a <_dtoa_r+0xa72>
 8008516:	9b04      	ldr	r3, [sp, #16]
 8008518:	3331      	adds	r3, #49	; 0x31
 800851a:	9a02      	ldr	r2, [sp, #8]
 800851c:	7013      	strb	r3, [r2, #0]
 800851e:	e774      	b.n	800840a <_dtoa_r+0x962>
 8008520:	4638      	mov	r0, r7
 8008522:	e7b9      	b.n	8008498 <_dtoa_r+0x9f0>
 8008524:	2201      	movs	r2, #1
 8008526:	e7e2      	b.n	80084ee <_dtoa_r+0xa46>
 8008528:	f1b9 0f00 	cmp.w	r9, #0
 800852c:	db06      	blt.n	800853c <_dtoa_r+0xa94>
 800852e:	9905      	ldr	r1, [sp, #20]
 8008530:	ea41 0909 	orr.w	r9, r1, r9
 8008534:	9906      	ldr	r1, [sp, #24]
 8008536:	ea59 0101 	orrs.w	r1, r9, r1
 800853a:	d120      	bne.n	800857e <_dtoa_r+0xad6>
 800853c:	2a00      	cmp	r2, #0
 800853e:	ddec      	ble.n	800851a <_dtoa_r+0xa72>
 8008540:	4659      	mov	r1, fp
 8008542:	2201      	movs	r2, #1
 8008544:	4620      	mov	r0, r4
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	f000 fcd8 	bl	8008efc <__lshift>
 800854c:	4631      	mov	r1, r6
 800854e:	4683      	mov	fp, r0
 8008550:	f000 fd40 	bl	8008fd4 <__mcmp>
 8008554:	2800      	cmp	r0, #0
 8008556:	9b01      	ldr	r3, [sp, #4]
 8008558:	dc02      	bgt.n	8008560 <_dtoa_r+0xab8>
 800855a:	d1de      	bne.n	800851a <_dtoa_r+0xa72>
 800855c:	07da      	lsls	r2, r3, #31
 800855e:	d5dc      	bpl.n	800851a <_dtoa_r+0xa72>
 8008560:	2b39      	cmp	r3, #57	; 0x39
 8008562:	d1d8      	bne.n	8008516 <_dtoa_r+0xa6e>
 8008564:	9a02      	ldr	r2, [sp, #8]
 8008566:	2339      	movs	r3, #57	; 0x39
 8008568:	7013      	strb	r3, [r2, #0]
 800856a:	462b      	mov	r3, r5
 800856c:	461d      	mov	r5, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008574:	2a39      	cmp	r2, #57	; 0x39
 8008576:	d050      	beq.n	800861a <_dtoa_r+0xb72>
 8008578:	3201      	adds	r2, #1
 800857a:	701a      	strb	r2, [r3, #0]
 800857c:	e745      	b.n	800840a <_dtoa_r+0x962>
 800857e:	2a00      	cmp	r2, #0
 8008580:	dd03      	ble.n	800858a <_dtoa_r+0xae2>
 8008582:	2b39      	cmp	r3, #57	; 0x39
 8008584:	d0ee      	beq.n	8008564 <_dtoa_r+0xabc>
 8008586:	3301      	adds	r3, #1
 8008588:	e7c7      	b.n	800851a <_dtoa_r+0xa72>
 800858a:	9a01      	ldr	r2, [sp, #4]
 800858c:	9907      	ldr	r1, [sp, #28]
 800858e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008592:	428a      	cmp	r2, r1
 8008594:	d02a      	beq.n	80085ec <_dtoa_r+0xb44>
 8008596:	4659      	mov	r1, fp
 8008598:	2300      	movs	r3, #0
 800859a:	220a      	movs	r2, #10
 800859c:	4620      	mov	r0, r4
 800859e:	f000 fafd 	bl	8008b9c <__multadd>
 80085a2:	45b8      	cmp	r8, r7
 80085a4:	4683      	mov	fp, r0
 80085a6:	f04f 0300 	mov.w	r3, #0
 80085aa:	f04f 020a 	mov.w	r2, #10
 80085ae:	4641      	mov	r1, r8
 80085b0:	4620      	mov	r0, r4
 80085b2:	d107      	bne.n	80085c4 <_dtoa_r+0xb1c>
 80085b4:	f000 faf2 	bl	8008b9c <__multadd>
 80085b8:	4680      	mov	r8, r0
 80085ba:	4607      	mov	r7, r0
 80085bc:	9b01      	ldr	r3, [sp, #4]
 80085be:	3301      	adds	r3, #1
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	e775      	b.n	80084b0 <_dtoa_r+0xa08>
 80085c4:	f000 faea 	bl	8008b9c <__multadd>
 80085c8:	4639      	mov	r1, r7
 80085ca:	4680      	mov	r8, r0
 80085cc:	2300      	movs	r3, #0
 80085ce:	220a      	movs	r2, #10
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 fae3 	bl	8008b9c <__multadd>
 80085d6:	4607      	mov	r7, r0
 80085d8:	e7f0      	b.n	80085bc <_dtoa_r+0xb14>
 80085da:	f1b9 0f00 	cmp.w	r9, #0
 80085de:	9a00      	ldr	r2, [sp, #0]
 80085e0:	bfcc      	ite	gt
 80085e2:	464d      	movgt	r5, r9
 80085e4:	2501      	movle	r5, #1
 80085e6:	4415      	add	r5, r2
 80085e8:	f04f 0800 	mov.w	r8, #0
 80085ec:	4659      	mov	r1, fp
 80085ee:	2201      	movs	r2, #1
 80085f0:	4620      	mov	r0, r4
 80085f2:	9301      	str	r3, [sp, #4]
 80085f4:	f000 fc82 	bl	8008efc <__lshift>
 80085f8:	4631      	mov	r1, r6
 80085fa:	4683      	mov	fp, r0
 80085fc:	f000 fcea 	bl	8008fd4 <__mcmp>
 8008600:	2800      	cmp	r0, #0
 8008602:	dcb2      	bgt.n	800856a <_dtoa_r+0xac2>
 8008604:	d102      	bne.n	800860c <_dtoa_r+0xb64>
 8008606:	9b01      	ldr	r3, [sp, #4]
 8008608:	07db      	lsls	r3, r3, #31
 800860a:	d4ae      	bmi.n	800856a <_dtoa_r+0xac2>
 800860c:	462b      	mov	r3, r5
 800860e:	461d      	mov	r5, r3
 8008610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008614:	2a30      	cmp	r2, #48	; 0x30
 8008616:	d0fa      	beq.n	800860e <_dtoa_r+0xb66>
 8008618:	e6f7      	b.n	800840a <_dtoa_r+0x962>
 800861a:	9a00      	ldr	r2, [sp, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d1a5      	bne.n	800856c <_dtoa_r+0xac4>
 8008620:	f10a 0a01 	add.w	sl, sl, #1
 8008624:	2331      	movs	r3, #49	; 0x31
 8008626:	e779      	b.n	800851c <_dtoa_r+0xa74>
 8008628:	4b13      	ldr	r3, [pc, #76]	; (8008678 <_dtoa_r+0xbd0>)
 800862a:	f7ff baaf 	b.w	8007b8c <_dtoa_r+0xe4>
 800862e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008630:	2b00      	cmp	r3, #0
 8008632:	f47f aa86 	bne.w	8007b42 <_dtoa_r+0x9a>
 8008636:	4b11      	ldr	r3, [pc, #68]	; (800867c <_dtoa_r+0xbd4>)
 8008638:	f7ff baa8 	b.w	8007b8c <_dtoa_r+0xe4>
 800863c:	f1b9 0f00 	cmp.w	r9, #0
 8008640:	dc03      	bgt.n	800864a <_dtoa_r+0xba2>
 8008642:	9b05      	ldr	r3, [sp, #20]
 8008644:	2b02      	cmp	r3, #2
 8008646:	f73f aec9 	bgt.w	80083dc <_dtoa_r+0x934>
 800864a:	9d00      	ldr	r5, [sp, #0]
 800864c:	4631      	mov	r1, r6
 800864e:	4658      	mov	r0, fp
 8008650:	f7ff f99c 	bl	800798c <quorem>
 8008654:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008658:	f805 3b01 	strb.w	r3, [r5], #1
 800865c:	9a00      	ldr	r2, [sp, #0]
 800865e:	1aaa      	subs	r2, r5, r2
 8008660:	4591      	cmp	r9, r2
 8008662:	ddba      	ble.n	80085da <_dtoa_r+0xb32>
 8008664:	4659      	mov	r1, fp
 8008666:	2300      	movs	r3, #0
 8008668:	220a      	movs	r2, #10
 800866a:	4620      	mov	r0, r4
 800866c:	f000 fa96 	bl	8008b9c <__multadd>
 8008670:	4683      	mov	fp, r0
 8008672:	e7eb      	b.n	800864c <_dtoa_r+0xba4>
 8008674:	08009cc3 	.word	0x08009cc3
 8008678:	08009c1c 	.word	0x08009c1c
 800867c:	08009c40 	.word	0x08009c40

08008680 <__sflush_r>:
 8008680:	898a      	ldrh	r2, [r1, #12]
 8008682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008686:	4605      	mov	r5, r0
 8008688:	0710      	lsls	r0, r2, #28
 800868a:	460c      	mov	r4, r1
 800868c:	d458      	bmi.n	8008740 <__sflush_r+0xc0>
 800868e:	684b      	ldr	r3, [r1, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	dc05      	bgt.n	80086a0 <__sflush_r+0x20>
 8008694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	dc02      	bgt.n	80086a0 <__sflush_r+0x20>
 800869a:	2000      	movs	r0, #0
 800869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	d0f9      	beq.n	800869a <__sflush_r+0x1a>
 80086a6:	2300      	movs	r3, #0
 80086a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086ac:	682f      	ldr	r7, [r5, #0]
 80086ae:	602b      	str	r3, [r5, #0]
 80086b0:	d032      	beq.n	8008718 <__sflush_r+0x98>
 80086b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	075a      	lsls	r2, r3, #29
 80086b8:	d505      	bpl.n	80086c6 <__sflush_r+0x46>
 80086ba:	6863      	ldr	r3, [r4, #4]
 80086bc:	1ac0      	subs	r0, r0, r3
 80086be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086c0:	b10b      	cbz	r3, 80086c6 <__sflush_r+0x46>
 80086c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086c4:	1ac0      	subs	r0, r0, r3
 80086c6:	2300      	movs	r3, #0
 80086c8:	4602      	mov	r2, r0
 80086ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086cc:	6a21      	ldr	r1, [r4, #32]
 80086ce:	4628      	mov	r0, r5
 80086d0:	47b0      	blx	r6
 80086d2:	1c43      	adds	r3, r0, #1
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	d106      	bne.n	80086e6 <__sflush_r+0x66>
 80086d8:	6829      	ldr	r1, [r5, #0]
 80086da:	291d      	cmp	r1, #29
 80086dc:	d82c      	bhi.n	8008738 <__sflush_r+0xb8>
 80086de:	4a2a      	ldr	r2, [pc, #168]	; (8008788 <__sflush_r+0x108>)
 80086e0:	40ca      	lsrs	r2, r1
 80086e2:	07d6      	lsls	r6, r2, #31
 80086e4:	d528      	bpl.n	8008738 <__sflush_r+0xb8>
 80086e6:	2200      	movs	r2, #0
 80086e8:	6062      	str	r2, [r4, #4]
 80086ea:	04d9      	lsls	r1, r3, #19
 80086ec:	6922      	ldr	r2, [r4, #16]
 80086ee:	6022      	str	r2, [r4, #0]
 80086f0:	d504      	bpl.n	80086fc <__sflush_r+0x7c>
 80086f2:	1c42      	adds	r2, r0, #1
 80086f4:	d101      	bne.n	80086fa <__sflush_r+0x7a>
 80086f6:	682b      	ldr	r3, [r5, #0]
 80086f8:	b903      	cbnz	r3, 80086fc <__sflush_r+0x7c>
 80086fa:	6560      	str	r0, [r4, #84]	; 0x54
 80086fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086fe:	602f      	str	r7, [r5, #0]
 8008700:	2900      	cmp	r1, #0
 8008702:	d0ca      	beq.n	800869a <__sflush_r+0x1a>
 8008704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008708:	4299      	cmp	r1, r3
 800870a:	d002      	beq.n	8008712 <__sflush_r+0x92>
 800870c:	4628      	mov	r0, r5
 800870e:	f000 fd71 	bl	80091f4 <_free_r>
 8008712:	2000      	movs	r0, #0
 8008714:	6360      	str	r0, [r4, #52]	; 0x34
 8008716:	e7c1      	b.n	800869c <__sflush_r+0x1c>
 8008718:	6a21      	ldr	r1, [r4, #32]
 800871a:	2301      	movs	r3, #1
 800871c:	4628      	mov	r0, r5
 800871e:	47b0      	blx	r6
 8008720:	1c41      	adds	r1, r0, #1
 8008722:	d1c7      	bne.n	80086b4 <__sflush_r+0x34>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0c4      	beq.n	80086b4 <__sflush_r+0x34>
 800872a:	2b1d      	cmp	r3, #29
 800872c:	d001      	beq.n	8008732 <__sflush_r+0xb2>
 800872e:	2b16      	cmp	r3, #22
 8008730:	d101      	bne.n	8008736 <__sflush_r+0xb6>
 8008732:	602f      	str	r7, [r5, #0]
 8008734:	e7b1      	b.n	800869a <__sflush_r+0x1a>
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	e7ad      	b.n	800869c <__sflush_r+0x1c>
 8008740:	690f      	ldr	r7, [r1, #16]
 8008742:	2f00      	cmp	r7, #0
 8008744:	d0a9      	beq.n	800869a <__sflush_r+0x1a>
 8008746:	0793      	lsls	r3, r2, #30
 8008748:	680e      	ldr	r6, [r1, #0]
 800874a:	bf08      	it	eq
 800874c:	694b      	ldreq	r3, [r1, #20]
 800874e:	600f      	str	r7, [r1, #0]
 8008750:	bf18      	it	ne
 8008752:	2300      	movne	r3, #0
 8008754:	eba6 0807 	sub.w	r8, r6, r7
 8008758:	608b      	str	r3, [r1, #8]
 800875a:	f1b8 0f00 	cmp.w	r8, #0
 800875e:	dd9c      	ble.n	800869a <__sflush_r+0x1a>
 8008760:	6a21      	ldr	r1, [r4, #32]
 8008762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008764:	4643      	mov	r3, r8
 8008766:	463a      	mov	r2, r7
 8008768:	4628      	mov	r0, r5
 800876a:	47b0      	blx	r6
 800876c:	2800      	cmp	r0, #0
 800876e:	dc06      	bgt.n	800877e <__sflush_r+0xfe>
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008776:	81a3      	strh	r3, [r4, #12]
 8008778:	f04f 30ff 	mov.w	r0, #4294967295
 800877c:	e78e      	b.n	800869c <__sflush_r+0x1c>
 800877e:	4407      	add	r7, r0
 8008780:	eba8 0800 	sub.w	r8, r8, r0
 8008784:	e7e9      	b.n	800875a <__sflush_r+0xda>
 8008786:	bf00      	nop
 8008788:	20400001 	.word	0x20400001

0800878c <_fflush_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	690b      	ldr	r3, [r1, #16]
 8008790:	4605      	mov	r5, r0
 8008792:	460c      	mov	r4, r1
 8008794:	b913      	cbnz	r3, 800879c <_fflush_r+0x10>
 8008796:	2500      	movs	r5, #0
 8008798:	4628      	mov	r0, r5
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	b118      	cbz	r0, 80087a6 <_fflush_r+0x1a>
 800879e:	6983      	ldr	r3, [r0, #24]
 80087a0:	b90b      	cbnz	r3, 80087a6 <_fflush_r+0x1a>
 80087a2:	f000 f887 	bl	80088b4 <__sinit>
 80087a6:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <_fflush_r+0x6c>)
 80087a8:	429c      	cmp	r4, r3
 80087aa:	d11b      	bne.n	80087e4 <_fflush_r+0x58>
 80087ac:	686c      	ldr	r4, [r5, #4]
 80087ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0ef      	beq.n	8008796 <_fflush_r+0xa>
 80087b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087b8:	07d0      	lsls	r0, r2, #31
 80087ba:	d404      	bmi.n	80087c6 <_fflush_r+0x3a>
 80087bc:	0599      	lsls	r1, r3, #22
 80087be:	d402      	bmi.n	80087c6 <_fflush_r+0x3a>
 80087c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087c2:	f000 f91a 	bl	80089fa <__retarget_lock_acquire_recursive>
 80087c6:	4628      	mov	r0, r5
 80087c8:	4621      	mov	r1, r4
 80087ca:	f7ff ff59 	bl	8008680 <__sflush_r>
 80087ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087d0:	07da      	lsls	r2, r3, #31
 80087d2:	4605      	mov	r5, r0
 80087d4:	d4e0      	bmi.n	8008798 <_fflush_r+0xc>
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	059b      	lsls	r3, r3, #22
 80087da:	d4dd      	bmi.n	8008798 <_fflush_r+0xc>
 80087dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087de:	f000 f90d 	bl	80089fc <__retarget_lock_release_recursive>
 80087e2:	e7d9      	b.n	8008798 <_fflush_r+0xc>
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <_fflush_r+0x70>)
 80087e6:	429c      	cmp	r4, r3
 80087e8:	d101      	bne.n	80087ee <_fflush_r+0x62>
 80087ea:	68ac      	ldr	r4, [r5, #8]
 80087ec:	e7df      	b.n	80087ae <_fflush_r+0x22>
 80087ee:	4b04      	ldr	r3, [pc, #16]	; (8008800 <_fflush_r+0x74>)
 80087f0:	429c      	cmp	r4, r3
 80087f2:	bf08      	it	eq
 80087f4:	68ec      	ldreq	r4, [r5, #12]
 80087f6:	e7da      	b.n	80087ae <_fflush_r+0x22>
 80087f8:	08009cf4 	.word	0x08009cf4
 80087fc:	08009d14 	.word	0x08009d14
 8008800:	08009cd4 	.word	0x08009cd4

08008804 <std>:
 8008804:	2300      	movs	r3, #0
 8008806:	b510      	push	{r4, lr}
 8008808:	4604      	mov	r4, r0
 800880a:	e9c0 3300 	strd	r3, r3, [r0]
 800880e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008812:	6083      	str	r3, [r0, #8]
 8008814:	8181      	strh	r1, [r0, #12]
 8008816:	6643      	str	r3, [r0, #100]	; 0x64
 8008818:	81c2      	strh	r2, [r0, #14]
 800881a:	6183      	str	r3, [r0, #24]
 800881c:	4619      	mov	r1, r3
 800881e:	2208      	movs	r2, #8
 8008820:	305c      	adds	r0, #92	; 0x5c
 8008822:	f7fe fa45 	bl	8006cb0 <memset>
 8008826:	4b05      	ldr	r3, [pc, #20]	; (800883c <std+0x38>)
 8008828:	6263      	str	r3, [r4, #36]	; 0x24
 800882a:	4b05      	ldr	r3, [pc, #20]	; (8008840 <std+0x3c>)
 800882c:	62a3      	str	r3, [r4, #40]	; 0x28
 800882e:	4b05      	ldr	r3, [pc, #20]	; (8008844 <std+0x40>)
 8008830:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008832:	4b05      	ldr	r3, [pc, #20]	; (8008848 <std+0x44>)
 8008834:	6224      	str	r4, [r4, #32]
 8008836:	6323      	str	r3, [r4, #48]	; 0x30
 8008838:	bd10      	pop	{r4, pc}
 800883a:	bf00      	nop
 800883c:	08009369 	.word	0x08009369
 8008840:	0800938b 	.word	0x0800938b
 8008844:	080093c3 	.word	0x080093c3
 8008848:	080093e7 	.word	0x080093e7

0800884c <_cleanup_r>:
 800884c:	4901      	ldr	r1, [pc, #4]	; (8008854 <_cleanup_r+0x8>)
 800884e:	f000 b8af 	b.w	80089b0 <_fwalk_reent>
 8008852:	bf00      	nop
 8008854:	0800878d 	.word	0x0800878d

08008858 <__sfmoreglue>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	1e4a      	subs	r2, r1, #1
 800885c:	2568      	movs	r5, #104	; 0x68
 800885e:	4355      	muls	r5, r2
 8008860:	460e      	mov	r6, r1
 8008862:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008866:	f000 fd15 	bl	8009294 <_malloc_r>
 800886a:	4604      	mov	r4, r0
 800886c:	b140      	cbz	r0, 8008880 <__sfmoreglue+0x28>
 800886e:	2100      	movs	r1, #0
 8008870:	e9c0 1600 	strd	r1, r6, [r0]
 8008874:	300c      	adds	r0, #12
 8008876:	60a0      	str	r0, [r4, #8]
 8008878:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800887c:	f7fe fa18 	bl	8006cb0 <memset>
 8008880:	4620      	mov	r0, r4
 8008882:	bd70      	pop	{r4, r5, r6, pc}

08008884 <__sfp_lock_acquire>:
 8008884:	4801      	ldr	r0, [pc, #4]	; (800888c <__sfp_lock_acquire+0x8>)
 8008886:	f000 b8b8 	b.w	80089fa <__retarget_lock_acquire_recursive>
 800888a:	bf00      	nop
 800888c:	20002888 	.word	0x20002888

08008890 <__sfp_lock_release>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__sfp_lock_release+0x8>)
 8008892:	f000 b8b3 	b.w	80089fc <__retarget_lock_release_recursive>
 8008896:	bf00      	nop
 8008898:	20002888 	.word	0x20002888

0800889c <__sinit_lock_acquire>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__sinit_lock_acquire+0x8>)
 800889e:	f000 b8ac 	b.w	80089fa <__retarget_lock_acquire_recursive>
 80088a2:	bf00      	nop
 80088a4:	20002883 	.word	0x20002883

080088a8 <__sinit_lock_release>:
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <__sinit_lock_release+0x8>)
 80088aa:	f000 b8a7 	b.w	80089fc <__retarget_lock_release_recursive>
 80088ae:	bf00      	nop
 80088b0:	20002883 	.word	0x20002883

080088b4 <__sinit>:
 80088b4:	b510      	push	{r4, lr}
 80088b6:	4604      	mov	r4, r0
 80088b8:	f7ff fff0 	bl	800889c <__sinit_lock_acquire>
 80088bc:	69a3      	ldr	r3, [r4, #24]
 80088be:	b11b      	cbz	r3, 80088c8 <__sinit+0x14>
 80088c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c4:	f7ff bff0 	b.w	80088a8 <__sinit_lock_release>
 80088c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088cc:	6523      	str	r3, [r4, #80]	; 0x50
 80088ce:	4b13      	ldr	r3, [pc, #76]	; (800891c <__sinit+0x68>)
 80088d0:	4a13      	ldr	r2, [pc, #76]	; (8008920 <__sinit+0x6c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80088d6:	42a3      	cmp	r3, r4
 80088d8:	bf04      	itt	eq
 80088da:	2301      	moveq	r3, #1
 80088dc:	61a3      	streq	r3, [r4, #24]
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 f820 	bl	8008924 <__sfp>
 80088e4:	6060      	str	r0, [r4, #4]
 80088e6:	4620      	mov	r0, r4
 80088e8:	f000 f81c 	bl	8008924 <__sfp>
 80088ec:	60a0      	str	r0, [r4, #8]
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 f818 	bl	8008924 <__sfp>
 80088f4:	2200      	movs	r2, #0
 80088f6:	60e0      	str	r0, [r4, #12]
 80088f8:	2104      	movs	r1, #4
 80088fa:	6860      	ldr	r0, [r4, #4]
 80088fc:	f7ff ff82 	bl	8008804 <std>
 8008900:	68a0      	ldr	r0, [r4, #8]
 8008902:	2201      	movs	r2, #1
 8008904:	2109      	movs	r1, #9
 8008906:	f7ff ff7d 	bl	8008804 <std>
 800890a:	68e0      	ldr	r0, [r4, #12]
 800890c:	2202      	movs	r2, #2
 800890e:	2112      	movs	r1, #18
 8008910:	f7ff ff78 	bl	8008804 <std>
 8008914:	2301      	movs	r3, #1
 8008916:	61a3      	str	r3, [r4, #24]
 8008918:	e7d2      	b.n	80088c0 <__sinit+0xc>
 800891a:	bf00      	nop
 800891c:	08009c08 	.word	0x08009c08
 8008920:	0800884d 	.word	0x0800884d

08008924 <__sfp>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	4607      	mov	r7, r0
 8008928:	f7ff ffac 	bl	8008884 <__sfp_lock_acquire>
 800892c:	4b1e      	ldr	r3, [pc, #120]	; (80089a8 <__sfp+0x84>)
 800892e:	681e      	ldr	r6, [r3, #0]
 8008930:	69b3      	ldr	r3, [r6, #24]
 8008932:	b913      	cbnz	r3, 800893a <__sfp+0x16>
 8008934:	4630      	mov	r0, r6
 8008936:	f7ff ffbd 	bl	80088b4 <__sinit>
 800893a:	3648      	adds	r6, #72	; 0x48
 800893c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008940:	3b01      	subs	r3, #1
 8008942:	d503      	bpl.n	800894c <__sfp+0x28>
 8008944:	6833      	ldr	r3, [r6, #0]
 8008946:	b30b      	cbz	r3, 800898c <__sfp+0x68>
 8008948:	6836      	ldr	r6, [r6, #0]
 800894a:	e7f7      	b.n	800893c <__sfp+0x18>
 800894c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008950:	b9d5      	cbnz	r5, 8008988 <__sfp+0x64>
 8008952:	4b16      	ldr	r3, [pc, #88]	; (80089ac <__sfp+0x88>)
 8008954:	60e3      	str	r3, [r4, #12]
 8008956:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800895a:	6665      	str	r5, [r4, #100]	; 0x64
 800895c:	f000 f84c 	bl	80089f8 <__retarget_lock_init_recursive>
 8008960:	f7ff ff96 	bl	8008890 <__sfp_lock_release>
 8008964:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008968:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800896c:	6025      	str	r5, [r4, #0]
 800896e:	61a5      	str	r5, [r4, #24]
 8008970:	2208      	movs	r2, #8
 8008972:	4629      	mov	r1, r5
 8008974:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008978:	f7fe f99a 	bl	8006cb0 <memset>
 800897c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008980:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008984:	4620      	mov	r0, r4
 8008986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008988:	3468      	adds	r4, #104	; 0x68
 800898a:	e7d9      	b.n	8008940 <__sfp+0x1c>
 800898c:	2104      	movs	r1, #4
 800898e:	4638      	mov	r0, r7
 8008990:	f7ff ff62 	bl	8008858 <__sfmoreglue>
 8008994:	4604      	mov	r4, r0
 8008996:	6030      	str	r0, [r6, #0]
 8008998:	2800      	cmp	r0, #0
 800899a:	d1d5      	bne.n	8008948 <__sfp+0x24>
 800899c:	f7ff ff78 	bl	8008890 <__sfp_lock_release>
 80089a0:	230c      	movs	r3, #12
 80089a2:	603b      	str	r3, [r7, #0]
 80089a4:	e7ee      	b.n	8008984 <__sfp+0x60>
 80089a6:	bf00      	nop
 80089a8:	08009c08 	.word	0x08009c08
 80089ac:	ffff0001 	.word	0xffff0001

080089b0 <_fwalk_reent>:
 80089b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b4:	4606      	mov	r6, r0
 80089b6:	4688      	mov	r8, r1
 80089b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089bc:	2700      	movs	r7, #0
 80089be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089c2:	f1b9 0901 	subs.w	r9, r9, #1
 80089c6:	d505      	bpl.n	80089d4 <_fwalk_reent+0x24>
 80089c8:	6824      	ldr	r4, [r4, #0]
 80089ca:	2c00      	cmp	r4, #0
 80089cc:	d1f7      	bne.n	80089be <_fwalk_reent+0xe>
 80089ce:	4638      	mov	r0, r7
 80089d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089d4:	89ab      	ldrh	r3, [r5, #12]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d907      	bls.n	80089ea <_fwalk_reent+0x3a>
 80089da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089de:	3301      	adds	r3, #1
 80089e0:	d003      	beq.n	80089ea <_fwalk_reent+0x3a>
 80089e2:	4629      	mov	r1, r5
 80089e4:	4630      	mov	r0, r6
 80089e6:	47c0      	blx	r8
 80089e8:	4307      	orrs	r7, r0
 80089ea:	3568      	adds	r5, #104	; 0x68
 80089ec:	e7e9      	b.n	80089c2 <_fwalk_reent+0x12>
	...

080089f0 <_localeconv_r>:
 80089f0:	4800      	ldr	r0, [pc, #0]	; (80089f4 <_localeconv_r+0x4>)
 80089f2:	4770      	bx	lr
 80089f4:	20001890 	.word	0x20001890

080089f8 <__retarget_lock_init_recursive>:
 80089f8:	4770      	bx	lr

080089fa <__retarget_lock_acquire_recursive>:
 80089fa:	4770      	bx	lr

080089fc <__retarget_lock_release_recursive>:
 80089fc:	4770      	bx	lr

080089fe <__swhatbuf_r>:
 80089fe:	b570      	push	{r4, r5, r6, lr}
 8008a00:	460e      	mov	r6, r1
 8008a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a06:	2900      	cmp	r1, #0
 8008a08:	b096      	sub	sp, #88	; 0x58
 8008a0a:	4614      	mov	r4, r2
 8008a0c:	461d      	mov	r5, r3
 8008a0e:	da07      	bge.n	8008a20 <__swhatbuf_r+0x22>
 8008a10:	2300      	movs	r3, #0
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	89b3      	ldrh	r3, [r6, #12]
 8008a16:	061a      	lsls	r2, r3, #24
 8008a18:	d410      	bmi.n	8008a3c <__swhatbuf_r+0x3e>
 8008a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a1e:	e00e      	b.n	8008a3e <__swhatbuf_r+0x40>
 8008a20:	466a      	mov	r2, sp
 8008a22:	f000 fd37 	bl	8009494 <_fstat_r>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	dbf2      	blt.n	8008a10 <__swhatbuf_r+0x12>
 8008a2a:	9a01      	ldr	r2, [sp, #4]
 8008a2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a34:	425a      	negs	r2, r3
 8008a36:	415a      	adcs	r2, r3
 8008a38:	602a      	str	r2, [r5, #0]
 8008a3a:	e7ee      	b.n	8008a1a <__swhatbuf_r+0x1c>
 8008a3c:	2340      	movs	r3, #64	; 0x40
 8008a3e:	2000      	movs	r0, #0
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	b016      	add	sp, #88	; 0x58
 8008a44:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a48 <__smakebuf_r>:
 8008a48:	898b      	ldrh	r3, [r1, #12]
 8008a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a4c:	079d      	lsls	r5, r3, #30
 8008a4e:	4606      	mov	r6, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	d507      	bpl.n	8008a64 <__smakebuf_r+0x1c>
 8008a54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	6123      	str	r3, [r4, #16]
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	6163      	str	r3, [r4, #20]
 8008a60:	b002      	add	sp, #8
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	ab01      	add	r3, sp, #4
 8008a66:	466a      	mov	r2, sp
 8008a68:	f7ff ffc9 	bl	80089fe <__swhatbuf_r>
 8008a6c:	9900      	ldr	r1, [sp, #0]
 8008a6e:	4605      	mov	r5, r0
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 fc0f 	bl	8009294 <_malloc_r>
 8008a76:	b948      	cbnz	r0, 8008a8c <__smakebuf_r+0x44>
 8008a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7c:	059a      	lsls	r2, r3, #22
 8008a7e:	d4ef      	bmi.n	8008a60 <__smakebuf_r+0x18>
 8008a80:	f023 0303 	bic.w	r3, r3, #3
 8008a84:	f043 0302 	orr.w	r3, r3, #2
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	e7e3      	b.n	8008a54 <__smakebuf_r+0xc>
 8008a8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ac4 <__smakebuf_r+0x7c>)
 8008a8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	6020      	str	r0, [r4, #0]
 8008a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a98:	81a3      	strh	r3, [r4, #12]
 8008a9a:	9b00      	ldr	r3, [sp, #0]
 8008a9c:	6163      	str	r3, [r4, #20]
 8008a9e:	9b01      	ldr	r3, [sp, #4]
 8008aa0:	6120      	str	r0, [r4, #16]
 8008aa2:	b15b      	cbz	r3, 8008abc <__smakebuf_r+0x74>
 8008aa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 fd05 	bl	80094b8 <_isatty_r>
 8008aae:	b128      	cbz	r0, 8008abc <__smakebuf_r+0x74>
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	f023 0303 	bic.w	r3, r3, #3
 8008ab6:	f043 0301 	orr.w	r3, r3, #1
 8008aba:	81a3      	strh	r3, [r4, #12]
 8008abc:	89a0      	ldrh	r0, [r4, #12]
 8008abe:	4305      	orrs	r5, r0
 8008ac0:	81a5      	strh	r5, [r4, #12]
 8008ac2:	e7cd      	b.n	8008a60 <__smakebuf_r+0x18>
 8008ac4:	0800884d 	.word	0x0800884d

08008ac8 <malloc>:
 8008ac8:	4b02      	ldr	r3, [pc, #8]	; (8008ad4 <malloc+0xc>)
 8008aca:	4601      	mov	r1, r0
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	f000 bbe1 	b.w	8009294 <_malloc_r>
 8008ad2:	bf00      	nop
 8008ad4:	2000173c 	.word	0x2000173c

08008ad8 <_Balloc>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008adc:	4604      	mov	r4, r0
 8008ade:	460d      	mov	r5, r1
 8008ae0:	b976      	cbnz	r6, 8008b00 <_Balloc+0x28>
 8008ae2:	2010      	movs	r0, #16
 8008ae4:	f7ff fff0 	bl	8008ac8 <malloc>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6260      	str	r0, [r4, #36]	; 0x24
 8008aec:	b920      	cbnz	r0, 8008af8 <_Balloc+0x20>
 8008aee:	4b18      	ldr	r3, [pc, #96]	; (8008b50 <_Balloc+0x78>)
 8008af0:	4818      	ldr	r0, [pc, #96]	; (8008b54 <_Balloc+0x7c>)
 8008af2:	2166      	movs	r1, #102	; 0x66
 8008af4:	f000 fc8e 	bl	8009414 <__assert_func>
 8008af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008afc:	6006      	str	r6, [r0, #0]
 8008afe:	60c6      	str	r6, [r0, #12]
 8008b00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b02:	68f3      	ldr	r3, [r6, #12]
 8008b04:	b183      	cbz	r3, 8008b28 <_Balloc+0x50>
 8008b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b0e:	b9b8      	cbnz	r0, 8008b40 <_Balloc+0x68>
 8008b10:	2101      	movs	r1, #1
 8008b12:	fa01 f605 	lsl.w	r6, r1, r5
 8008b16:	1d72      	adds	r2, r6, #5
 8008b18:	0092      	lsls	r2, r2, #2
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fb5a 	bl	80091d4 <_calloc_r>
 8008b20:	b160      	cbz	r0, 8008b3c <_Balloc+0x64>
 8008b22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b26:	e00e      	b.n	8008b46 <_Balloc+0x6e>
 8008b28:	2221      	movs	r2, #33	; 0x21
 8008b2a:	2104      	movs	r1, #4
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fb51 	bl	80091d4 <_calloc_r>
 8008b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b34:	60f0      	str	r0, [r6, #12]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e4      	bne.n	8008b06 <_Balloc+0x2e>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
 8008b40:	6802      	ldr	r2, [r0, #0]
 8008b42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b46:	2300      	movs	r3, #0
 8008b48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b4c:	e7f7      	b.n	8008b3e <_Balloc+0x66>
 8008b4e:	bf00      	nop
 8008b50:	08009c4d 	.word	0x08009c4d
 8008b54:	08009d34 	.word	0x08009d34

08008b58 <_Bfree>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	b976      	cbnz	r6, 8008b80 <_Bfree+0x28>
 8008b62:	2010      	movs	r0, #16
 8008b64:	f7ff ffb0 	bl	8008ac8 <malloc>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6268      	str	r0, [r5, #36]	; 0x24
 8008b6c:	b920      	cbnz	r0, 8008b78 <_Bfree+0x20>
 8008b6e:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <_Bfree+0x3c>)
 8008b70:	4809      	ldr	r0, [pc, #36]	; (8008b98 <_Bfree+0x40>)
 8008b72:	218a      	movs	r1, #138	; 0x8a
 8008b74:	f000 fc4e 	bl	8009414 <__assert_func>
 8008b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b7c:	6006      	str	r6, [r0, #0]
 8008b7e:	60c6      	str	r6, [r0, #12]
 8008b80:	b13c      	cbz	r4, 8008b92 <_Bfree+0x3a>
 8008b82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b84:	6862      	ldr	r2, [r4, #4]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b8c:	6021      	str	r1, [r4, #0]
 8008b8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	08009c4d 	.word	0x08009c4d
 8008b98:	08009d34 	.word	0x08009d34

08008b9c <__multadd>:
 8008b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba0:	690e      	ldr	r6, [r1, #16]
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	4698      	mov	r8, r3
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	f101 0014 	add.w	r0, r1, #20
 8008bac:	2300      	movs	r3, #0
 8008bae:	6805      	ldr	r5, [r0, #0]
 8008bb0:	b2a9      	uxth	r1, r5
 8008bb2:	fb02 8101 	mla	r1, r2, r1, r8
 8008bb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008bba:	0c2d      	lsrs	r5, r5, #16
 8008bbc:	fb02 c505 	mla	r5, r2, r5, ip
 8008bc0:	b289      	uxth	r1, r1
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008bc8:	429e      	cmp	r6, r3
 8008bca:	f840 1b04 	str.w	r1, [r0], #4
 8008bce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008bd2:	dcec      	bgt.n	8008bae <__multadd+0x12>
 8008bd4:	f1b8 0f00 	cmp.w	r8, #0
 8008bd8:	d022      	beq.n	8008c20 <__multadd+0x84>
 8008bda:	68a3      	ldr	r3, [r4, #8]
 8008bdc:	42b3      	cmp	r3, r6
 8008bde:	dc19      	bgt.n	8008c14 <__multadd+0x78>
 8008be0:	6861      	ldr	r1, [r4, #4]
 8008be2:	4638      	mov	r0, r7
 8008be4:	3101      	adds	r1, #1
 8008be6:	f7ff ff77 	bl	8008ad8 <_Balloc>
 8008bea:	4605      	mov	r5, r0
 8008bec:	b928      	cbnz	r0, 8008bfa <__multadd+0x5e>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	4b0d      	ldr	r3, [pc, #52]	; (8008c28 <__multadd+0x8c>)
 8008bf2:	480e      	ldr	r0, [pc, #56]	; (8008c2c <__multadd+0x90>)
 8008bf4:	21b5      	movs	r1, #181	; 0xb5
 8008bf6:	f000 fc0d 	bl	8009414 <__assert_func>
 8008bfa:	6922      	ldr	r2, [r4, #16]
 8008bfc:	3202      	adds	r2, #2
 8008bfe:	f104 010c 	add.w	r1, r4, #12
 8008c02:	0092      	lsls	r2, r2, #2
 8008c04:	300c      	adds	r0, #12
 8008c06:	f7fe f82b 	bl	8006c60 <memcpy>
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	f7ff ffa3 	bl	8008b58 <_Bfree>
 8008c12:	462c      	mov	r4, r5
 8008c14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008c18:	3601      	adds	r6, #1
 8008c1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008c1e:	6126      	str	r6, [r4, #16]
 8008c20:	4620      	mov	r0, r4
 8008c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c26:	bf00      	nop
 8008c28:	08009cc3 	.word	0x08009cc3
 8008c2c:	08009d34 	.word	0x08009d34

08008c30 <__hi0bits>:
 8008c30:	0c03      	lsrs	r3, r0, #16
 8008c32:	041b      	lsls	r3, r3, #16
 8008c34:	b9d3      	cbnz	r3, 8008c6c <__hi0bits+0x3c>
 8008c36:	0400      	lsls	r0, r0, #16
 8008c38:	2310      	movs	r3, #16
 8008c3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c3e:	bf04      	itt	eq
 8008c40:	0200      	lsleq	r0, r0, #8
 8008c42:	3308      	addeq	r3, #8
 8008c44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c48:	bf04      	itt	eq
 8008c4a:	0100      	lsleq	r0, r0, #4
 8008c4c:	3304      	addeq	r3, #4
 8008c4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c52:	bf04      	itt	eq
 8008c54:	0080      	lsleq	r0, r0, #2
 8008c56:	3302      	addeq	r3, #2
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	db05      	blt.n	8008c68 <__hi0bits+0x38>
 8008c5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c60:	f103 0301 	add.w	r3, r3, #1
 8008c64:	bf08      	it	eq
 8008c66:	2320      	moveq	r3, #32
 8008c68:	4618      	mov	r0, r3
 8008c6a:	4770      	bx	lr
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	e7e4      	b.n	8008c3a <__hi0bits+0xa>

08008c70 <__lo0bits>:
 8008c70:	6803      	ldr	r3, [r0, #0]
 8008c72:	f013 0207 	ands.w	r2, r3, #7
 8008c76:	4601      	mov	r1, r0
 8008c78:	d00b      	beq.n	8008c92 <__lo0bits+0x22>
 8008c7a:	07da      	lsls	r2, r3, #31
 8008c7c:	d424      	bmi.n	8008cc8 <__lo0bits+0x58>
 8008c7e:	0798      	lsls	r0, r3, #30
 8008c80:	bf49      	itett	mi
 8008c82:	085b      	lsrmi	r3, r3, #1
 8008c84:	089b      	lsrpl	r3, r3, #2
 8008c86:	2001      	movmi	r0, #1
 8008c88:	600b      	strmi	r3, [r1, #0]
 8008c8a:	bf5c      	itt	pl
 8008c8c:	600b      	strpl	r3, [r1, #0]
 8008c8e:	2002      	movpl	r0, #2
 8008c90:	4770      	bx	lr
 8008c92:	b298      	uxth	r0, r3
 8008c94:	b9b0      	cbnz	r0, 8008cc4 <__lo0bits+0x54>
 8008c96:	0c1b      	lsrs	r3, r3, #16
 8008c98:	2010      	movs	r0, #16
 8008c9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c9e:	bf04      	itt	eq
 8008ca0:	0a1b      	lsreq	r3, r3, #8
 8008ca2:	3008      	addeq	r0, #8
 8008ca4:	071a      	lsls	r2, r3, #28
 8008ca6:	bf04      	itt	eq
 8008ca8:	091b      	lsreq	r3, r3, #4
 8008caa:	3004      	addeq	r0, #4
 8008cac:	079a      	lsls	r2, r3, #30
 8008cae:	bf04      	itt	eq
 8008cb0:	089b      	lsreq	r3, r3, #2
 8008cb2:	3002      	addeq	r0, #2
 8008cb4:	07da      	lsls	r2, r3, #31
 8008cb6:	d403      	bmi.n	8008cc0 <__lo0bits+0x50>
 8008cb8:	085b      	lsrs	r3, r3, #1
 8008cba:	f100 0001 	add.w	r0, r0, #1
 8008cbe:	d005      	beq.n	8008ccc <__lo0bits+0x5c>
 8008cc0:	600b      	str	r3, [r1, #0]
 8008cc2:	4770      	bx	lr
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	e7e8      	b.n	8008c9a <__lo0bits+0x2a>
 8008cc8:	2000      	movs	r0, #0
 8008cca:	4770      	bx	lr
 8008ccc:	2020      	movs	r0, #32
 8008cce:	4770      	bx	lr

08008cd0 <__i2b>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	f7ff feff 	bl	8008ad8 <_Balloc>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	b928      	cbnz	r0, 8008cea <__i2b+0x1a>
 8008cde:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <__i2b+0x24>)
 8008ce0:	4805      	ldr	r0, [pc, #20]	; (8008cf8 <__i2b+0x28>)
 8008ce2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ce6:	f000 fb95 	bl	8009414 <__assert_func>
 8008cea:	2301      	movs	r3, #1
 8008cec:	6144      	str	r4, [r0, #20]
 8008cee:	6103      	str	r3, [r0, #16]
 8008cf0:	bd10      	pop	{r4, pc}
 8008cf2:	bf00      	nop
 8008cf4:	08009cc3 	.word	0x08009cc3
 8008cf8:	08009d34 	.word	0x08009d34

08008cfc <__multiply>:
 8008cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d00:	4614      	mov	r4, r2
 8008d02:	690a      	ldr	r2, [r1, #16]
 8008d04:	6923      	ldr	r3, [r4, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	bfb8      	it	lt
 8008d0a:	460b      	movlt	r3, r1
 8008d0c:	460d      	mov	r5, r1
 8008d0e:	bfbc      	itt	lt
 8008d10:	4625      	movlt	r5, r4
 8008d12:	461c      	movlt	r4, r3
 8008d14:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008d18:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d1c:	68ab      	ldr	r3, [r5, #8]
 8008d1e:	6869      	ldr	r1, [r5, #4]
 8008d20:	eb0a 0709 	add.w	r7, sl, r9
 8008d24:	42bb      	cmp	r3, r7
 8008d26:	b085      	sub	sp, #20
 8008d28:	bfb8      	it	lt
 8008d2a:	3101      	addlt	r1, #1
 8008d2c:	f7ff fed4 	bl	8008ad8 <_Balloc>
 8008d30:	b930      	cbnz	r0, 8008d40 <__multiply+0x44>
 8008d32:	4602      	mov	r2, r0
 8008d34:	4b42      	ldr	r3, [pc, #264]	; (8008e40 <__multiply+0x144>)
 8008d36:	4843      	ldr	r0, [pc, #268]	; (8008e44 <__multiply+0x148>)
 8008d38:	f240 115d 	movw	r1, #349	; 0x15d
 8008d3c:	f000 fb6a 	bl	8009414 <__assert_func>
 8008d40:	f100 0614 	add.w	r6, r0, #20
 8008d44:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008d48:	4633      	mov	r3, r6
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	4543      	cmp	r3, r8
 8008d4e:	d31e      	bcc.n	8008d8e <__multiply+0x92>
 8008d50:	f105 0c14 	add.w	ip, r5, #20
 8008d54:	f104 0314 	add.w	r3, r4, #20
 8008d58:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008d5c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008d60:	9202      	str	r2, [sp, #8]
 8008d62:	ebac 0205 	sub.w	r2, ip, r5
 8008d66:	3a15      	subs	r2, #21
 8008d68:	f022 0203 	bic.w	r2, r2, #3
 8008d6c:	3204      	adds	r2, #4
 8008d6e:	f105 0115 	add.w	r1, r5, #21
 8008d72:	458c      	cmp	ip, r1
 8008d74:	bf38      	it	cc
 8008d76:	2204      	movcc	r2, #4
 8008d78:	9201      	str	r2, [sp, #4]
 8008d7a:	9a02      	ldr	r2, [sp, #8]
 8008d7c:	9303      	str	r3, [sp, #12]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d808      	bhi.n	8008d94 <__multiply+0x98>
 8008d82:	2f00      	cmp	r7, #0
 8008d84:	dc55      	bgt.n	8008e32 <__multiply+0x136>
 8008d86:	6107      	str	r7, [r0, #16]
 8008d88:	b005      	add	sp, #20
 8008d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8e:	f843 2b04 	str.w	r2, [r3], #4
 8008d92:	e7db      	b.n	8008d4c <__multiply+0x50>
 8008d94:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d98:	f1ba 0f00 	cmp.w	sl, #0
 8008d9c:	d020      	beq.n	8008de0 <__multiply+0xe4>
 8008d9e:	f105 0e14 	add.w	lr, r5, #20
 8008da2:	46b1      	mov	r9, r6
 8008da4:	2200      	movs	r2, #0
 8008da6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008daa:	f8d9 b000 	ldr.w	fp, [r9]
 8008dae:	b2a1      	uxth	r1, r4
 8008db0:	fa1f fb8b 	uxth.w	fp, fp
 8008db4:	fb0a b101 	mla	r1, sl, r1, fp
 8008db8:	4411      	add	r1, r2
 8008dba:	f8d9 2000 	ldr.w	r2, [r9]
 8008dbe:	0c24      	lsrs	r4, r4, #16
 8008dc0:	0c12      	lsrs	r2, r2, #16
 8008dc2:	fb0a 2404 	mla	r4, sl, r4, r2
 8008dc6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008dca:	b289      	uxth	r1, r1
 8008dcc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008dd0:	45f4      	cmp	ip, lr
 8008dd2:	f849 1b04 	str.w	r1, [r9], #4
 8008dd6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008dda:	d8e4      	bhi.n	8008da6 <__multiply+0xaa>
 8008ddc:	9901      	ldr	r1, [sp, #4]
 8008dde:	5072      	str	r2, [r6, r1]
 8008de0:	9a03      	ldr	r2, [sp, #12]
 8008de2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008de6:	3304      	adds	r3, #4
 8008de8:	f1b9 0f00 	cmp.w	r9, #0
 8008dec:	d01f      	beq.n	8008e2e <__multiply+0x132>
 8008dee:	6834      	ldr	r4, [r6, #0]
 8008df0:	f105 0114 	add.w	r1, r5, #20
 8008df4:	46b6      	mov	lr, r6
 8008df6:	f04f 0a00 	mov.w	sl, #0
 8008dfa:	880a      	ldrh	r2, [r1, #0]
 8008dfc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008e00:	fb09 b202 	mla	r2, r9, r2, fp
 8008e04:	4492      	add	sl, r2
 8008e06:	b2a4      	uxth	r4, r4
 8008e08:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008e0c:	f84e 4b04 	str.w	r4, [lr], #4
 8008e10:	f851 4b04 	ldr.w	r4, [r1], #4
 8008e14:	f8be 2000 	ldrh.w	r2, [lr]
 8008e18:	0c24      	lsrs	r4, r4, #16
 8008e1a:	fb09 2404 	mla	r4, r9, r4, r2
 8008e1e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008e22:	458c      	cmp	ip, r1
 8008e24:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008e28:	d8e7      	bhi.n	8008dfa <__multiply+0xfe>
 8008e2a:	9a01      	ldr	r2, [sp, #4]
 8008e2c:	50b4      	str	r4, [r6, r2]
 8008e2e:	3604      	adds	r6, #4
 8008e30:	e7a3      	b.n	8008d7a <__multiply+0x7e>
 8008e32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1a5      	bne.n	8008d86 <__multiply+0x8a>
 8008e3a:	3f01      	subs	r7, #1
 8008e3c:	e7a1      	b.n	8008d82 <__multiply+0x86>
 8008e3e:	bf00      	nop
 8008e40:	08009cc3 	.word	0x08009cc3
 8008e44:	08009d34 	.word	0x08009d34

08008e48 <__pow5mult>:
 8008e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e4c:	4615      	mov	r5, r2
 8008e4e:	f012 0203 	ands.w	r2, r2, #3
 8008e52:	4606      	mov	r6, r0
 8008e54:	460f      	mov	r7, r1
 8008e56:	d007      	beq.n	8008e68 <__pow5mult+0x20>
 8008e58:	4c25      	ldr	r4, [pc, #148]	; (8008ef0 <__pow5mult+0xa8>)
 8008e5a:	3a01      	subs	r2, #1
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e62:	f7ff fe9b 	bl	8008b9c <__multadd>
 8008e66:	4607      	mov	r7, r0
 8008e68:	10ad      	asrs	r5, r5, #2
 8008e6a:	d03d      	beq.n	8008ee8 <__pow5mult+0xa0>
 8008e6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e6e:	b97c      	cbnz	r4, 8008e90 <__pow5mult+0x48>
 8008e70:	2010      	movs	r0, #16
 8008e72:	f7ff fe29 	bl	8008ac8 <malloc>
 8008e76:	4602      	mov	r2, r0
 8008e78:	6270      	str	r0, [r6, #36]	; 0x24
 8008e7a:	b928      	cbnz	r0, 8008e88 <__pow5mult+0x40>
 8008e7c:	4b1d      	ldr	r3, [pc, #116]	; (8008ef4 <__pow5mult+0xac>)
 8008e7e:	481e      	ldr	r0, [pc, #120]	; (8008ef8 <__pow5mult+0xb0>)
 8008e80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e84:	f000 fac6 	bl	8009414 <__assert_func>
 8008e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e8c:	6004      	str	r4, [r0, #0]
 8008e8e:	60c4      	str	r4, [r0, #12]
 8008e90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e98:	b94c      	cbnz	r4, 8008eae <__pow5mult+0x66>
 8008e9a:	f240 2171 	movw	r1, #625	; 0x271
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7ff ff16 	bl	8008cd0 <__i2b>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008eaa:	4604      	mov	r4, r0
 8008eac:	6003      	str	r3, [r0, #0]
 8008eae:	f04f 0900 	mov.w	r9, #0
 8008eb2:	07eb      	lsls	r3, r5, #31
 8008eb4:	d50a      	bpl.n	8008ecc <__pow5mult+0x84>
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f7ff ff1e 	bl	8008cfc <__multiply>
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f7ff fe47 	bl	8008b58 <_Bfree>
 8008eca:	4647      	mov	r7, r8
 8008ecc:	106d      	asrs	r5, r5, #1
 8008ece:	d00b      	beq.n	8008ee8 <__pow5mult+0xa0>
 8008ed0:	6820      	ldr	r0, [r4, #0]
 8008ed2:	b938      	cbnz	r0, 8008ee4 <__pow5mult+0x9c>
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff ff0f 	bl	8008cfc <__multiply>
 8008ede:	6020      	str	r0, [r4, #0]
 8008ee0:	f8c0 9000 	str.w	r9, [r0]
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	e7e4      	b.n	8008eb2 <__pow5mult+0x6a>
 8008ee8:	4638      	mov	r0, r7
 8008eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eee:	bf00      	nop
 8008ef0:	08009e88 	.word	0x08009e88
 8008ef4:	08009c4d 	.word	0x08009c4d
 8008ef8:	08009d34 	.word	0x08009d34

08008efc <__lshift>:
 8008efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	460c      	mov	r4, r1
 8008f02:	6849      	ldr	r1, [r1, #4]
 8008f04:	6923      	ldr	r3, [r4, #16]
 8008f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	4691      	mov	r9, r2
 8008f10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f14:	f108 0601 	add.w	r6, r8, #1
 8008f18:	42b3      	cmp	r3, r6
 8008f1a:	db0b      	blt.n	8008f34 <__lshift+0x38>
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f7ff fddb 	bl	8008ad8 <_Balloc>
 8008f22:	4605      	mov	r5, r0
 8008f24:	b948      	cbnz	r0, 8008f3a <__lshift+0x3e>
 8008f26:	4602      	mov	r2, r0
 8008f28:	4b28      	ldr	r3, [pc, #160]	; (8008fcc <__lshift+0xd0>)
 8008f2a:	4829      	ldr	r0, [pc, #164]	; (8008fd0 <__lshift+0xd4>)
 8008f2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f30:	f000 fa70 	bl	8009414 <__assert_func>
 8008f34:	3101      	adds	r1, #1
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	e7ee      	b.n	8008f18 <__lshift+0x1c>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f100 0114 	add.w	r1, r0, #20
 8008f40:	f100 0210 	add.w	r2, r0, #16
 8008f44:	4618      	mov	r0, r3
 8008f46:	4553      	cmp	r3, sl
 8008f48:	db33      	blt.n	8008fb2 <__lshift+0xb6>
 8008f4a:	6920      	ldr	r0, [r4, #16]
 8008f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f50:	f104 0314 	add.w	r3, r4, #20
 8008f54:	f019 091f 	ands.w	r9, r9, #31
 8008f58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f60:	d02b      	beq.n	8008fba <__lshift+0xbe>
 8008f62:	f1c9 0e20 	rsb	lr, r9, #32
 8008f66:	468a      	mov	sl, r1
 8008f68:	2200      	movs	r2, #0
 8008f6a:	6818      	ldr	r0, [r3, #0]
 8008f6c:	fa00 f009 	lsl.w	r0, r0, r9
 8008f70:	4302      	orrs	r2, r0
 8008f72:	f84a 2b04 	str.w	r2, [sl], #4
 8008f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7a:	459c      	cmp	ip, r3
 8008f7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f80:	d8f3      	bhi.n	8008f6a <__lshift+0x6e>
 8008f82:	ebac 0304 	sub.w	r3, ip, r4
 8008f86:	3b15      	subs	r3, #21
 8008f88:	f023 0303 	bic.w	r3, r3, #3
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	f104 0015 	add.w	r0, r4, #21
 8008f92:	4584      	cmp	ip, r0
 8008f94:	bf38      	it	cc
 8008f96:	2304      	movcc	r3, #4
 8008f98:	50ca      	str	r2, [r1, r3]
 8008f9a:	b10a      	cbz	r2, 8008fa0 <__lshift+0xa4>
 8008f9c:	f108 0602 	add.w	r6, r8, #2
 8008fa0:	3e01      	subs	r6, #1
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	612e      	str	r6, [r5, #16]
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	f7ff fdd6 	bl	8008b58 <_Bfree>
 8008fac:	4628      	mov	r0, r5
 8008fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	e7c5      	b.n	8008f46 <__lshift+0x4a>
 8008fba:	3904      	subs	r1, #4
 8008fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fc4:	459c      	cmp	ip, r3
 8008fc6:	d8f9      	bhi.n	8008fbc <__lshift+0xc0>
 8008fc8:	e7ea      	b.n	8008fa0 <__lshift+0xa4>
 8008fca:	bf00      	nop
 8008fcc:	08009cc3 	.word	0x08009cc3
 8008fd0:	08009d34 	.word	0x08009d34

08008fd4 <__mcmp>:
 8008fd4:	b530      	push	{r4, r5, lr}
 8008fd6:	6902      	ldr	r2, [r0, #16]
 8008fd8:	690c      	ldr	r4, [r1, #16]
 8008fda:	1b12      	subs	r2, r2, r4
 8008fdc:	d10e      	bne.n	8008ffc <__mcmp+0x28>
 8008fde:	f100 0314 	add.w	r3, r0, #20
 8008fe2:	3114      	adds	r1, #20
 8008fe4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008fe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008fec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ff0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ff4:	42a5      	cmp	r5, r4
 8008ff6:	d003      	beq.n	8009000 <__mcmp+0x2c>
 8008ff8:	d305      	bcc.n	8009006 <__mcmp+0x32>
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	bd30      	pop	{r4, r5, pc}
 8009000:	4283      	cmp	r3, r0
 8009002:	d3f3      	bcc.n	8008fec <__mcmp+0x18>
 8009004:	e7fa      	b.n	8008ffc <__mcmp+0x28>
 8009006:	f04f 32ff 	mov.w	r2, #4294967295
 800900a:	e7f7      	b.n	8008ffc <__mcmp+0x28>

0800900c <__mdiff>:
 800900c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	460c      	mov	r4, r1
 8009012:	4606      	mov	r6, r0
 8009014:	4611      	mov	r1, r2
 8009016:	4620      	mov	r0, r4
 8009018:	4617      	mov	r7, r2
 800901a:	f7ff ffdb 	bl	8008fd4 <__mcmp>
 800901e:	1e05      	subs	r5, r0, #0
 8009020:	d110      	bne.n	8009044 <__mdiff+0x38>
 8009022:	4629      	mov	r1, r5
 8009024:	4630      	mov	r0, r6
 8009026:	f7ff fd57 	bl	8008ad8 <_Balloc>
 800902a:	b930      	cbnz	r0, 800903a <__mdiff+0x2e>
 800902c:	4b39      	ldr	r3, [pc, #228]	; (8009114 <__mdiff+0x108>)
 800902e:	4602      	mov	r2, r0
 8009030:	f240 2132 	movw	r1, #562	; 0x232
 8009034:	4838      	ldr	r0, [pc, #224]	; (8009118 <__mdiff+0x10c>)
 8009036:	f000 f9ed 	bl	8009414 <__assert_func>
 800903a:	2301      	movs	r3, #1
 800903c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009044:	bfa4      	itt	ge
 8009046:	463b      	movge	r3, r7
 8009048:	4627      	movge	r7, r4
 800904a:	4630      	mov	r0, r6
 800904c:	6879      	ldr	r1, [r7, #4]
 800904e:	bfa6      	itte	ge
 8009050:	461c      	movge	r4, r3
 8009052:	2500      	movge	r5, #0
 8009054:	2501      	movlt	r5, #1
 8009056:	f7ff fd3f 	bl	8008ad8 <_Balloc>
 800905a:	b920      	cbnz	r0, 8009066 <__mdiff+0x5a>
 800905c:	4b2d      	ldr	r3, [pc, #180]	; (8009114 <__mdiff+0x108>)
 800905e:	4602      	mov	r2, r0
 8009060:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009064:	e7e6      	b.n	8009034 <__mdiff+0x28>
 8009066:	693e      	ldr	r6, [r7, #16]
 8009068:	60c5      	str	r5, [r0, #12]
 800906a:	6925      	ldr	r5, [r4, #16]
 800906c:	f107 0114 	add.w	r1, r7, #20
 8009070:	f104 0914 	add.w	r9, r4, #20
 8009074:	f100 0e14 	add.w	lr, r0, #20
 8009078:	f107 0210 	add.w	r2, r7, #16
 800907c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009080:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009084:	46f2      	mov	sl, lr
 8009086:	2700      	movs	r7, #0
 8009088:	f859 3b04 	ldr.w	r3, [r9], #4
 800908c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009090:	fa1f f883 	uxth.w	r8, r3
 8009094:	fa17 f78b 	uxtah	r7, r7, fp
 8009098:	0c1b      	lsrs	r3, r3, #16
 800909a:	eba7 0808 	sub.w	r8, r7, r8
 800909e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80090a6:	fa1f f888 	uxth.w	r8, r8
 80090aa:	141f      	asrs	r7, r3, #16
 80090ac:	454d      	cmp	r5, r9
 80090ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090b2:	f84a 3b04 	str.w	r3, [sl], #4
 80090b6:	d8e7      	bhi.n	8009088 <__mdiff+0x7c>
 80090b8:	1b2b      	subs	r3, r5, r4
 80090ba:	3b15      	subs	r3, #21
 80090bc:	f023 0303 	bic.w	r3, r3, #3
 80090c0:	3304      	adds	r3, #4
 80090c2:	3415      	adds	r4, #21
 80090c4:	42a5      	cmp	r5, r4
 80090c6:	bf38      	it	cc
 80090c8:	2304      	movcc	r3, #4
 80090ca:	4419      	add	r1, r3
 80090cc:	4473      	add	r3, lr
 80090ce:	469e      	mov	lr, r3
 80090d0:	460d      	mov	r5, r1
 80090d2:	4565      	cmp	r5, ip
 80090d4:	d30e      	bcc.n	80090f4 <__mdiff+0xe8>
 80090d6:	f10c 0203 	add.w	r2, ip, #3
 80090da:	1a52      	subs	r2, r2, r1
 80090dc:	f022 0203 	bic.w	r2, r2, #3
 80090e0:	3903      	subs	r1, #3
 80090e2:	458c      	cmp	ip, r1
 80090e4:	bf38      	it	cc
 80090e6:	2200      	movcc	r2, #0
 80090e8:	441a      	add	r2, r3
 80090ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80090ee:	b17b      	cbz	r3, 8009110 <__mdiff+0x104>
 80090f0:	6106      	str	r6, [r0, #16]
 80090f2:	e7a5      	b.n	8009040 <__mdiff+0x34>
 80090f4:	f855 8b04 	ldr.w	r8, [r5], #4
 80090f8:	fa17 f488 	uxtah	r4, r7, r8
 80090fc:	1422      	asrs	r2, r4, #16
 80090fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009102:	b2a4      	uxth	r4, r4
 8009104:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009108:	f84e 4b04 	str.w	r4, [lr], #4
 800910c:	1417      	asrs	r7, r2, #16
 800910e:	e7e0      	b.n	80090d2 <__mdiff+0xc6>
 8009110:	3e01      	subs	r6, #1
 8009112:	e7ea      	b.n	80090ea <__mdiff+0xde>
 8009114:	08009cc3 	.word	0x08009cc3
 8009118:	08009d34 	.word	0x08009d34

0800911c <__d2b>:
 800911c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009120:	4689      	mov	r9, r1
 8009122:	2101      	movs	r1, #1
 8009124:	ec57 6b10 	vmov	r6, r7, d0
 8009128:	4690      	mov	r8, r2
 800912a:	f7ff fcd5 	bl	8008ad8 <_Balloc>
 800912e:	4604      	mov	r4, r0
 8009130:	b930      	cbnz	r0, 8009140 <__d2b+0x24>
 8009132:	4602      	mov	r2, r0
 8009134:	4b25      	ldr	r3, [pc, #148]	; (80091cc <__d2b+0xb0>)
 8009136:	4826      	ldr	r0, [pc, #152]	; (80091d0 <__d2b+0xb4>)
 8009138:	f240 310a 	movw	r1, #778	; 0x30a
 800913c:	f000 f96a 	bl	8009414 <__assert_func>
 8009140:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009144:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009148:	bb35      	cbnz	r5, 8009198 <__d2b+0x7c>
 800914a:	2e00      	cmp	r6, #0
 800914c:	9301      	str	r3, [sp, #4]
 800914e:	d028      	beq.n	80091a2 <__d2b+0x86>
 8009150:	4668      	mov	r0, sp
 8009152:	9600      	str	r6, [sp, #0]
 8009154:	f7ff fd8c 	bl	8008c70 <__lo0bits>
 8009158:	9900      	ldr	r1, [sp, #0]
 800915a:	b300      	cbz	r0, 800919e <__d2b+0x82>
 800915c:	9a01      	ldr	r2, [sp, #4]
 800915e:	f1c0 0320 	rsb	r3, r0, #32
 8009162:	fa02 f303 	lsl.w	r3, r2, r3
 8009166:	430b      	orrs	r3, r1
 8009168:	40c2      	lsrs	r2, r0
 800916a:	6163      	str	r3, [r4, #20]
 800916c:	9201      	str	r2, [sp, #4]
 800916e:	9b01      	ldr	r3, [sp, #4]
 8009170:	61a3      	str	r3, [r4, #24]
 8009172:	2b00      	cmp	r3, #0
 8009174:	bf14      	ite	ne
 8009176:	2202      	movne	r2, #2
 8009178:	2201      	moveq	r2, #1
 800917a:	6122      	str	r2, [r4, #16]
 800917c:	b1d5      	cbz	r5, 80091b4 <__d2b+0x98>
 800917e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009182:	4405      	add	r5, r0
 8009184:	f8c9 5000 	str.w	r5, [r9]
 8009188:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800918c:	f8c8 0000 	str.w	r0, [r8]
 8009190:	4620      	mov	r0, r4
 8009192:	b003      	add	sp, #12
 8009194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800919c:	e7d5      	b.n	800914a <__d2b+0x2e>
 800919e:	6161      	str	r1, [r4, #20]
 80091a0:	e7e5      	b.n	800916e <__d2b+0x52>
 80091a2:	a801      	add	r0, sp, #4
 80091a4:	f7ff fd64 	bl	8008c70 <__lo0bits>
 80091a8:	9b01      	ldr	r3, [sp, #4]
 80091aa:	6163      	str	r3, [r4, #20]
 80091ac:	2201      	movs	r2, #1
 80091ae:	6122      	str	r2, [r4, #16]
 80091b0:	3020      	adds	r0, #32
 80091b2:	e7e3      	b.n	800917c <__d2b+0x60>
 80091b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091bc:	f8c9 0000 	str.w	r0, [r9]
 80091c0:	6918      	ldr	r0, [r3, #16]
 80091c2:	f7ff fd35 	bl	8008c30 <__hi0bits>
 80091c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091ca:	e7df      	b.n	800918c <__d2b+0x70>
 80091cc:	08009cc3 	.word	0x08009cc3
 80091d0:	08009d34 	.word	0x08009d34

080091d4 <_calloc_r>:
 80091d4:	b513      	push	{r0, r1, r4, lr}
 80091d6:	434a      	muls	r2, r1
 80091d8:	4611      	mov	r1, r2
 80091da:	9201      	str	r2, [sp, #4]
 80091dc:	f000 f85a 	bl	8009294 <_malloc_r>
 80091e0:	4604      	mov	r4, r0
 80091e2:	b118      	cbz	r0, 80091ec <_calloc_r+0x18>
 80091e4:	9a01      	ldr	r2, [sp, #4]
 80091e6:	2100      	movs	r1, #0
 80091e8:	f7fd fd62 	bl	8006cb0 <memset>
 80091ec:	4620      	mov	r0, r4
 80091ee:	b002      	add	sp, #8
 80091f0:	bd10      	pop	{r4, pc}
	...

080091f4 <_free_r>:
 80091f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091f6:	2900      	cmp	r1, #0
 80091f8:	d048      	beq.n	800928c <_free_r+0x98>
 80091fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091fe:	9001      	str	r0, [sp, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	f1a1 0404 	sub.w	r4, r1, #4
 8009206:	bfb8      	it	lt
 8009208:	18e4      	addlt	r4, r4, r3
 800920a:	f000 f989 	bl	8009520 <__malloc_lock>
 800920e:	4a20      	ldr	r2, [pc, #128]	; (8009290 <_free_r+0x9c>)
 8009210:	9801      	ldr	r0, [sp, #4]
 8009212:	6813      	ldr	r3, [r2, #0]
 8009214:	4615      	mov	r5, r2
 8009216:	b933      	cbnz	r3, 8009226 <_free_r+0x32>
 8009218:	6063      	str	r3, [r4, #4]
 800921a:	6014      	str	r4, [r2, #0]
 800921c:	b003      	add	sp, #12
 800921e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009222:	f000 b983 	b.w	800952c <__malloc_unlock>
 8009226:	42a3      	cmp	r3, r4
 8009228:	d90b      	bls.n	8009242 <_free_r+0x4e>
 800922a:	6821      	ldr	r1, [r4, #0]
 800922c:	1862      	adds	r2, r4, r1
 800922e:	4293      	cmp	r3, r2
 8009230:	bf04      	itt	eq
 8009232:	681a      	ldreq	r2, [r3, #0]
 8009234:	685b      	ldreq	r3, [r3, #4]
 8009236:	6063      	str	r3, [r4, #4]
 8009238:	bf04      	itt	eq
 800923a:	1852      	addeq	r2, r2, r1
 800923c:	6022      	streq	r2, [r4, #0]
 800923e:	602c      	str	r4, [r5, #0]
 8009240:	e7ec      	b.n	800921c <_free_r+0x28>
 8009242:	461a      	mov	r2, r3
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	b10b      	cbz	r3, 800924c <_free_r+0x58>
 8009248:	42a3      	cmp	r3, r4
 800924a:	d9fa      	bls.n	8009242 <_free_r+0x4e>
 800924c:	6811      	ldr	r1, [r2, #0]
 800924e:	1855      	adds	r5, r2, r1
 8009250:	42a5      	cmp	r5, r4
 8009252:	d10b      	bne.n	800926c <_free_r+0x78>
 8009254:	6824      	ldr	r4, [r4, #0]
 8009256:	4421      	add	r1, r4
 8009258:	1854      	adds	r4, r2, r1
 800925a:	42a3      	cmp	r3, r4
 800925c:	6011      	str	r1, [r2, #0]
 800925e:	d1dd      	bne.n	800921c <_free_r+0x28>
 8009260:	681c      	ldr	r4, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	6053      	str	r3, [r2, #4]
 8009266:	4421      	add	r1, r4
 8009268:	6011      	str	r1, [r2, #0]
 800926a:	e7d7      	b.n	800921c <_free_r+0x28>
 800926c:	d902      	bls.n	8009274 <_free_r+0x80>
 800926e:	230c      	movs	r3, #12
 8009270:	6003      	str	r3, [r0, #0]
 8009272:	e7d3      	b.n	800921c <_free_r+0x28>
 8009274:	6825      	ldr	r5, [r4, #0]
 8009276:	1961      	adds	r1, r4, r5
 8009278:	428b      	cmp	r3, r1
 800927a:	bf04      	itt	eq
 800927c:	6819      	ldreq	r1, [r3, #0]
 800927e:	685b      	ldreq	r3, [r3, #4]
 8009280:	6063      	str	r3, [r4, #4]
 8009282:	bf04      	itt	eq
 8009284:	1949      	addeq	r1, r1, r5
 8009286:	6021      	streq	r1, [r4, #0]
 8009288:	6054      	str	r4, [r2, #4]
 800928a:	e7c7      	b.n	800921c <_free_r+0x28>
 800928c:	b003      	add	sp, #12
 800928e:	bd30      	pop	{r4, r5, pc}
 8009290:	20001cdc 	.word	0x20001cdc

08009294 <_malloc_r>:
 8009294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009296:	1ccd      	adds	r5, r1, #3
 8009298:	f025 0503 	bic.w	r5, r5, #3
 800929c:	3508      	adds	r5, #8
 800929e:	2d0c      	cmp	r5, #12
 80092a0:	bf38      	it	cc
 80092a2:	250c      	movcc	r5, #12
 80092a4:	2d00      	cmp	r5, #0
 80092a6:	4606      	mov	r6, r0
 80092a8:	db01      	blt.n	80092ae <_malloc_r+0x1a>
 80092aa:	42a9      	cmp	r1, r5
 80092ac:	d903      	bls.n	80092b6 <_malloc_r+0x22>
 80092ae:	230c      	movs	r3, #12
 80092b0:	6033      	str	r3, [r6, #0]
 80092b2:	2000      	movs	r0, #0
 80092b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b6:	f000 f933 	bl	8009520 <__malloc_lock>
 80092ba:	4921      	ldr	r1, [pc, #132]	; (8009340 <_malloc_r+0xac>)
 80092bc:	680a      	ldr	r2, [r1, #0]
 80092be:	4614      	mov	r4, r2
 80092c0:	b99c      	cbnz	r4, 80092ea <_malloc_r+0x56>
 80092c2:	4f20      	ldr	r7, [pc, #128]	; (8009344 <_malloc_r+0xb0>)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	b923      	cbnz	r3, 80092d2 <_malloc_r+0x3e>
 80092c8:	4621      	mov	r1, r4
 80092ca:	4630      	mov	r0, r6
 80092cc:	f000 f83c 	bl	8009348 <_sbrk_r>
 80092d0:	6038      	str	r0, [r7, #0]
 80092d2:	4629      	mov	r1, r5
 80092d4:	4630      	mov	r0, r6
 80092d6:	f000 f837 	bl	8009348 <_sbrk_r>
 80092da:	1c43      	adds	r3, r0, #1
 80092dc:	d123      	bne.n	8009326 <_malloc_r+0x92>
 80092de:	230c      	movs	r3, #12
 80092e0:	6033      	str	r3, [r6, #0]
 80092e2:	4630      	mov	r0, r6
 80092e4:	f000 f922 	bl	800952c <__malloc_unlock>
 80092e8:	e7e3      	b.n	80092b2 <_malloc_r+0x1e>
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	1b5b      	subs	r3, r3, r5
 80092ee:	d417      	bmi.n	8009320 <_malloc_r+0x8c>
 80092f0:	2b0b      	cmp	r3, #11
 80092f2:	d903      	bls.n	80092fc <_malloc_r+0x68>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	441c      	add	r4, r3
 80092f8:	6025      	str	r5, [r4, #0]
 80092fa:	e004      	b.n	8009306 <_malloc_r+0x72>
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	42a2      	cmp	r2, r4
 8009300:	bf0c      	ite	eq
 8009302:	600b      	streq	r3, [r1, #0]
 8009304:	6053      	strne	r3, [r2, #4]
 8009306:	4630      	mov	r0, r6
 8009308:	f000 f910 	bl	800952c <__malloc_unlock>
 800930c:	f104 000b 	add.w	r0, r4, #11
 8009310:	1d23      	adds	r3, r4, #4
 8009312:	f020 0007 	bic.w	r0, r0, #7
 8009316:	1ac2      	subs	r2, r0, r3
 8009318:	d0cc      	beq.n	80092b4 <_malloc_r+0x20>
 800931a:	1a1b      	subs	r3, r3, r0
 800931c:	50a3      	str	r3, [r4, r2]
 800931e:	e7c9      	b.n	80092b4 <_malloc_r+0x20>
 8009320:	4622      	mov	r2, r4
 8009322:	6864      	ldr	r4, [r4, #4]
 8009324:	e7cc      	b.n	80092c0 <_malloc_r+0x2c>
 8009326:	1cc4      	adds	r4, r0, #3
 8009328:	f024 0403 	bic.w	r4, r4, #3
 800932c:	42a0      	cmp	r0, r4
 800932e:	d0e3      	beq.n	80092f8 <_malloc_r+0x64>
 8009330:	1a21      	subs	r1, r4, r0
 8009332:	4630      	mov	r0, r6
 8009334:	f000 f808 	bl	8009348 <_sbrk_r>
 8009338:	3001      	adds	r0, #1
 800933a:	d1dd      	bne.n	80092f8 <_malloc_r+0x64>
 800933c:	e7cf      	b.n	80092de <_malloc_r+0x4a>
 800933e:	bf00      	nop
 8009340:	20001cdc 	.word	0x20001cdc
 8009344:	20001ce0 	.word	0x20001ce0

08009348 <_sbrk_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4d06      	ldr	r5, [pc, #24]	; (8009364 <_sbrk_r+0x1c>)
 800934c:	2300      	movs	r3, #0
 800934e:	4604      	mov	r4, r0
 8009350:	4608      	mov	r0, r1
 8009352:	602b      	str	r3, [r5, #0]
 8009354:	f000 fc12 	bl	8009b7c <_sbrk>
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	d102      	bne.n	8009362 <_sbrk_r+0x1a>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	b103      	cbz	r3, 8009362 <_sbrk_r+0x1a>
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	2000288c 	.word	0x2000288c

08009368 <__sread>:
 8009368:	b510      	push	{r4, lr}
 800936a:	460c      	mov	r4, r1
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	f000 fa3c 	bl	80097ec <_read_r>
 8009374:	2800      	cmp	r0, #0
 8009376:	bfab      	itete	ge
 8009378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800937a:	89a3      	ldrhlt	r3, [r4, #12]
 800937c:	181b      	addge	r3, r3, r0
 800937e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009382:	bfac      	ite	ge
 8009384:	6563      	strge	r3, [r4, #84]	; 0x54
 8009386:	81a3      	strhlt	r3, [r4, #12]
 8009388:	bd10      	pop	{r4, pc}

0800938a <__swrite>:
 800938a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938e:	461f      	mov	r7, r3
 8009390:	898b      	ldrh	r3, [r1, #12]
 8009392:	05db      	lsls	r3, r3, #23
 8009394:	4605      	mov	r5, r0
 8009396:	460c      	mov	r4, r1
 8009398:	4616      	mov	r6, r2
 800939a:	d505      	bpl.n	80093a8 <__swrite+0x1e>
 800939c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a0:	2302      	movs	r3, #2
 80093a2:	2200      	movs	r2, #0
 80093a4:	f000 f898 	bl	80094d8 <_lseek_r>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	4632      	mov	r2, r6
 80093b6:	463b      	mov	r3, r7
 80093b8:	4628      	mov	r0, r5
 80093ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093be:	f000 b817 	b.w	80093f0 <_write_r>

080093c2 <__sseek>:
 80093c2:	b510      	push	{r4, lr}
 80093c4:	460c      	mov	r4, r1
 80093c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ca:	f000 f885 	bl	80094d8 <_lseek_r>
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	bf15      	itete	ne
 80093d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80093d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093de:	81a3      	strheq	r3, [r4, #12]
 80093e0:	bf18      	it	ne
 80093e2:	81a3      	strhne	r3, [r4, #12]
 80093e4:	bd10      	pop	{r4, pc}

080093e6 <__sclose>:
 80093e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ea:	f000 b831 	b.w	8009450 <_close_r>
	...

080093f0 <_write_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4d07      	ldr	r5, [pc, #28]	; (8009410 <_write_r+0x20>)
 80093f4:	4604      	mov	r4, r0
 80093f6:	4608      	mov	r0, r1
 80093f8:	4611      	mov	r1, r2
 80093fa:	2200      	movs	r2, #0
 80093fc:	602a      	str	r2, [r5, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	f7f8 fa62 	bl	80018c8 <_write>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_write_r+0x1e>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_write_r+0x1e>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	2000288c 	.word	0x2000288c

08009414 <__assert_func>:
 8009414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009416:	4614      	mov	r4, r2
 8009418:	461a      	mov	r2, r3
 800941a:	4b09      	ldr	r3, [pc, #36]	; (8009440 <__assert_func+0x2c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4605      	mov	r5, r0
 8009420:	68d8      	ldr	r0, [r3, #12]
 8009422:	b14c      	cbz	r4, 8009438 <__assert_func+0x24>
 8009424:	4b07      	ldr	r3, [pc, #28]	; (8009444 <__assert_func+0x30>)
 8009426:	9100      	str	r1, [sp, #0]
 8009428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800942c:	4906      	ldr	r1, [pc, #24]	; (8009448 <__assert_func+0x34>)
 800942e:	462b      	mov	r3, r5
 8009430:	f000 f81e 	bl	8009470 <fiprintf>
 8009434:	f000 f9f9 	bl	800982a <abort>
 8009438:	4b04      	ldr	r3, [pc, #16]	; (800944c <__assert_func+0x38>)
 800943a:	461c      	mov	r4, r3
 800943c:	e7f3      	b.n	8009426 <__assert_func+0x12>
 800943e:	bf00      	nop
 8009440:	2000173c 	.word	0x2000173c
 8009444:	08009e94 	.word	0x08009e94
 8009448:	08009ea1 	.word	0x08009ea1
 800944c:	08009ecf 	.word	0x08009ecf

08009450 <_close_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d06      	ldr	r5, [pc, #24]	; (800946c <_close_r+0x1c>)
 8009454:	2300      	movs	r3, #0
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	602b      	str	r3, [r5, #0]
 800945c:	f7f8 fa4e 	bl	80018fc <_close>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	d102      	bne.n	800946a <_close_r+0x1a>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b103      	cbz	r3, 800946a <_close_r+0x1a>
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	2000288c 	.word	0x2000288c

08009470 <fiprintf>:
 8009470:	b40e      	push	{r1, r2, r3}
 8009472:	b503      	push	{r0, r1, lr}
 8009474:	4601      	mov	r1, r0
 8009476:	ab03      	add	r3, sp, #12
 8009478:	4805      	ldr	r0, [pc, #20]	; (8009490 <fiprintf+0x20>)
 800947a:	f853 2b04 	ldr.w	r2, [r3], #4
 800947e:	6800      	ldr	r0, [r0, #0]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	f000 f883 	bl	800958c <_vfiprintf_r>
 8009486:	b002      	add	sp, #8
 8009488:	f85d eb04 	ldr.w	lr, [sp], #4
 800948c:	b003      	add	sp, #12
 800948e:	4770      	bx	lr
 8009490:	2000173c 	.word	0x2000173c

08009494 <_fstat_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d07      	ldr	r5, [pc, #28]	; (80094b4 <_fstat_r+0x20>)
 8009498:	2300      	movs	r3, #0
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	4611      	mov	r1, r2
 80094a0:	602b      	str	r3, [r5, #0]
 80094a2:	f7f8 fa57 	bl	8001954 <_fstat>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	d102      	bne.n	80094b0 <_fstat_r+0x1c>
 80094aa:	682b      	ldr	r3, [r5, #0]
 80094ac:	b103      	cbz	r3, 80094b0 <_fstat_r+0x1c>
 80094ae:	6023      	str	r3, [r4, #0]
 80094b0:	bd38      	pop	{r3, r4, r5, pc}
 80094b2:	bf00      	nop
 80094b4:	2000288c 	.word	0x2000288c

080094b8 <_isatty_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d06      	ldr	r5, [pc, #24]	; (80094d4 <_isatty_r+0x1c>)
 80094bc:	2300      	movs	r3, #0
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	f7f8 f9f4 	bl	80018b0 <_isatty>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_isatty_r+0x1a>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_isatty_r+0x1a>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	2000288c 	.word	0x2000288c

080094d8 <_lseek_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d07      	ldr	r5, [pc, #28]	; (80094f8 <_lseek_r+0x20>)
 80094dc:	4604      	mov	r4, r0
 80094de:	4608      	mov	r0, r1
 80094e0:	4611      	mov	r1, r2
 80094e2:	2200      	movs	r2, #0
 80094e4:	602a      	str	r2, [r5, #0]
 80094e6:	461a      	mov	r2, r3
 80094e8:	f7f8 fa14 	bl	8001914 <_lseek>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	d102      	bne.n	80094f6 <_lseek_r+0x1e>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	b103      	cbz	r3, 80094f6 <_lseek_r+0x1e>
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	2000288c 	.word	0x2000288c

080094fc <__ascii_mbtowc>:
 80094fc:	b082      	sub	sp, #8
 80094fe:	b901      	cbnz	r1, 8009502 <__ascii_mbtowc+0x6>
 8009500:	a901      	add	r1, sp, #4
 8009502:	b142      	cbz	r2, 8009516 <__ascii_mbtowc+0x1a>
 8009504:	b14b      	cbz	r3, 800951a <__ascii_mbtowc+0x1e>
 8009506:	7813      	ldrb	r3, [r2, #0]
 8009508:	600b      	str	r3, [r1, #0]
 800950a:	7812      	ldrb	r2, [r2, #0]
 800950c:	1e10      	subs	r0, r2, #0
 800950e:	bf18      	it	ne
 8009510:	2001      	movne	r0, #1
 8009512:	b002      	add	sp, #8
 8009514:	4770      	bx	lr
 8009516:	4610      	mov	r0, r2
 8009518:	e7fb      	b.n	8009512 <__ascii_mbtowc+0x16>
 800951a:	f06f 0001 	mvn.w	r0, #1
 800951e:	e7f8      	b.n	8009512 <__ascii_mbtowc+0x16>

08009520 <__malloc_lock>:
 8009520:	4801      	ldr	r0, [pc, #4]	; (8009528 <__malloc_lock+0x8>)
 8009522:	f7ff ba6a 	b.w	80089fa <__retarget_lock_acquire_recursive>
 8009526:	bf00      	nop
 8009528:	20002884 	.word	0x20002884

0800952c <__malloc_unlock>:
 800952c:	4801      	ldr	r0, [pc, #4]	; (8009534 <__malloc_unlock+0x8>)
 800952e:	f7ff ba65 	b.w	80089fc <__retarget_lock_release_recursive>
 8009532:	bf00      	nop
 8009534:	20002884 	.word	0x20002884

08009538 <__sfputc_r>:
 8009538:	6893      	ldr	r3, [r2, #8]
 800953a:	3b01      	subs	r3, #1
 800953c:	2b00      	cmp	r3, #0
 800953e:	b410      	push	{r4}
 8009540:	6093      	str	r3, [r2, #8]
 8009542:	da08      	bge.n	8009556 <__sfputc_r+0x1e>
 8009544:	6994      	ldr	r4, [r2, #24]
 8009546:	42a3      	cmp	r3, r4
 8009548:	db01      	blt.n	800954e <__sfputc_r+0x16>
 800954a:	290a      	cmp	r1, #10
 800954c:	d103      	bne.n	8009556 <__sfputc_r+0x1e>
 800954e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009552:	f7fe b95b 	b.w	800780c <__swbuf_r>
 8009556:	6813      	ldr	r3, [r2, #0]
 8009558:	1c58      	adds	r0, r3, #1
 800955a:	6010      	str	r0, [r2, #0]
 800955c:	7019      	strb	r1, [r3, #0]
 800955e:	4608      	mov	r0, r1
 8009560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009564:	4770      	bx	lr

08009566 <__sfputs_r>:
 8009566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009568:	4606      	mov	r6, r0
 800956a:	460f      	mov	r7, r1
 800956c:	4614      	mov	r4, r2
 800956e:	18d5      	adds	r5, r2, r3
 8009570:	42ac      	cmp	r4, r5
 8009572:	d101      	bne.n	8009578 <__sfputs_r+0x12>
 8009574:	2000      	movs	r0, #0
 8009576:	e007      	b.n	8009588 <__sfputs_r+0x22>
 8009578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800957c:	463a      	mov	r2, r7
 800957e:	4630      	mov	r0, r6
 8009580:	f7ff ffda 	bl	8009538 <__sfputc_r>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d1f3      	bne.n	8009570 <__sfputs_r+0xa>
 8009588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800958c <_vfiprintf_r>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	460d      	mov	r5, r1
 8009592:	b09d      	sub	sp, #116	; 0x74
 8009594:	4614      	mov	r4, r2
 8009596:	4698      	mov	r8, r3
 8009598:	4606      	mov	r6, r0
 800959a:	b118      	cbz	r0, 80095a4 <_vfiprintf_r+0x18>
 800959c:	6983      	ldr	r3, [r0, #24]
 800959e:	b90b      	cbnz	r3, 80095a4 <_vfiprintf_r+0x18>
 80095a0:	f7ff f988 	bl	80088b4 <__sinit>
 80095a4:	4b89      	ldr	r3, [pc, #548]	; (80097cc <_vfiprintf_r+0x240>)
 80095a6:	429d      	cmp	r5, r3
 80095a8:	d11b      	bne.n	80095e2 <_vfiprintf_r+0x56>
 80095aa:	6875      	ldr	r5, [r6, #4]
 80095ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ae:	07d9      	lsls	r1, r3, #31
 80095b0:	d405      	bmi.n	80095be <_vfiprintf_r+0x32>
 80095b2:	89ab      	ldrh	r3, [r5, #12]
 80095b4:	059a      	lsls	r2, r3, #22
 80095b6:	d402      	bmi.n	80095be <_vfiprintf_r+0x32>
 80095b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ba:	f7ff fa1e 	bl	80089fa <__retarget_lock_acquire_recursive>
 80095be:	89ab      	ldrh	r3, [r5, #12]
 80095c0:	071b      	lsls	r3, r3, #28
 80095c2:	d501      	bpl.n	80095c8 <_vfiprintf_r+0x3c>
 80095c4:	692b      	ldr	r3, [r5, #16]
 80095c6:	b9eb      	cbnz	r3, 8009604 <_vfiprintf_r+0x78>
 80095c8:	4629      	mov	r1, r5
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7fe f970 	bl	80078b0 <__swsetup_r>
 80095d0:	b1c0      	cbz	r0, 8009604 <_vfiprintf_r+0x78>
 80095d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095d4:	07dc      	lsls	r4, r3, #31
 80095d6:	d50e      	bpl.n	80095f6 <_vfiprintf_r+0x6a>
 80095d8:	f04f 30ff 	mov.w	r0, #4294967295
 80095dc:	b01d      	add	sp, #116	; 0x74
 80095de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e2:	4b7b      	ldr	r3, [pc, #492]	; (80097d0 <_vfiprintf_r+0x244>)
 80095e4:	429d      	cmp	r5, r3
 80095e6:	d101      	bne.n	80095ec <_vfiprintf_r+0x60>
 80095e8:	68b5      	ldr	r5, [r6, #8]
 80095ea:	e7df      	b.n	80095ac <_vfiprintf_r+0x20>
 80095ec:	4b79      	ldr	r3, [pc, #484]	; (80097d4 <_vfiprintf_r+0x248>)
 80095ee:	429d      	cmp	r5, r3
 80095f0:	bf08      	it	eq
 80095f2:	68f5      	ldreq	r5, [r6, #12]
 80095f4:	e7da      	b.n	80095ac <_vfiprintf_r+0x20>
 80095f6:	89ab      	ldrh	r3, [r5, #12]
 80095f8:	0598      	lsls	r0, r3, #22
 80095fa:	d4ed      	bmi.n	80095d8 <_vfiprintf_r+0x4c>
 80095fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095fe:	f7ff f9fd 	bl	80089fc <__retarget_lock_release_recursive>
 8009602:	e7e9      	b.n	80095d8 <_vfiprintf_r+0x4c>
 8009604:	2300      	movs	r3, #0
 8009606:	9309      	str	r3, [sp, #36]	; 0x24
 8009608:	2320      	movs	r3, #32
 800960a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800960e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009612:	2330      	movs	r3, #48	; 0x30
 8009614:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097d8 <_vfiprintf_r+0x24c>
 8009618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800961c:	f04f 0901 	mov.w	r9, #1
 8009620:	4623      	mov	r3, r4
 8009622:	469a      	mov	sl, r3
 8009624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009628:	b10a      	cbz	r2, 800962e <_vfiprintf_r+0xa2>
 800962a:	2a25      	cmp	r2, #37	; 0x25
 800962c:	d1f9      	bne.n	8009622 <_vfiprintf_r+0x96>
 800962e:	ebba 0b04 	subs.w	fp, sl, r4
 8009632:	d00b      	beq.n	800964c <_vfiprintf_r+0xc0>
 8009634:	465b      	mov	r3, fp
 8009636:	4622      	mov	r2, r4
 8009638:	4629      	mov	r1, r5
 800963a:	4630      	mov	r0, r6
 800963c:	f7ff ff93 	bl	8009566 <__sfputs_r>
 8009640:	3001      	adds	r0, #1
 8009642:	f000 80aa 	beq.w	800979a <_vfiprintf_r+0x20e>
 8009646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009648:	445a      	add	r2, fp
 800964a:	9209      	str	r2, [sp, #36]	; 0x24
 800964c:	f89a 3000 	ldrb.w	r3, [sl]
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 80a2 	beq.w	800979a <_vfiprintf_r+0x20e>
 8009656:	2300      	movs	r3, #0
 8009658:	f04f 32ff 	mov.w	r2, #4294967295
 800965c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009660:	f10a 0a01 	add.w	sl, sl, #1
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	9307      	str	r3, [sp, #28]
 8009668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800966c:	931a      	str	r3, [sp, #104]	; 0x68
 800966e:	4654      	mov	r4, sl
 8009670:	2205      	movs	r2, #5
 8009672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009676:	4858      	ldr	r0, [pc, #352]	; (80097d8 <_vfiprintf_r+0x24c>)
 8009678:	f7f6 fdb2 	bl	80001e0 <memchr>
 800967c:	9a04      	ldr	r2, [sp, #16]
 800967e:	b9d8      	cbnz	r0, 80096b8 <_vfiprintf_r+0x12c>
 8009680:	06d1      	lsls	r1, r2, #27
 8009682:	bf44      	itt	mi
 8009684:	2320      	movmi	r3, #32
 8009686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800968a:	0713      	lsls	r3, r2, #28
 800968c:	bf44      	itt	mi
 800968e:	232b      	movmi	r3, #43	; 0x2b
 8009690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009694:	f89a 3000 	ldrb.w	r3, [sl]
 8009698:	2b2a      	cmp	r3, #42	; 0x2a
 800969a:	d015      	beq.n	80096c8 <_vfiprintf_r+0x13c>
 800969c:	9a07      	ldr	r2, [sp, #28]
 800969e:	4654      	mov	r4, sl
 80096a0:	2000      	movs	r0, #0
 80096a2:	f04f 0c0a 	mov.w	ip, #10
 80096a6:	4621      	mov	r1, r4
 80096a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ac:	3b30      	subs	r3, #48	; 0x30
 80096ae:	2b09      	cmp	r3, #9
 80096b0:	d94e      	bls.n	8009750 <_vfiprintf_r+0x1c4>
 80096b2:	b1b0      	cbz	r0, 80096e2 <_vfiprintf_r+0x156>
 80096b4:	9207      	str	r2, [sp, #28]
 80096b6:	e014      	b.n	80096e2 <_vfiprintf_r+0x156>
 80096b8:	eba0 0308 	sub.w	r3, r0, r8
 80096bc:	fa09 f303 	lsl.w	r3, r9, r3
 80096c0:	4313      	orrs	r3, r2
 80096c2:	9304      	str	r3, [sp, #16]
 80096c4:	46a2      	mov	sl, r4
 80096c6:	e7d2      	b.n	800966e <_vfiprintf_r+0xe2>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	1d19      	adds	r1, r3, #4
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	9103      	str	r1, [sp, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	bfbb      	ittet	lt
 80096d4:	425b      	neglt	r3, r3
 80096d6:	f042 0202 	orrlt.w	r2, r2, #2
 80096da:	9307      	strge	r3, [sp, #28]
 80096dc:	9307      	strlt	r3, [sp, #28]
 80096de:	bfb8      	it	lt
 80096e0:	9204      	strlt	r2, [sp, #16]
 80096e2:	7823      	ldrb	r3, [r4, #0]
 80096e4:	2b2e      	cmp	r3, #46	; 0x2e
 80096e6:	d10c      	bne.n	8009702 <_vfiprintf_r+0x176>
 80096e8:	7863      	ldrb	r3, [r4, #1]
 80096ea:	2b2a      	cmp	r3, #42	; 0x2a
 80096ec:	d135      	bne.n	800975a <_vfiprintf_r+0x1ce>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	1d1a      	adds	r2, r3, #4
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	9203      	str	r2, [sp, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	bfb8      	it	lt
 80096fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80096fe:	3402      	adds	r4, #2
 8009700:	9305      	str	r3, [sp, #20]
 8009702:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097e8 <_vfiprintf_r+0x25c>
 8009706:	7821      	ldrb	r1, [r4, #0]
 8009708:	2203      	movs	r2, #3
 800970a:	4650      	mov	r0, sl
 800970c:	f7f6 fd68 	bl	80001e0 <memchr>
 8009710:	b140      	cbz	r0, 8009724 <_vfiprintf_r+0x198>
 8009712:	2340      	movs	r3, #64	; 0x40
 8009714:	eba0 000a 	sub.w	r0, r0, sl
 8009718:	fa03 f000 	lsl.w	r0, r3, r0
 800971c:	9b04      	ldr	r3, [sp, #16]
 800971e:	4303      	orrs	r3, r0
 8009720:	3401      	adds	r4, #1
 8009722:	9304      	str	r3, [sp, #16]
 8009724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009728:	482c      	ldr	r0, [pc, #176]	; (80097dc <_vfiprintf_r+0x250>)
 800972a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800972e:	2206      	movs	r2, #6
 8009730:	f7f6 fd56 	bl	80001e0 <memchr>
 8009734:	2800      	cmp	r0, #0
 8009736:	d03f      	beq.n	80097b8 <_vfiprintf_r+0x22c>
 8009738:	4b29      	ldr	r3, [pc, #164]	; (80097e0 <_vfiprintf_r+0x254>)
 800973a:	bb1b      	cbnz	r3, 8009784 <_vfiprintf_r+0x1f8>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	3307      	adds	r3, #7
 8009740:	f023 0307 	bic.w	r3, r3, #7
 8009744:	3308      	adds	r3, #8
 8009746:	9303      	str	r3, [sp, #12]
 8009748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800974a:	443b      	add	r3, r7
 800974c:	9309      	str	r3, [sp, #36]	; 0x24
 800974e:	e767      	b.n	8009620 <_vfiprintf_r+0x94>
 8009750:	fb0c 3202 	mla	r2, ip, r2, r3
 8009754:	460c      	mov	r4, r1
 8009756:	2001      	movs	r0, #1
 8009758:	e7a5      	b.n	80096a6 <_vfiprintf_r+0x11a>
 800975a:	2300      	movs	r3, #0
 800975c:	3401      	adds	r4, #1
 800975e:	9305      	str	r3, [sp, #20]
 8009760:	4619      	mov	r1, r3
 8009762:	f04f 0c0a 	mov.w	ip, #10
 8009766:	4620      	mov	r0, r4
 8009768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800976c:	3a30      	subs	r2, #48	; 0x30
 800976e:	2a09      	cmp	r2, #9
 8009770:	d903      	bls.n	800977a <_vfiprintf_r+0x1ee>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d0c5      	beq.n	8009702 <_vfiprintf_r+0x176>
 8009776:	9105      	str	r1, [sp, #20]
 8009778:	e7c3      	b.n	8009702 <_vfiprintf_r+0x176>
 800977a:	fb0c 2101 	mla	r1, ip, r1, r2
 800977e:	4604      	mov	r4, r0
 8009780:	2301      	movs	r3, #1
 8009782:	e7f0      	b.n	8009766 <_vfiprintf_r+0x1da>
 8009784:	ab03      	add	r3, sp, #12
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	462a      	mov	r2, r5
 800978a:	4b16      	ldr	r3, [pc, #88]	; (80097e4 <_vfiprintf_r+0x258>)
 800978c:	a904      	add	r1, sp, #16
 800978e:	4630      	mov	r0, r6
 8009790:	f7fd fb36 	bl	8006e00 <_printf_float>
 8009794:	4607      	mov	r7, r0
 8009796:	1c78      	adds	r0, r7, #1
 8009798:	d1d6      	bne.n	8009748 <_vfiprintf_r+0x1bc>
 800979a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800979c:	07d9      	lsls	r1, r3, #31
 800979e:	d405      	bmi.n	80097ac <_vfiprintf_r+0x220>
 80097a0:	89ab      	ldrh	r3, [r5, #12]
 80097a2:	059a      	lsls	r2, r3, #22
 80097a4:	d402      	bmi.n	80097ac <_vfiprintf_r+0x220>
 80097a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097a8:	f7ff f928 	bl	80089fc <__retarget_lock_release_recursive>
 80097ac:	89ab      	ldrh	r3, [r5, #12]
 80097ae:	065b      	lsls	r3, r3, #25
 80097b0:	f53f af12 	bmi.w	80095d8 <_vfiprintf_r+0x4c>
 80097b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097b6:	e711      	b.n	80095dc <_vfiprintf_r+0x50>
 80097b8:	ab03      	add	r3, sp, #12
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	462a      	mov	r2, r5
 80097be:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <_vfiprintf_r+0x258>)
 80097c0:	a904      	add	r1, sp, #16
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7fd fdc0 	bl	8007348 <_printf_i>
 80097c8:	e7e4      	b.n	8009794 <_vfiprintf_r+0x208>
 80097ca:	bf00      	nop
 80097cc:	08009cf4 	.word	0x08009cf4
 80097d0:	08009d14 	.word	0x08009d14
 80097d4:	08009cd4 	.word	0x08009cd4
 80097d8:	08009eda 	.word	0x08009eda
 80097dc:	08009ee4 	.word	0x08009ee4
 80097e0:	08006e01 	.word	0x08006e01
 80097e4:	08009567 	.word	0x08009567
 80097e8:	08009ee0 	.word	0x08009ee0

080097ec <_read_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4d07      	ldr	r5, [pc, #28]	; (800980c <_read_r+0x20>)
 80097f0:	4604      	mov	r4, r0
 80097f2:	4608      	mov	r0, r1
 80097f4:	4611      	mov	r1, r2
 80097f6:	2200      	movs	r2, #0
 80097f8:	602a      	str	r2, [r5, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	f7f8 f892 	bl	8001924 <_read>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	d102      	bne.n	800980a <_read_r+0x1e>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	b103      	cbz	r3, 800980a <_read_r+0x1e>
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	2000288c 	.word	0x2000288c

08009810 <__ascii_wctomb>:
 8009810:	b149      	cbz	r1, 8009826 <__ascii_wctomb+0x16>
 8009812:	2aff      	cmp	r2, #255	; 0xff
 8009814:	bf85      	ittet	hi
 8009816:	238a      	movhi	r3, #138	; 0x8a
 8009818:	6003      	strhi	r3, [r0, #0]
 800981a:	700a      	strbls	r2, [r1, #0]
 800981c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009820:	bf98      	it	ls
 8009822:	2001      	movls	r0, #1
 8009824:	4770      	bx	lr
 8009826:	4608      	mov	r0, r1
 8009828:	4770      	bx	lr

0800982a <abort>:
 800982a:	b508      	push	{r3, lr}
 800982c:	2006      	movs	r0, #6
 800982e:	f000 f82b 	bl	8009888 <raise>
 8009832:	2001      	movs	r0, #1
 8009834:	f000 f9b0 	bl	8009b98 <_exit>

08009838 <_raise_r>:
 8009838:	291f      	cmp	r1, #31
 800983a:	b538      	push	{r3, r4, r5, lr}
 800983c:	4604      	mov	r4, r0
 800983e:	460d      	mov	r5, r1
 8009840:	d904      	bls.n	800984c <_raise_r+0x14>
 8009842:	2316      	movs	r3, #22
 8009844:	6003      	str	r3, [r0, #0]
 8009846:	f04f 30ff 	mov.w	r0, #4294967295
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800984e:	b112      	cbz	r2, 8009856 <_raise_r+0x1e>
 8009850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009854:	b94b      	cbnz	r3, 800986a <_raise_r+0x32>
 8009856:	4620      	mov	r0, r4
 8009858:	f000 f830 	bl	80098bc <_getpid_r>
 800985c:	462a      	mov	r2, r5
 800985e:	4601      	mov	r1, r0
 8009860:	4620      	mov	r0, r4
 8009862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009866:	f000 b817 	b.w	8009898 <_kill_r>
 800986a:	2b01      	cmp	r3, #1
 800986c:	d00a      	beq.n	8009884 <_raise_r+0x4c>
 800986e:	1c59      	adds	r1, r3, #1
 8009870:	d103      	bne.n	800987a <_raise_r+0x42>
 8009872:	2316      	movs	r3, #22
 8009874:	6003      	str	r3, [r0, #0]
 8009876:	2001      	movs	r0, #1
 8009878:	e7e7      	b.n	800984a <_raise_r+0x12>
 800987a:	2400      	movs	r4, #0
 800987c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009880:	4628      	mov	r0, r5
 8009882:	4798      	blx	r3
 8009884:	2000      	movs	r0, #0
 8009886:	e7e0      	b.n	800984a <_raise_r+0x12>

08009888 <raise>:
 8009888:	4b02      	ldr	r3, [pc, #8]	; (8009894 <raise+0xc>)
 800988a:	4601      	mov	r1, r0
 800988c:	6818      	ldr	r0, [r3, #0]
 800988e:	f7ff bfd3 	b.w	8009838 <_raise_r>
 8009892:	bf00      	nop
 8009894:	2000173c 	.word	0x2000173c

08009898 <_kill_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4d07      	ldr	r5, [pc, #28]	; (80098b8 <_kill_r+0x20>)
 800989c:	2300      	movs	r3, #0
 800989e:	4604      	mov	r4, r0
 80098a0:	4608      	mov	r0, r1
 80098a2:	4611      	mov	r1, r2
 80098a4:	602b      	str	r3, [r5, #0]
 80098a6:	f000 f961 	bl	8009b6c <_kill>
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	d102      	bne.n	80098b4 <_kill_r+0x1c>
 80098ae:	682b      	ldr	r3, [r5, #0]
 80098b0:	b103      	cbz	r3, 80098b4 <_kill_r+0x1c>
 80098b2:	6023      	str	r3, [r4, #0]
 80098b4:	bd38      	pop	{r3, r4, r5, pc}
 80098b6:	bf00      	nop
 80098b8:	2000288c 	.word	0x2000288c

080098bc <_getpid_r>:
 80098bc:	f000 b94e 	b.w	8009b5c <_getpid>

080098c0 <asinf>:
 80098c0:	b508      	push	{r3, lr}
 80098c2:	ed2d 8b02 	vpush	{d8}
 80098c6:	eeb0 8a40 	vmov.f32	s16, s0
 80098ca:	f000 f851 	bl	8009970 <__ieee754_asinf>
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <asinf+0x5c>)
 80098d0:	f993 3000 	ldrsb.w	r3, [r3]
 80098d4:	3301      	adds	r3, #1
 80098d6:	eef0 8a40 	vmov.f32	s17, s0
 80098da:	d01a      	beq.n	8009912 <asinf+0x52>
 80098dc:	eeb4 8a48 	vcmp.f32	s16, s16
 80098e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e4:	d615      	bvs.n	8009912 <asinf+0x52>
 80098e6:	eeb0 0a48 	vmov.f32	s0, s16
 80098ea:	f000 f92a 	bl	8009b42 <fabsf>
 80098ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80098f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80098f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098fa:	dd0a      	ble.n	8009912 <asinf+0x52>
 80098fc:	f7fd f986 	bl	8006c0c <__errno>
 8009900:	ecbd 8b02 	vpop	{d8}
 8009904:	2321      	movs	r3, #33	; 0x21
 8009906:	6003      	str	r3, [r0, #0]
 8009908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800990c:	4804      	ldr	r0, [pc, #16]	; (8009920 <asinf+0x60>)
 800990e:	f000 b91f 	b.w	8009b50 <nanf>
 8009912:	eeb0 0a68 	vmov.f32	s0, s17
 8009916:	ecbd 8b02 	vpop	{d8}
 800991a:	bd08      	pop	{r3, pc}
 800991c:	2000190c 	.word	0x2000190c
 8009920:	08009ecf 	.word	0x08009ecf

08009924 <sqrtf>:
 8009924:	b508      	push	{r3, lr}
 8009926:	ed2d 8b02 	vpush	{d8}
 800992a:	eeb0 8a40 	vmov.f32	s16, s0
 800992e:	f000 f905 	bl	8009b3c <__ieee754_sqrtf>
 8009932:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <sqrtf+0x44>)
 8009934:	f993 3000 	ldrsb.w	r3, [r3]
 8009938:	3301      	adds	r3, #1
 800993a:	d011      	beq.n	8009960 <sqrtf+0x3c>
 800993c:	eeb4 8a48 	vcmp.f32	s16, s16
 8009940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009944:	d60c      	bvs.n	8009960 <sqrtf+0x3c>
 8009946:	eddf 8a09 	vldr	s17, [pc, #36]	; 800996c <sqrtf+0x48>
 800994a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800994e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009952:	d505      	bpl.n	8009960 <sqrtf+0x3c>
 8009954:	f7fd f95a 	bl	8006c0c <__errno>
 8009958:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800995c:	2321      	movs	r3, #33	; 0x21
 800995e:	6003      	str	r3, [r0, #0]
 8009960:	ecbd 8b02 	vpop	{d8}
 8009964:	bd08      	pop	{r3, pc}
 8009966:	bf00      	nop
 8009968:	2000190c 	.word	0x2000190c
 800996c:	00000000 	.word	0x00000000

08009970 <__ieee754_asinf>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	ee10 5a10 	vmov	r5, s0
 8009976:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800997a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800997e:	ed2d 8b04 	vpush	{d8-d9}
 8009982:	d10c      	bne.n	800999e <__ieee754_asinf+0x2e>
 8009984:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8009afc <__ieee754_asinf+0x18c>
 8009988:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8009b00 <__ieee754_asinf+0x190>
 800998c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009990:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009994:	eeb0 0a67 	vmov.f32	s0, s15
 8009998:	ecbd 8b04 	vpop	{d8-d9}
 800999c:	bd38      	pop	{r3, r4, r5, pc}
 800999e:	dd04      	ble.n	80099aa <__ieee754_asinf+0x3a>
 80099a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80099a4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80099a8:	e7f6      	b.n	8009998 <__ieee754_asinf+0x28>
 80099aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80099ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80099b2:	da0b      	bge.n	80099cc <__ieee754_asinf+0x5c>
 80099b4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80099b8:	da52      	bge.n	8009a60 <__ieee754_asinf+0xf0>
 80099ba:	eddf 7a52 	vldr	s15, [pc, #328]	; 8009b04 <__ieee754_asinf+0x194>
 80099be:	ee70 7a27 	vadd.f32	s15, s0, s15
 80099c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80099c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ca:	dce5      	bgt.n	8009998 <__ieee754_asinf+0x28>
 80099cc:	f000 f8b9 	bl	8009b42 <fabsf>
 80099d0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80099d4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80099d8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80099dc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8009b08 <__ieee754_asinf+0x198>
 80099e0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8009b0c <__ieee754_asinf+0x19c>
 80099e4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8009b10 <__ieee754_asinf+0x1a0>
 80099e8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80099ec:	eddf 7a49 	vldr	s15, [pc, #292]	; 8009b14 <__ieee754_asinf+0x1a4>
 80099f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80099f4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8009b18 <__ieee754_asinf+0x1a8>
 80099f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80099fc:	eddf 7a47 	vldr	s15, [pc, #284]	; 8009b1c <__ieee754_asinf+0x1ac>
 8009a00:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009a04:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009b20 <__ieee754_asinf+0x1b0>
 8009a08:	eea7 9a88 	vfma.f32	s18, s15, s16
 8009a0c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8009b24 <__ieee754_asinf+0x1b4>
 8009a10:	eee8 7a07 	vfma.f32	s15, s16, s14
 8009a14:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8009b28 <__ieee754_asinf+0x1b8>
 8009a18:	eea7 7a88 	vfma.f32	s14, s15, s16
 8009a1c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8009b2c <__ieee754_asinf+0x1bc>
 8009a20:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009a24:	eeb0 0a48 	vmov.f32	s0, s16
 8009a28:	eee7 8a88 	vfma.f32	s17, s15, s16
 8009a2c:	f000 f886 	bl	8009b3c <__ieee754_sqrtf>
 8009a30:	4b3f      	ldr	r3, [pc, #252]	; (8009b30 <__ieee754_asinf+0x1c0>)
 8009a32:	ee29 9a08 	vmul.f32	s18, s18, s16
 8009a36:	429c      	cmp	r4, r3
 8009a38:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8009a3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009a40:	dd3d      	ble.n	8009abe <__ieee754_asinf+0x14e>
 8009a42:	eea0 0a06 	vfma.f32	s0, s0, s12
 8009a46:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8009b34 <__ieee754_asinf+0x1c4>
 8009a4a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8009a4e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8009b00 <__ieee754_asinf+0x190>
 8009a52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a56:	2d00      	cmp	r5, #0
 8009a58:	bfd8      	it	le
 8009a5a:	eeb1 0a40 	vnegle.f32	s0, s0
 8009a5e:	e79b      	b.n	8009998 <__ieee754_asinf+0x28>
 8009a60:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009a64:	eddf 6a28 	vldr	s13, [pc, #160]	; 8009b08 <__ieee754_asinf+0x198>
 8009a68:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009b0c <__ieee754_asinf+0x19c>
 8009a6c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8009b20 <__ieee754_asinf+0x1b0>
 8009a70:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009a74:	eddf 6a27 	vldr	s13, [pc, #156]	; 8009b14 <__ieee754_asinf+0x1a4>
 8009a78:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009a7c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009b18 <__ieee754_asinf+0x1a8>
 8009a80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a84:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009b1c <__ieee754_asinf+0x1ac>
 8009a88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009a8c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009b10 <__ieee754_asinf+0x1a0>
 8009a90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a94:	eddf 6a23 	vldr	s13, [pc, #140]	; 8009b24 <__ieee754_asinf+0x1b4>
 8009a98:	eee7 6a86 	vfma.f32	s13, s15, s12
 8009a9c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8009b28 <__ieee754_asinf+0x1b8>
 8009aa0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8009aa4:	eddf 6a21 	vldr	s13, [pc, #132]	; 8009b2c <__ieee754_asinf+0x1bc>
 8009aa8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ab0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8009ab4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8009ab8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8009abc:	e76c      	b.n	8009998 <__ieee754_asinf+0x28>
 8009abe:	ee10 3a10 	vmov	r3, s0
 8009ac2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009ac6:	f023 030f 	bic.w	r3, r3, #15
 8009aca:	ee07 3a10 	vmov	s14, r3
 8009ace:	eea7 8a47 	vfms.f32	s16, s14, s14
 8009ad2:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009ad6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ada:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8009ade:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009afc <__ieee754_asinf+0x18c>
 8009ae2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8009ae6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8009aea:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8009b38 <__ieee754_asinf+0x1c8>
 8009aee:	eeb0 6a40 	vmov.f32	s12, s0
 8009af2:	eea7 6a66 	vfms.f32	s12, s14, s13
 8009af6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009afa:	e7aa      	b.n	8009a52 <__ieee754_asinf+0xe2>
 8009afc:	b33bbd2e 	.word	0xb33bbd2e
 8009b00:	3fc90fdb 	.word	0x3fc90fdb
 8009b04:	7149f2ca 	.word	0x7149f2ca
 8009b08:	3811ef08 	.word	0x3811ef08
 8009b0c:	3a4f7f04 	.word	0x3a4f7f04
 8009b10:	3e2aaaab 	.word	0x3e2aaaab
 8009b14:	bd241146 	.word	0xbd241146
 8009b18:	3e4e0aa8 	.word	0x3e4e0aa8
 8009b1c:	bea6b090 	.word	0xbea6b090
 8009b20:	3d9dc62e 	.word	0x3d9dc62e
 8009b24:	bf303361 	.word	0xbf303361
 8009b28:	4001572d 	.word	0x4001572d
 8009b2c:	c019d139 	.word	0xc019d139
 8009b30:	3f799999 	.word	0x3f799999
 8009b34:	333bbd2e 	.word	0x333bbd2e
 8009b38:	3f490fdb 	.word	0x3f490fdb

08009b3c <__ieee754_sqrtf>:
 8009b3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009b40:	4770      	bx	lr

08009b42 <fabsf>:
 8009b42:	ee10 3a10 	vmov	r3, s0
 8009b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b4a:	ee00 3a10 	vmov	s0, r3
 8009b4e:	4770      	bx	lr

08009b50 <nanf>:
 8009b50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009b58 <nanf+0x8>
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	7fc00000 	.word	0x7fc00000

08009b5c <_getpid>:
 8009b5c:	4b02      	ldr	r3, [pc, #8]	; (8009b68 <_getpid+0xc>)
 8009b5e:	2258      	movs	r2, #88	; 0x58
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	f04f 30ff 	mov.w	r0, #4294967295
 8009b66:	4770      	bx	lr
 8009b68:	2000288c 	.word	0x2000288c

08009b6c <_kill>:
 8009b6c:	4b02      	ldr	r3, [pc, #8]	; (8009b78 <_kill+0xc>)
 8009b6e:	2258      	movs	r2, #88	; 0x58
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	f04f 30ff 	mov.w	r0, #4294967295
 8009b76:	4770      	bx	lr
 8009b78:	2000288c 	.word	0x2000288c

08009b7c <_sbrk>:
 8009b7c:	4b04      	ldr	r3, [pc, #16]	; (8009b90 <_sbrk+0x14>)
 8009b7e:	6819      	ldr	r1, [r3, #0]
 8009b80:	4602      	mov	r2, r0
 8009b82:	b909      	cbnz	r1, 8009b88 <_sbrk+0xc>
 8009b84:	4903      	ldr	r1, [pc, #12]	; (8009b94 <_sbrk+0x18>)
 8009b86:	6019      	str	r1, [r3, #0]
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	4402      	add	r2, r0
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	4770      	bx	lr
 8009b90:	20001ce4 	.word	0x20001ce4
 8009b94:	20002890 	.word	0x20002890

08009b98 <_exit>:
 8009b98:	e7fe      	b.n	8009b98 <_exit>
	...

08009b9c <_init>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	bf00      	nop
 8009ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	4770      	bx	lr

08009ba8 <_fini>:
 8009ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009baa:	bf00      	nop
 8009bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bae:	bc08      	pop	{r3}
 8009bb0:	469e      	mov	lr, r3
 8009bb2:	4770      	bx	lr
